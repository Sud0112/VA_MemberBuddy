{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Member Buddy Platform\n\n## Overview\n\nMember Buddy is a sophisticated, AI-powered web application for a premium health and wellness club. The platform serves three distinct user experiences: a public-facing website for lead generation, a secure member portal with personalized features, and a staff dashboard for member management and marketing campaigns. The application leverages Google Gemini AI to provide intelligent workout planning, retention strategies, and loyalty campaign generation.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18+ single-page application (SPA) using functional components and hooks\n- **Routing**: React Router DOM with role-based protected routes for member and staff areas\n- **Styling**: Tailwind CSS with a custom component library inspired by ShadCN UI design system\n- **State Management**: Hybrid approach using React Context for global authentication state and local useState hooks for component-specific state\n- **AI Integration**: Google Gemini API integration via @google/genai SDK for workout planning and business intelligence features\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js server framework\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Authentication**: Replit Auth integration with OpenID Connect for secure user authentication\n- **Session Management**: Express sessions with PostgreSQL storage using connect-pg-simple\n- **API Design**: RESTful API structure with role-based access control and comprehensive error handling\n\n### Database Schema\n- **Users Table**: Stores user profiles with role-based access (member/staff), membership types, and loyalty points\n- **Loyalty System**: Dedicated tables for loyalty offers, redemptions, and point tracking\n- **Member Management**: Tables for outreach actions, chat conversations, and workout plans\n- **Session Storage**: PostgreSQL-backed session management for authentication persistence\n\n### Authentication & Authorization\n- **Authentication Provider**: Replit Auth with OpenID Connect protocol\n- **Role-Based Access**: Two-tier system with \"member\" and \"staff\" roles\n- **Protected Routes**: Client-side route protection with server-side API validation\n- **Session Security**: HTTP-only cookies with secure session management\n\n### AI Integration Architecture\n- **Primary AI Provider**: Google Gemini API for all AI-powered features\n- **Service Architecture**: Centralized AI service layer with mock fallbacks for development\n- **AI Features**: \n  - Personalized workout plan generation with structured JSON responses\n  - Member retention strategy generation with markdown formatting\n  - Loyalty campaign creation with targeted offer generation\n  - Public chatbot for lead generation and customer support\n\n## External Dependencies\n\n### Core Technologies\n- **Database**: PostgreSQL via Neon serverless connection\n- **AI Services**: Google Gemini API for all machine learning capabilities\n- **Authentication**: Replit Auth system with OpenID Connect\n- **UI Components**: Radix UI primitives for accessible component foundation\n- **Development Tools**: Vite for build tooling and development server\n\n### Third-Party Services\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Google Gemini**: AI/ML service for natural language processing and content generation\n- **Replit Platform**: Authentication, hosting, and development environment integration\n\n### Key Libraries\n- **Frontend**: React Query for server state management, Wouter for routing, React Hook Form for form handling\n- **Backend**: Drizzle ORM for database operations, Passport.js for authentication middleware\n- **Styling**: Tailwind CSS with class-variance-authority for component variants\n- **Utilities**: Zod for schema validation, date-fns for date manipulation, various Radix UI components","size_bytes":3943},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n          50: '#fef2f2',\n          500: '#e60012',\n          600: '#dc0010',\n          700: '#b5000e'\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      fontFamily: {\n        sans: [\"Inter\", \"system-ui\", \"-apple-system\", \"BlinkMacSystemFont\", \"Segoe UI\", \"Roboto\", \"sans-serif\"],\n        serif: [\"Georgia\", \"serif\"],\n        mono: [\"Menlo\", \"monospace\"],\n        inter: [\"Inter\", \"sans-serif\"]\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3134},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { seedLoyaltyOffers, seedDummyUsers, seedSampleChurnEmails } from \"./storage\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Seed initial data\n  await seedLoyaltyOffers();\n  await seedDummyUsers();\n  await seedSampleChurnEmails();\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2266},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET || 'development-session-secret-' + Math.random().toString(36),\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    // Use the first domain from REPLIT_DOMAINS if hostname is localhost/127.0.0.1\n    const hostname = req.hostname === '127.0.0.1' || req.hostname === 'localhost' \n      ? process.env.REPLIT_DOMAINS!.split(\",\")[0] \n      : req.hostname;\n    passport.authenticate(`replitauth:${hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    // Use the first domain from REPLIT_DOMAINS if hostname is localhost/127.0.0.1\n    const hostname = req.hostname === '127.0.0.1' || req.hostname === 'localhost' \n      ? process.env.REPLIT_DOMAINS!.split(\",\")[0] \n      : req.hostname;\n    passport.authenticate(`replitauth:${hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4785},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage, seedLoyaltyOffers, seedDummyUsers } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport {\n  insertLoyaltyOfferSchema,\n  insertOfferRedemptionSchema,\n  insertOutreachActionSchema,\n  insertChatConversationSchema,\n  insertWorkoutPlanSchema,\n} from \"@shared/schema\";\nimport {\n  generateRetentionStrategies,\n  generateLoyaltyOffers,\n  sendMessageToChat,\n  generateWorkoutPlan,\n  generateSalesEmail,\n} from \"./services/geminiService\";\nimport { EmailService } from \"./services/emailService\";\nimport { EmailTrackingService } from \"./services/emailTrackingService\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Role toggle endpoint for testing personas\n  app.post('/api/user/toggle-role', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { role } = req.body;\n\n      if (!role || !['member', 'staff'].includes(role)) {\n        return res.status(400).json({ message: 'Invalid role. Must be \"member\" or \"staff\"' });\n      }\n\n      const updatedUser = await storage.upsertUser({\n        id: userId,\n        role,\n        updatedAt: new Date()\n      });\n\n      res.json({ message: 'Role updated successfully', user: updatedUser });\n    } catch (error) {\n      console.error('Error toggling user role:', error);\n      res.status(500).json({ message: 'Failed to update user role' });\n    }\n  });\n\n  // Loyalty offers endpoints\n  app.get('/api/loyalty-offers', isAuthenticated, async (req, res) => {\n    try {\n      const offers = await storage.getLoyaltyOffers();\n      res.json(offers);\n    } catch (error) {\n      console.error(\"Error fetching loyalty offers:\", error);\n      res.status(500).json({ message: \"Failed to fetch loyalty offers\" });\n    }\n  });\n\n  app.post('/api/loyalty-offers', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || user.role !== 'staff') {\n        return res.status(403).json({ message: \"Staff access required\" });\n      }\n\n      const offerData = insertLoyaltyOfferSchema.parse({\n        ...req.body,\n        createdBy: user.id,\n      });\n\n      const offer = await storage.createLoyaltyOffer(offerData);\n      res.json(offer);\n    } catch (error) {\n      console.error(\"Error creating loyalty offer:\", error);\n      res.status(500).json({ message: \"Failed to create loyalty offer\" });\n    }\n  });\n\n  app.delete('/api/loyalty-offers/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || user.role !== 'staff') {\n        return res.status(403).json({ message: \"Staff access required\" });\n      }\n\n      await storage.deactivateLoyaltyOffer(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deactivating loyalty offer:\", error);\n      res.status(500).json({ message: \"Failed to deactivate loyalty offer\" });\n    }\n  });\n\n  // Offer redemption endpoints\n  app.get('/api/user/redemptions', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const redemptions = await storage.getUserRedemptions(userId);\n      res.json(redemptions);\n    } catch (error) {\n      console.error(\"Error fetching user redemptions:\", error);\n      res.status(500).json({ message: \"Failed to fetch redemptions\" });\n    }\n  });\n\n  app.post('/api/offers/:offerId/redeem', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n\n      if (!user || user.role !== 'member') {\n        return res.status(403).json({ message: \"Member access required\" });\n      }\n\n      const offers = await storage.getLoyaltyOffers();\n      const offer = offers.find(o => o.id === req.params.offerId);\n\n      if (!offer) {\n        return res.status(404).json({ message: \"Offer not found\" });\n      }\n\n      if ((user.loyaltyPoints || 0) < offer.points) {\n        return res.status(400).json({ message: \"Insufficient points\" });\n      }\n\n      // Check if already redeemed\n      const userRedemptions = await storage.getUserRedemptions(userId);\n      const alreadyRedeemed = userRedemptions.some(r => r.offerId === offer.id);\n\n      if (alreadyRedeemed) {\n        return res.status(400).json({ message: \"Offer already redeemed\" });\n      }\n\n      const redemptionData = insertOfferRedemptionSchema.parse({\n        userId,\n        offerId: offer.id,\n        pointsSpent: offer.points,\n      });\n\n      const redemption = await storage.redeemOffer(redemptionData);\n      res.json(redemption);\n    } catch (error) {\n      console.error(\"Error redeeming offer:\", error);\n      res.status(500).json({ message: \"Failed to redeem offer\" });\n    }\n  });\n\n  // Member management endpoints (Staff only)\n  app.get('/api/staff/at-risk-members', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || user.role !== 'staff') {\n        return res.status(403).json({ message: \"Staff access required\" });\n      }\n\n      const atRiskMembers = await storage.getAtRiskMembers();\n      res.json(atRiskMembers);\n    } catch (error) {\n      console.error(\"Error fetching at-risk members:\", error);\n      res.status(500).json({ message: \"Failed to fetch at-risk members\" });\n    }\n  });\n\n  app.get('/api/staff/member/:memberId/outreach-history', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || user.role !== 'staff') {\n        return res.status(403).json({ message: \"Staff access required\" });\n      }\n\n      const history = await storage.getMemberOutreachHistory(req.params.memberId);\n      res.json(history);\n    } catch (error) {\n      console.error(\"Error fetching outreach history:\", error);\n      res.status(500).json({ message: \"Failed to fetch outreach history\" });\n    }\n  });\n\n  app.post('/api/staff/outreach-action', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || user.role !== 'staff') {\n        return res.status(403).json({ message: \"Staff access required\" });\n      }\n\n      const actionData = insertOutreachActionSchema.parse({\n        ...req.body,\n        staffId: user.id,\n      });\n\n      const action = await storage.createOutreachAction(actionData);\n      res.json(action);\n    } catch (error) {\n      console.error(\"Error creating outreach action:\", error);\n      res.status(500).json({ message: \"Failed to create outreach action\" });\n    }\n  });\n\n  // AI-powered endpoints\n  app.post('/api/ai/retention-strategies', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || user.role !== 'staff') {\n        return res.status(403).json({ message: \"Staff access required\" });\n      }\n\n      const { memberProfile } = req.body;\n      if (!memberProfile) {\n        return res.status(400).json({ message: \"Member profile is required\" });\n      }\n\n      const strategies = await generateRetentionStrategies(memberProfile);\n      res.json({ strategies });\n    } catch (error) {\n      console.error(\"Error generating retention strategies:\", error);\n      res.status(500).json({ message: \"Failed to generate retention strategies\" });\n    }\n  });\n\n  app.post('/api/ai/generate-loyalty-offers', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || user.role !== 'staff') {\n        return res.status(403).json({ message: \"Staff access required\" });\n      }\n\n      const { targetCriteria } = req.body;\n      if (!targetCriteria) {\n        return res.status(400).json({ message: \"Target criteria is required\" });\n      }\n\n      const offers = await generateLoyaltyOffers(targetCriteria);\n      res.json(offers);\n    } catch (error) {\n      console.error(\"Error generating loyalty offers:\", error);\n      res.status(500).json({ message: \"Failed to generate loyalty offers\" });\n    }\n  });\n\n  app.post('/api/ai/workout-plan', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n\n      if (!user || user.role !== 'member') {\n        return res.status(403).json({ message: \"Member access required\" });\n      }\n\n      const { goals, healthData } = req.body;\n      if (!goals) {\n        return res.status(400).json({ message: \"Goals are required\" });\n      }\n      if (!healthData) {\n        return res.status(400).json({ message: \"Health data is required\" });\n      }\n\n      const workoutPlan = await generateWorkoutPlan(goals, healthData);\n\n      // Save to database\n      const planData = insertWorkoutPlanSchema.parse({\n        userId,\n        title: workoutPlan.planTitle,\n        goals: `${goals} | Health Profile: Age ${healthData.age}, Fitness Level: ${healthData.fitnessLevel}, Experience: ${healthData.exerciseExperience}${healthData.medicalConditions ? ', Medical Notes: ' + healthData.medicalConditions : ''}`,\n        weeklySchedule: workoutPlan.weeklySchedule,\n      });\n\n      await storage.createWorkoutPlan(planData);\n\n      res.json(workoutPlan);\n    } catch (error) {\n      console.error(\"Error generating workout plan:\", error);\n      res.status(500).json({ message: \"Failed to generate workout plan\" });\n    }\n  });\n\n  // Churn email endpoints\n  app.get('/api/staff/churn-emails', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || user.role !== 'staff') {\n        return res.status(403).json({ message: \"Staff access required\" });\n      }\n\n      const emails = await storage.getPendingChurnEmails();\n      res.json(emails);\n    } catch (error) {\n      console.error(\"Error fetching churn emails:\", error);\n      res.status(500).json({ message: \"Failed to fetch churn emails\" });\n    }\n  });\n\n  app.post('/api/staff/churn-emails/:id/approve', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || user.role !== 'staff') {\n        return res.status(403).json({ message: \"Staff access required\" });\n      }\n\n      const email = await storage.approveChurnEmail(req.params.id, user.id);\n      res.json(email);\n    } catch (error) {\n      console.error(\"Error approving churn email:\", error);\n      res.status(500).json({ message: \"Failed to approve churn email\" });\n    }\n  });\n\n  app.post('/api/staff/churn-emails/:id/reject', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || user.role !== 'staff') {\n        return res.status(403).json({ message: \"Staff access required\" });\n      }\n\n      const email = await storage.rejectChurnEmail(req.params.id, user.id);\n      res.json(email);\n    } catch (error) {\n      console.error(\"Error rejecting churn email:\", error);\n      res.status(500).json({ message: \"Failed to reject churn email\" });\n    }\n  });\n\n  app.post('/api/staff/churn-emails/:id/send', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || user.role !== 'staff') {\n        return res.status(403).json({ message: \"Staff access required\" });\n      }\n\n      const email = await storage.markChurnEmailSent(req.params.id);\n      res.json(email);\n    } catch (error) {\n      console.error(\"Error marking churn email as sent:\", error);\n      res.status(500).json({ message: \"Failed to mark churn email as sent\" });\n    }\n  });\n\n  app.post('/api/staff/churn-emails/generate', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || user.role !== 'staff') {\n        return res.status(403).json({ message: \"Staff access required\" });\n      }\n\n      const { memberId } = req.body;\n      if (!memberId) {\n        return res.status(400).json({ message: \"Member ID is required\" });\n      }\n\n      const email = await storage.checkAndCreateChurnEmail(memberId);\n      res.json(email);\n    } catch (error) {\n      console.error(\"Error generating churn email:\", error);\n      res.status(500).json({ message: \"Failed to generate churn email\" });\n    }\n  });\n\n  // Chatbot endpoints\n  app.post('/api/chat/message', async (req, res) => {\n    try {\n      const { message, sessionId } = req.body;\n      if (!message || !sessionId) {\n        return res.status(400).json({ message: \"Message and session ID are required\" });\n      }\n\n      // Get existing conversation or create new one\n      let conversation = await storage.getChatConversation(sessionId);\n      if (!conversation) {\n        conversation = await storage.createChatConversation({\n          sessionId,\n          messages: [],\n        });\n      }\n\n      const response = await sendMessageToChat(message, conversation.messages as any[]);\n\n      // Update conversation with new messages\n      const updatedMessages = [\n        ...conversation.messages as any[],\n        { role: 'user', content: message },\n        { role: 'assistant', content: response.content }\n      ];\n\n      await storage.updateChatConversation(sessionId, {\n        messages: updatedMessages,\n        contactEmail: response.contactEmail || conversation.contactEmail,\n        contactName: response.contactName || conversation.contactName,\n        tourBooked: response.tourBooked || conversation.tourBooked,\n      });\n\n      res.json(response);\n    } catch (error) {\n      console.error(\"Error processing chat message:\", error);\n      res.status(500).json({ message: \"Failed to process chat message\" });\n    }\n  });\n\n  // Dashboard metrics endpoint\n  app.get('/api/staff/metrics', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || user.role !== 'staff') {\n        return res.status(403).json({ message: \"Staff access required\" });\n      }\n\n      const atRiskMembers = await storage.getAtRiskMembers();\n\n      // Mock metrics for demo (in production, these would be calculated from real data)\n      const metrics = {\n        totalMembers: 2847,\n        atRiskMembers: atRiskMembers.length,\n        churnRate: \"3.2%\",\n        outreachToday: 8,\n      };\n\n      res.json(metrics);\n    } catch (error) {\n      console.error(\"Error fetching metrics:\", error);\n      res.status(500).json({ message: \"Failed to fetch metrics\" });\n    }\n  });\n\n  // Sales email generation endpoint\n  app.post('/api/ai/sales-email', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || user.role !== 'staff') {\n        return res.status(403).json({ message: \"Staff access required\" });\n      }\n\n      const { prompt, systemInstruction, model } = req.body;\n\n      if (!prompt || !systemInstruction) {\n        return res.status(400).json({ message: \"Prompt and system instruction are required\" });\n      }\n\n      const emailContent = await generateSalesEmail(prompt, systemInstruction, model);\n      res.json(emailContent);\n    } catch (error) {\n      console.error(\"Error generating sales email:\", error);\n      res.status(500).json({ message: \"Failed to generate sales email\" });\n    }\n  });\n\n  // AI Chat endpoint for churn analysis\n  app.post('/api/ai/chat', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || user.role !== 'staff') {\n        return res.status(403).json({ message: \"Staff access required\" });\n      }\n\n      const { message, context } = req.body;\n      if (!message) {\n        return res.status(400).json({ message: \"Message is required\" });\n      }\n\n      // Create a contextual conversation for churn analysis\n      const conversationHistory = [\n        {\n          role: 'system',\n          content: `You are a Customer Churn Analysis AI assistant for a premium health and wellness club. \n          Your role is to help staff with customer retention insights, churn prevention strategies, and data analysis.\n          Be professional, analytical, and provide actionable recommendations.\n          \n          Context: ${context || 'general_churn_analysis'}`\n        }\n      ];\n\n      const result = await sendMessageToChat(message, conversationHistory);\n      res.json({ response: result.content });\n    } catch (error) {\n      console.error(\"Error processing AI chat:\", error);\n      res.status(500).json({ message: \"Failed to process AI chat\" });\n    }\n  });\n\n  // Lead capture endpoint - saves ChatBot conversations to CRM\n  app.post(\"/api/leads\", async (req, res) => {\n    try {\n      const { name, email, phone, fitnessGoal, frequency, location, language, sessionId } = req.body;\n\n      if (!name || !email) {\n        return res.status(400).json({ \n          success: false, \n          error: \"Name and email are required\" \n        });\n      }\n\n      // Save lead as a prospect in the users table\n      const leadData = {\n        email: email.toLowerCase(),\n        firstName: name.split(' ')[0] || name,\n        lastName: name.split(' ').slice(1).join(' ') || '',\n        role: 'prospect', // Mark as prospect rather than member\n        membershipType: 'potential', // Special type for leads\n        loyaltyPoints: 0,\n        joinDate: null, // Not a member yet\n        lastVisit: null,\n      };\n\n      const savedLead = await storage.upsertUser(leadData);\n\n      // Save the conversation data with lead details\n      const conversationData = {\n        sessionId,\n        messages: [{\n          role: 'system',\n          content: `Lead captured: ${name} (${email}) - Fitness Goal: ${fitnessGoal}, Frequency: ${frequency}, Location: ${location}, Language: ${language}`\n        }],\n        isComplete: true,\n        contactEmail: email,\n        contactName: name,\n        tourBooked: false\n      };\n\n      // Save or update the conversation\n      const existingConversation = await storage.getChatConversation(sessionId);\n      if (existingConversation) {\n        await storage.updateChatConversation(sessionId, conversationData);\n      } else {\n        await storage.createChatConversation(conversationData);\n      }\n\n      console.log(\"New lead saved to CRM:\", {\n        id: savedLead.id,\n        name,\n        email,\n        phone,\n        fitnessGoal,\n        frequency,\n        location,\n        language,\n        sessionId,\n        timestamp: new Date().toISOString()\n      });\n\n      res.json({ \n        success: true, \n        message: \"Lead saved to CRM successfully\",\n        leadId: savedLead.id\n      });\n    } catch (error) {\n      console.error(\"Error saving lead to CRM:\", error);\n      res.status(500).json({ success: false, error: \"Failed to save lead to CRM\" });\n    }\n  });\n\n  app.post('/api/send-email', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || user.role !== 'staff') {\n        return res.status(403).json({ message: \"Staff access required\" });\n      }\n\n      const { to, subject, content, prospectName } = req.body;\n\n      if (!to || !subject || !content || !prospectName) {\n        return res.status(400).json({\n          message: \"Email address, subject, content, and prospect name are required\"\n        });\n      }\n\n      // Validate email format\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(to)) {\n        return res.status(400).json({ message: \"Invalid email address format\" });\n      }\n\n      const result = await EmailService.sendSalesEmail({\n        to,\n        subject,\n        content,\n        prospectName\n      });\n\n      if (result.success) {\n        res.json({\n          success: true,\n          messageId: result.messageId,\n          message: \"Email sent successfully\"\n        });\n      } else {\n        res.status(500).json({\n          success: false,\n          error: result.error,\n          message: \"Failed to send email\"\n        });\n      }\n    } catch (error) {\n      console.error(\"Error sending email:\", error);\n      res.status(500).json({ message: \"Failed to send email\" });\n    }\n  });\n\n  // Email service status endpoint\n  app.get('/api/email/status', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || user.role !== 'staff') {\n        return res.status(403).json({ message: \"Staff access required\" });\n      }\n\n      const status = EmailService.getEmailServiceStatus();\n      res.json(status);\n    } catch (error) {\n      console.error(\"Error fetching email service status:\", error);\n      res.status(500).json({ message: \"Failed to fetch email service status\" });\n    }\n  });\n\n  // Email tracking endpoints\n  app.get('/api/track/:trackingId', async (req, res) => {\n    try {\n      const { trackingId } = req.params;\n\n      // Log the link click\n      await EmailTrackingService.logLinkClicked(trackingId, {\n        userAgent: req.headers['user-agent'],\n        ip: req.ip,\n        timestamp: new Date().toISOString(),\n      });\n\n      // Redirect to virtual tour page with tracking parameter\n      res.redirect(`/virtual-tour?track=${trackingId}`);\n    } catch (error) {\n      console.error(\"Error tracking email click:\", error);\n      // Still redirect to home page even if tracking fails\n      res.redirect('/');\n    }\n  });\n\n  // Virtual tour endpoint\n  app.get('/api/virtual-tour/:trackingId', async (req, res) => {\n    try {\n      const { trackingId } = req.params;\n\n      // Log the tour view\n      await EmailTrackingService.logTourViewed(trackingId, {\n        userAgent: req.headers['user-agent'],\n        ip: req.ip,\n        timestamp: new Date().toISOString(),\n      });\n\n      // Get prospect information\n      const interaction = await EmailTrackingService.getEmailInteractionByTrackingId(trackingId);\n\n      if (interaction) {\n        res.json({\n          success: true,\n          prospectName: interaction.prospectName,\n          prospectEmail: interaction.prospectEmail,\n          trackingId,\n          message: 'Virtual tour tracking recorded'\n        });\n      } else {\n        res.status(404).json({\n          success: false,\n          message: 'Tracking ID not found'\n        });\n      }\n    } catch (error) {\n      console.error(\"Error tracking virtual tour:\", error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to track virtual tour'\n      });\n    }\n  });\n\n  // Get prospect engagement data\n  app.get('/api/prospect/:email/engagement', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (!user || user.role !== 'staff') {\n        return res.status(403).json({ message: \"Staff access required\" });\n      }\n\n      const { email } = req.params;\n      const summary = await EmailTrackingService.getProspectEngagementSummary(email);\n      const interactions = await EmailTrackingService.getEmailInteractionsByProspect(email);\n\n      res.json({\n        summary,\n        interactions\n      });\n    } catch (error) {\n      console.error(\"Error fetching prospect engagement:\", error);\n      res.status(500).json({ message: \"Failed to fetch engagement data\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":24085},"server/storage.ts":{"content":"import {\n  users,\n  loyaltyOffers,\n  offerRedemptions,\n  outreachActions,\n  chatConversations,\n  workoutPlans,\n  churnEmails,\n  emailInteractions,\n  leads,\n  type User,\n  type UpsertUser,\n  type LoyaltyOffer,\n  type InsertLoyaltyOffer,\n  type OfferRedemption,\n  type InsertOfferRedemption,\n  type OutreachAction,\n  type InsertOutreachAction,\n  type ChatConversation,\n  type InsertChatConversation,\n  type WorkoutPlan,\n  type InsertWorkoutPlan,\n  type ChurnEmail,\n  type InsertChurnEmail,\n  type EmailInteraction,\n  type InsertEmailInteraction,\n  type Lead,\n  type InsertLead,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  getAllUsers(): Promise<User[]>;\n  getAllMembers(): Promise<User[]>;\n  getAllStaff(): Promise<User[]>;\n  \n  // Loyalty operations\n  getLoyaltyOffers(): Promise<LoyaltyOffer[]>;\n  createLoyaltyOffer(offer: InsertLoyaltyOffer): Promise<LoyaltyOffer>;\n  deactivateLoyaltyOffer(id: string): Promise<void>;\n  getUserRedemptions(userId: string): Promise<OfferRedemption[]>;\n  redeemOffer(redemption: InsertOfferRedemption): Promise<OfferRedemption>;\n  \n  // Member management\n  getAtRiskMembers(): Promise<User[]>;\n  updateUserLastVisit(userId: string): Promise<void>;\n  updateUserLoyaltyPoints(userId: string, points: number): Promise<void>;\n  \n  // Outreach operations\n  createOutreachAction(action: InsertOutreachAction): Promise<OutreachAction>;\n  getMemberOutreachHistory(memberId: string): Promise<OutreachAction[]>;\n  \n  // Chat operations\n  getChatConversation(sessionId: string): Promise<ChatConversation | undefined>;\n  createChatConversation(conversation: InsertChatConversation): Promise<ChatConversation>;\n  updateChatConversation(sessionId: string, updates: Partial<ChatConversation>): Promise<void>;\n  \n  // Workout plans\n  createWorkoutPlan(plan: InsertWorkoutPlan): Promise<WorkoutPlan>;\n  getUserWorkoutPlans(userId: string): Promise<WorkoutPlan[]>;\n  \n  // Churn email operations\n  createChurnEmail(email: InsertChurnEmail): Promise<ChurnEmail>;\n  getPendingChurnEmails(): Promise<ChurnEmail[]>;\n  getChurnEmailsByMember(memberId: string): Promise<ChurnEmail[]>;\n  approveChurnEmail(emailId: string, staffId: string): Promise<ChurnEmail>;\n  rejectChurnEmail(emailId: string, staffId: string): Promise<ChurnEmail>;\n  markChurnEmailSent(emailId: string): Promise<ChurnEmail>;\n  getRiskLevel(member: User): { level: 'low' | 'medium' | 'high', band: string, percentage: number };\n  checkAndCreateChurnEmail(memberId: string): Promise<ChurnEmail | null>;\n\n  // Email interaction tracking operations\n  createEmailInteraction(interaction: InsertEmailInteraction): Promise<EmailInteraction>;\n  getEmailInteractionsByProspect(email: string): Promise<EmailInteraction[]>;\n  getEmailInteractionByTrackingId(trackingId: string): Promise<EmailInteraction | undefined>;\n  updateEmailInteraction(id: string, updates: Partial<EmailInteraction>): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(users.createdAt);\n  }\n\n  async getAllMembers(): Promise<User[]> {\n    return await db\n      .select()\n      .from(users)\n      .where(eq(users.role, \"member\"))\n      .orderBy(users.createdAt);\n  }\n\n  async getAllStaff(): Promise<User[]> {\n    return await db\n      .select()\n      .from(users)\n      .where(eq(users.role, \"staff\"))\n      .orderBy(users.createdAt);\n  }\n\n  // Loyalty operations\n  async getLoyaltyOffers(): Promise<LoyaltyOffer[]> {\n    return await db\n      .select()\n      .from(loyaltyOffers)\n      .where(eq(loyaltyOffers.isActive, true))\n      .orderBy(loyaltyOffers.points);\n  }\n\n  async createLoyaltyOffer(offer: InsertLoyaltyOffer): Promise<LoyaltyOffer> {\n    const [newOffer] = await db\n      .insert(loyaltyOffers)\n      .values(offer)\n      .returning();\n    return newOffer;\n  }\n\n  async deactivateLoyaltyOffer(id: string): Promise<void> {\n    await db\n      .update(loyaltyOffers)\n      .set({ isActive: false })\n      .where(eq(loyaltyOffers.id, id));\n  }\n\n  async getUserRedemptions(userId: string): Promise<OfferRedemption[]> {\n    return await db\n      .select()\n      .from(offerRedemptions)\n      .where(eq(offerRedemptions.userId, userId))\n      .orderBy(desc(offerRedemptions.redeemedAt));\n  }\n\n  async redeemOffer(redemption: InsertOfferRedemption): Promise<OfferRedemption> {\n    const [newRedemption] = await db\n      .insert(offerRedemptions)\n      .values(redemption)\n      .returning();\n    \n    // Deduct points from user\n    await db\n      .update(users)\n      .set({ \n        loyaltyPoints: sql`${users.loyaltyPoints} - ${redemption.pointsSpent}` \n      })\n      .where(eq(users.id, redemption.userId));\n    \n    return newRedemption;\n  }\n\n  // Member management\n  async getAtRiskMembers(): Promise<User[]> {\n    // Simulate churn risk calculation - members who haven't visited in 5+ days\n    const fiveDaysAgo = new Date();\n    fiveDaysAgo.setDate(fiveDaysAgo.getDate() - 5);\n    \n    return await db\n      .select()\n      .from(users)\n      .where(\n        and(\n          eq(users.role, \"member\"),\n          sql`${users.lastVisit} < ${fiveDaysAgo} OR ${users.lastVisit} IS NULL`\n        )\n      )\n      .orderBy(desc(users.lastVisit));\n  }\n\n  async updateUserLastVisit(userId: string): Promise<void> {\n    await db\n      .update(users)\n      .set({ lastVisit: new Date() })\n      .where(eq(users.id, userId));\n  }\n\n  async updateUserLoyaltyPoints(userId: string, points: number): Promise<void> {\n    await db\n      .update(users)\n      .set({ loyaltyPoints: points })\n      .where(eq(users.id, userId));\n  }\n\n  // Outreach operations\n  async createOutreachAction(action: InsertOutreachAction): Promise<OutreachAction> {\n    const [newAction] = await db\n      .insert(outreachActions)\n      .values(action)\n      .returning();\n    return newAction;\n  }\n\n  async getMemberOutreachHistory(memberId: string): Promise<OutreachAction[]> {\n    const result = await db\n      .select({\n        id: outreachActions.id,\n        memberId: outreachActions.memberId,\n        staffId: outreachActions.staffId,\n        actionType: outreachActions.actionType,\n        notes: outreachActions.notes,\n        createdAt: outreachActions.createdAt,\n        staffName: sql<string>`${users.firstName} || ' ' || ${users.lastName}`,\n      })\n      .from(outreachActions)\n      .leftJoin(users, eq(outreachActions.staffId, users.id))\n      .where(eq(outreachActions.memberId, memberId))\n      .orderBy(desc(outreachActions.createdAt));\n    return result as OutreachAction[];\n  }\n\n  // Chat operations\n  async getChatConversation(sessionId: string): Promise<ChatConversation | undefined> {\n    const [conversation] = await db\n      .select()\n      .from(chatConversations)\n      .where(eq(chatConversations.sessionId, sessionId));\n    return conversation;\n  }\n\n  async createChatConversation(conversation: InsertChatConversation): Promise<ChatConversation> {\n    const [newConversation] = await db\n      .insert(chatConversations)\n      .values(conversation)\n      .returning();\n    return newConversation;\n  }\n\n  async updateChatConversation(sessionId: string, updates: Partial<ChatConversation>): Promise<void> {\n    await db\n      .update(chatConversations)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(chatConversations.sessionId, sessionId));\n  }\n\n  // Workout plans\n  async createWorkoutPlan(plan: InsertWorkoutPlan): Promise<WorkoutPlan> {\n    const [newPlan] = await db\n      .insert(workoutPlans)\n      .values(plan)\n      .returning();\n    return newPlan;\n  }\n\n  async getUserWorkoutPlans(userId: string): Promise<WorkoutPlan[]> {\n    return await db\n      .select()\n      .from(workoutPlans)\n      .where(eq(workoutPlans.userId, userId))\n      .orderBy(desc(workoutPlans.createdAt));\n  }\n\n  // Churn email operations\n  async createChurnEmail(email: InsertChurnEmail): Promise<ChurnEmail> {\n    const [newEmail] = await db\n      .insert(churnEmails)\n      .values(email)\n      .returning();\n    return newEmail;\n  }\n\n  async getPendingChurnEmails(): Promise<ChurnEmail[]> {\n    const result = await db\n      .select({\n        id: churnEmails.id,\n        memberId: churnEmails.memberId,\n        staffId: churnEmails.staffId,\n        subject: churnEmails.subject,\n        content: churnEmails.content,\n        riskLevel: churnEmails.riskLevel,\n        currentRiskBand: churnEmails.currentRiskBand,\n        previousRiskBand: churnEmails.previousRiskBand,\n        memberProfile: churnEmails.memberProfile,\n        status: churnEmails.status,\n        approvedBy: churnEmails.approvedBy,\n        approvedAt: churnEmails.approvedAt,\n        sentAt: churnEmails.sentAt,\n        createdAt: churnEmails.createdAt,\n        updatedAt: churnEmails.updatedAt,\n        memberName: sql<string>`${users.firstName} || ' ' || ${users.lastName}`,\n        memberEmail: users.email,\n        memberMembershipType: users.membershipType,\n      })\n      .from(churnEmails)\n      .leftJoin(users, eq(churnEmails.memberId, users.id))\n      .where(eq(churnEmails.status, \"pending\"))\n      .orderBy(desc(churnEmails.createdAt));\n    return result as ChurnEmail[];\n  }\n\n  async getChurnEmailsByMember(memberId: string): Promise<ChurnEmail[]> {\n    return await db\n      .select()\n      .from(churnEmails)\n      .where(eq(churnEmails.memberId, memberId))\n      .orderBy(desc(churnEmails.createdAt));\n  }\n\n  async approveChurnEmail(emailId: string, staffId: string): Promise<ChurnEmail> {\n    const [updatedEmail] = await db\n      .update(churnEmails)\n      .set({\n        status: \"approved\",\n        approvedBy: staffId,\n        approvedAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .where(eq(churnEmails.id, emailId))\n      .returning();\n    return updatedEmail;\n  }\n\n  async rejectChurnEmail(emailId: string, staffId: string): Promise<ChurnEmail> {\n    const [updatedEmail] = await db\n      .update(churnEmails)\n      .set({\n        status: \"rejected\",\n        approvedBy: staffId,\n        approvedAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .where(eq(churnEmails.id, emailId))\n      .returning();\n    return updatedEmail;\n  }\n\n  async markChurnEmailSent(emailId: string): Promise<ChurnEmail> {\n    const [updatedEmail] = await db\n      .update(churnEmails)\n      .set({\n        status: \"sent\",\n        sentAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .where(eq(churnEmails.id, emailId))\n      .returning();\n    return updatedEmail;\n  }\n\n  // Helper function to determine risk level and band\n  getRiskLevel(member: User): { level: 'low' | 'medium' | 'high', band: string, percentage: number } {\n    if (!member.lastVisit) return { level: \"high\", band: \"never-visited\", percentage: 95 };\n    \n    const daysSinceLastVisit = Math.floor(\n      (Date.now() - new Date(member.lastVisit).getTime()) / (1000 * 60 * 60 * 24)\n    );\n    \n    if (daysSinceLastVisit > 10) return { level: \"high\", band: \"high-risk\", percentage: 89 };\n    if (daysSinceLastVisit > 7) return { level: \"medium\", band: \"medium-risk\", percentage: 76 };\n    if (daysSinceLastVisit > 5) return { level: \"low\", band: \"low-risk\", percentage: 65 };\n    return { level: \"low\", band: \"active\", percentage: 25 };\n  }\n\n  // Check if member needs a churn prevention email\n  async checkAndCreateChurnEmail(memberId: string): Promise<ChurnEmail | null> {\n    const member = await this.getUser(memberId);\n    if (!member || member.role !== \"member\") return null;\n\n    const currentRisk = this.getRiskLevel(member);\n    \n    // Check if there's already a recent email for this risk level\n    const recentEmails = await db\n      .select()\n      .from(churnEmails)\n      .where(\n        and(\n          eq(churnEmails.memberId, memberId),\n          eq(churnEmails.currentRiskBand, currentRisk.band),\n          sql`${churnEmails.createdAt} > NOW() - INTERVAL '7 days'`\n        )\n      );\n\n    if (recentEmails.length > 0) return null; // Already sent recently\n\n    // Only create email if member is in a risk band (not active)\n    if (currentRisk.band === \"active\") return null;\n\n    // Generate email using AI service\n    const { generateChurnPreventionEmail } = await import(\"./services/geminiService\");\n    \n    try {\n      const emailContent = await generateChurnPreventionEmail(\n        member,\n        currentRisk.level,\n        currentRisk.band\n      );\n\n      const emailData: InsertChurnEmail = {\n        memberId: member.id,\n        subject: emailContent.subject,\n        content: emailContent.content,\n        riskLevel: currentRisk.level,\n        currentRiskBand: currentRisk.band,\n        memberProfile: {\n          firstName: member.firstName,\n          lastName: member.lastName,\n          email: member.email,\n          membershipType: member.membershipType,\n          joinDate: member.joinDate,\n          lastVisit: member.lastVisit,\n          loyaltyPoints: member.loyaltyPoints,\n        },\n        status: \"pending\",\n      };\n\n      return await this.createChurnEmail(emailData);\n    } catch (error) {\n      console.error(\"Error creating churn email:\", error);\n      return null;\n    }\n  }\n\n  // Email interaction tracking operations\n  async createEmailInteraction(interaction: InsertEmailInteraction): Promise<EmailInteraction> {\n    const [emailInteraction] = await db\n      .insert(emailInteractions)\n      .values(interaction)\n      .returning();\n    return emailInteraction;\n  }\n\n  async getEmailInteractionsByProspect(email: string): Promise<EmailInteraction[]> {\n    return await db\n      .select()\n      .from(emailInteractions)\n      .where(eq(emailInteractions.prospectEmail, email))\n      .orderBy(desc(emailInteractions.createdAt));\n  }\n\n  async getEmailInteractionByTrackingId(trackingId: string): Promise<EmailInteraction | undefined> {\n    const [interaction] = await db\n      .select()\n      .from(emailInteractions)\n      .where(eq(emailInteractions.trackingId, trackingId));\n    return interaction;\n  }\n\n  async updateEmailInteraction(id: string, updates: Partial<EmailInteraction>): Promise<void> {\n    await db\n      .update(emailInteractions)\n      .set({\n        ...updates,\n        updatedAt: new Date(),\n      })\n      .where(eq(emailInteractions.id, id));\n  }\n}\n\n// Seed data function\nexport async function seedLoyaltyOffers() {\n  const storage = new DatabaseStorage();\n  \n  // Check if we already have offers\n  const existingOffers = await storage.getLoyaltyOffers();\n  if (existingOffers.length > 0) return;\n  \n  // Create attractive loyalty offers\n  const offers = [\n    {\n      title: \"Premium Protein Shake\",\n      description: \"High-quality whey protein shake in your choice of flavor - perfect post-workout recovery\",\n      points: 200,\n      category: \"Nutrition\"\n    },\n    {\n      title: \"Personal Training Session\",\n      description: \"One-on-one 60-minute session with our certified personal trainers\",\n      points: 800,\n      category: \"Training\"\n    },\n    {\n      title: \"Wellness Massage (30 min)\",\n      description: \"Relaxing therapeutic massage to help with muscle recovery and stress relief\",\n      points: 650,\n      category: \"Wellness\"\n    },\n    {\n      title: \"Branded Gym Towel\",\n      description: \"High-quality ClubPulse branded microfiber towel - perfect for your workouts\",\n      points: 150,\n      category: \"Merchandise\"\n    },\n    {\n      title: \"Group Fitness Class (5-Pack)\",\n      description: \"Five additional group fitness classes - yoga, pilates, spin, or HIIT\",\n      points: 400,\n      category: \"Classes\"\n    },\n    {\n      title: \"Smoothie Bar Credit\",\n      description: \"£12 credit toward fresh smoothies and healthy snacks at our juice bar\",\n      points: 300,\n      category: \"Nutrition\"\n    },\n    {\n      title: \"Exclusive Workshop Access\",\n      description: \"Access to members-only wellness workshops on nutrition, mindfulness, and fitness\",\n      points: 500,\n      category: \"Education\"\n    },\n    {\n      title: \"Premium Water Bottle\",\n      description: \"Insulated stainless steel water bottle with ClubPulse logo - keeps drinks cold for 24 hours\",\n      points: 250,\n      category: \"Merchandise\"\n    }\n  ];\n  \n  // Create all offers\n  for (const offer of offers) {\n    await storage.createLoyaltyOffer(offer);\n  }\n  \n  console.log(`✓ Seeded ${offers.length} loyalty offers`);\n}\n\n// Seed diverse user personas\nexport async function seedDummyUsers() {\n  const storage = new DatabaseStorage();\n  \n  // Check if we already have dummy users\n  const existingUsers = await storage.getAllUsers();\n  if (existingUsers.length > 2) return; // Skip if we already have users beyond system ones\n  \n  // Create diverse member personas with varied risk levels\n  const memberPersonas = [\n    // High-risk members (haven't visited in 10+ days)\n    {\n      id: 'member-sarah-wilson',\n      email: 'sarah.wilson@email.com',\n      firstName: 'Sarah',\n      lastName: 'Wilson',\n      role: 'member' as const,\n      membershipType: 'Premium',\n      loyaltyPoints: 320,\n      joinDate: new Date('2023-02-15'),\n      lastVisit: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000), // 15 days ago\n    },\n    {\n      id: 'member-david-chen',\n      email: 'david.chen@email.com',\n      firstName: 'David',\n      lastName: 'Chen',\n      role: 'member' as const,\n      membershipType: 'Basic',\n      loyaltyPoints: 85,\n      joinDate: new Date('2024-01-10'),\n      lastVisit: new Date(Date.now() - 12 * 24 * 60 * 60 * 1000), // 12 days ago\n    },\n    {\n      id: 'member-emily-taylor',\n      email: 'emily.taylor@email.com',\n      firstName: 'Emily',\n      lastName: 'Taylor',\n      role: 'member' as const,\n      membershipType: 'Student',\n      loyaltyPoints: 45,\n      joinDate: new Date('2024-09-01'),\n      lastVisit: new Date(Date.now() - 18 * 24 * 60 * 60 * 1000), // 18 days ago\n    },\n    {\n      id: 'member-never-visited',\n      email: 'alex.parker@email.com',\n      firstName: 'Alex',\n      lastName: 'Parker',\n      role: 'member' as const,\n      membershipType: 'Premium',\n      loyaltyPoints: 0,\n      joinDate: new Date('2024-11-20'),\n      lastVisit: null, // Never visited\n    },\n    \n    // Medium-risk members (7-10 days)\n    {\n      id: 'member-james-brown',\n      email: 'james.brown@email.com',\n      firstName: 'James',\n      lastName: 'Brown',\n      role: 'member' as const,\n      membershipType: 'Premium',\n      loyaltyPoints: 540,\n      joinDate: new Date('2022-08-20'),\n      lastVisit: new Date(Date.now() - 8 * 24 * 60 * 60 * 1000), // 8 days ago\n    },\n    {\n      id: 'member-lisa-garcia',\n      email: 'lisa.garcia@email.com',\n      firstName: 'Lisa',\n      lastName: 'Garcia',\n      role: 'member' as const,\n      membershipType: 'Basic',\n      loyaltyPoints: 275,\n      joinDate: new Date('2023-05-12'),\n      lastVisit: new Date(Date.now() - 9 * 24 * 60 * 60 * 1000), // 9 days ago\n    },\n    \n    // Low-risk members (5-7 days)\n    {\n      id: 'member-michael-johnson',\n      email: 'michael.johnson@email.com',\n      firstName: 'Michael',\n      lastName: 'Johnson',\n      role: 'member' as const,\n      membershipType: 'Student',\n      loyaltyPoints: 180,\n      joinDate: new Date('2024-03-15'),\n      lastVisit: new Date(Date.now() - 6 * 24 * 60 * 60 * 1000), // 6 days ago\n    },\n    {\n      id: 'member-anna-williams',\n      email: 'anna.williams@email.com',\n      firstName: 'Anna',\n      lastName: 'Williams',\n      role: 'member' as const,\n      membershipType: 'Premium',\n      loyaltyPoints: 720,\n      joinDate: new Date('2021-11-30'),\n      lastVisit: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000), // 14 days ago (high risk)\n    },\n    \n    // Active members (recent visits - for comparison)\n    {\n      id: 'member-tom-davis',\n      email: 'tom.davis@email.com',\n      firstName: 'Tom',\n      lastName: 'Davis',\n      role: 'member' as const,\n      membershipType: 'Basic',\n      loyaltyPoints: 150,\n      joinDate: new Date('2024-06-10'),\n      lastVisit: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 days ago\n    },\n    {\n      id: 'member-sophie-miller',\n      email: 'sophie.miller@email.com',\n      firstName: 'Sophie',\n      lastName: 'Miller',\n      role: 'member' as const,\n      membershipType: 'Premium',\n      loyaltyPoints: 420,\n      joinDate: new Date('2023-03-15'),\n      lastVisit: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000), // 1 day ago (active)\n    },\n    {\n      id: 'member-rachel-green',\n      email: 'rachel.green@email.com', \n      firstName: 'Rachel',\n      lastName: 'Green',\n      role: 'member' as const,\n      membershipType: 'Basic',\n      loyaltyPoints: 95,\n      joinDate: new Date('2024-08-20'),\n      lastVisit: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000), // 4 days ago (active)\n    },\n    {\n      id: 'member-alex-johnson',\n      email: 'alex.johnson@email.com',\n      firstName: 'Alex',\n      lastName: 'Johnson',\n      role: 'member' as const,\n      membershipType: 'basic' as const,\n      loyaltyPoints: 1350,\n      joinDate: new Date('2023-09-05'),\n      lastVisit: new Date(Date.now() - 8 * 24 * 60 * 60 * 1000), // 8 days ago (at risk)\n    },\n    {\n      id: 'member-maria-gonzalez',\n      email: 'maria.gonzalez@email.com',\n      firstName: 'Maria',\n      lastName: 'Gonzalez',\n      role: 'member' as const,\n      membershipType: 'premium' as const,\n      loyaltyPoints: 2900,\n      joinDate: new Date('2023-05-18'),\n      lastVisit: new Date(Date.now() - 6 * 60 * 60 * 1000), // 6 hours ago (very active)\n    },\n    {\n      id: 'member-ryan-patel',\n      email: 'ryan.patel@email.com',\n      firstName: 'Ryan',\n      lastName: 'Patel',\n      role: 'member' as const,\n      membershipType: 'student' as const,\n      loyaltyPoints: 950,\n      joinDate: new Date('2024-02-14'),\n      lastVisit: new Date(Date.now() - 4 * 24 * 60 * 60 * 1000), // 4 days ago\n    },\n    {\n      id: 'member-lisa-wong',\n      email: 'lisa.wong@email.com',\n      firstName: 'Lisa',\n      lastName: 'Wong',\n      role: 'member' as const,\n      membershipType: 'basic' as const,\n      loyaltyPoints: 1600,\n      joinDate: new Date('2023-12-03'),\n      lastVisit: new Date(Date.now() - 18 * 60 * 60 * 1000), // 18 hours ago\n    },\n    {\n      id: 'member-carlos-rivera',\n      email: 'carlos.rivera@email.com',\n      firstName: 'Carlos',\n      lastName: 'Rivera',\n      role: 'member' as const,\n      membershipType: 'premium' as const,\n      loyaltyPoints: 3750,\n      joinDate: new Date('2022-04-25'),\n      lastVisit: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000), // 10 days ago (at risk)\n    }\n  ];\n  \n  // Create diverse staff personas\n  const staffPersonas = [\n    {\n      id: 'staff-amanda-smith',\n      email: 'amanda.smith@clubpulse.co.uk',\n      firstName: 'Amanda',\n      lastName: 'Smith',\n      role: 'staff' as const,\n      membershipType: null,\n      loyaltyPoints: 0,\n      joinDate: new Date('2021-06-15'),\n      lastVisit: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago\n    },\n    {\n      id: 'staff-james-martinez',\n      email: 'james.martinez@clubpulse.co.uk',\n      firstName: 'James',\n      lastName: 'Martinez', \n      role: 'staff' as const,\n      membershipType: null,\n      loyaltyPoints: 0,\n      joinDate: new Date('2022-01-20'),\n      lastVisit: new Date(Date.now() - 4 * 60 * 60 * 1000), // 4 hours ago\n    },\n    {\n      id: 'staff-priya-singh',\n      email: 'priya.singh@clubpulse.co.uk',\n      firstName: 'Priya',\n      lastName: 'Singh',\n      role: 'staff' as const,\n      membershipType: null,\n      loyaltyPoints: 0,\n      joinDate: new Date('2020-09-10'),\n      lastVisit: new Date(Date.now() - 1 * 60 * 60 * 1000), // 1 hour ago\n    },\n    {\n      id: 'staff-robert-jones',\n      email: 'robert.jones@clubpulse.co.uk',\n      firstName: 'Robert',\n      lastName: 'Jones',\n      role: 'staff' as const,\n      membershipType: null,\n      loyaltyPoints: 0,\n      joinDate: new Date('2023-03-08'),\n      lastVisit: new Date(Date.now() - 30 * 60 * 1000), // 30 minutes ago\n    }\n  ];\n  \n  // Insert all personas\n  const allPersonas = [...memberPersonas, ...staffPersonas];\n  \n  for (const persona of allPersonas) {\n    try {\n      await storage.upsertUser(persona);\n      console.log(`✓ Created persona: ${persona.firstName} ${persona.lastName} (${persona.role})`);\n    } catch (error) {\n      console.error(`Failed to create persona ${persona.firstName} ${persona.lastName}:`, error);\n    }\n  }\n  \n  console.log(`✓ Seeded ${memberPersonas.length} member personas and ${staffPersonas.length} staff personas`);\n}\n\n// Seed sample churn emails for demonstration\nexport async function seedSampleChurnEmails() {\n  const storage = new DatabaseStorage();\n  \n  // Check if we already have churn emails\n  try {\n    const existingEmails = await storage.getPendingChurnEmails();\n    if (existingEmails.length > 0) return;\n  } catch (error) {\n    // Table might not exist yet, continue\n  }\n\n  // Ensure all users exist first\n  const existingUsers = await storage.getAllUsers();\n  const memberIds = existingUsers.map(user => user.id);\n  console.log('Available member IDs for churn emails:', memberIds);\n  \n  // Sample churn emails for different risk levels\n  const sampleEmails = [\n    {\n      memberId: 'member-sarah-wilson',\n      subject: 'We miss you at ClubPulse, Sarah! Let\\'s get back on track 💪',\n      content: `Dear Sarah Wilson,\n\nWe've noticed you haven't visited ClubPulse in a while, and we want to make sure everything is alright. As a valued Premium member, you're important to us!\n\n**Your Current Membership Benefits:**\n• 24/7 access to all premium facilities\n• Unlimited group fitness classes\n• Access to our AI-powered workout recommendations\n• Complimentary towel service\n\n**Special Comeback Offer - Just for You:**\nTo help you get back into your routine, we're offering:\n• FREE personal training session (worth £65)\n• 50% off next month's supplements\n• Priority booking for popular classes\n\nYour wellness journey matters to us. Our team would love to understand any challenges you're facing and help create a plan that works better for your lifestyle.\n\n**Ready to return?** Simply reply to this email or call us at 020 3837 4721.\n\nStay strong,\nThe ClubPulse Team\n\nP.S. Don't forget - your membership includes unlimited access to our new meditation room and recovery zone!`,\n      riskLevel: 'high',\n      currentRiskBand: 'high-risk',\n      memberProfile: {\n        firstName: 'Sarah',\n        lastName: 'Wilson',\n        email: 'sarah.wilson@email.com',\n        membershipType: 'Premium',\n        joinDate: '2023-02-15',\n        lastVisit: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000).toISOString(),\n        loyaltyPoints: 320,\n      },\n      status: 'pending',\n    },\n    {\n      memberId: 'member-david-chen',\n      subject: 'Your ClubPulse journey continues, David! 🏃‍♂️',\n      content: `Hi David Chen,\n\nHope you're doing well! We've noticed it's been a little while since your last visit to ClubPulse, and we wanted to reach out.\n\n**What's New at ClubPulse:**\n• Fresh morning HIIT classes (perfect for busy schedules!)\n• New strength training equipment in the main zone\n• Updated nutrition workshops every Saturday morning\n• Enhanced AI workout recommendations based on your preferences\n\n**Your Basic Membership Perks:**\nAs a Basic member, you have access to all these new offerings during your membership hours (06:00-22:00).\n\n**This Month's Special:**\n• 20% off personal training packages\n• Free fitness assessment to update your goals\n• Complimentary smoothie with your next visit\n\nWe understand life gets busy sometimes! Our flexible approach is designed to work around your schedule.\n\n**Let's catch up:** Pop in this week and let our team know how we can better support your fitness goals.\n\nBest regards,\nYour ClubPulse Family\n\n*Remember: Every step forward counts, no matter how small!*`,\n      riskLevel: 'high',\n      currentRiskBand: 'high-risk',\n      memberProfile: {\n        firstName: 'David',\n        lastName: 'Chen',\n        email: 'david.chen@email.com',\n        membershipType: 'Basic',\n        joinDate: '2024-01-10',\n        lastVisit: new Date(Date.now() - 12 * 24 * 60 * 60 * 1000).toISOString(),\n        loyaltyPoints: 85,\n      },\n      status: 'pending',\n    },\n    {\n      memberId: 'member-james-brown',\n      subject: 'James, let\\'s keep your momentum going! 💫',\n      content: `Hi James Brown,\n\nWe've noticed a slight change in your visit pattern recently. As someone who's been crushing their fitness goals, we want to help you maintain that amazing momentum!\n\n**Your Recent Progress:**\n• Premium member since August 2022\n• 540 loyalty points earned\n• Previously averaging regular visits\n\n**To keep you motivated:**\n• NEW: Try our just-launched strength & conditioning masterclasses\n• Book a complimentary fitness assessment to update your goals\n• 15% off personal training packages this month\n\nSometimes life gets busy - that's completely normal! Our flexible class schedule and 24/7 access are designed to work around your lifestyle.\n\n**Let's catch up:** Pop in this week for a quick chat with our wellness team. We're here to support your journey!\n\nBest regards,\nYour ClubPulse Family\n\n*Remember: Consistency beats perfection. Even 30 minutes counts!*`,\n      riskLevel: 'medium',\n      currentRiskBand: 'medium-risk',\n      memberProfile: {\n        firstName: 'James',\n        lastName: 'Brown',\n        email: 'james.brown@email.com',\n        membershipType: 'Premium',\n        joinDate: '2022-08-20',\n        lastVisit: new Date(Date.now() - 8 * 24 * 60 * 60 * 1000).toISOString(),\n        loyaltyPoints: 540,\n      },\n      status: 'pending',\n    },\n    {\n      memberId: 'member-anna-williams',\n      subject: 'New classes and features await you, Anna! ✨',\n      content: `Hello Anna Williams,\n\nHope you're doing well! We've added some exciting new features and classes that we think you'll love.\n\n**What's New at ClubPulse:**\n• Fresh morning yoga sessions (perfect for starting the day right)\n• Advanced strength training equipment in the new zone\n• Nutrition workshops every Saturday morning\n• Updated AI workout recommendations based on your preferences\n\n**Your Premium Membership Perks:**\nAs a Premium member, you have full access to all these new offerings at no extra cost!\n\n**This Week's Highlights:**\n• Monday: Power Yoga with Sarah (07:00)\n• Wednesday: Strength & Conditioning masterclass\n• Friday: Nutrition Q&A session\n\nWe'd love to see you soon and hear about your current fitness goals. Our team is always here to help you make the most of your membership.\n\nSee you soon!\nThe ClubPulse Team\n\n*Your next visit is going to be amazing - we've got everything ready for you!*`,\n      riskLevel: 'high',\n      currentRiskBand: 'high-risk',\n      memberProfile: {\n        firstName: 'Anna',\n        lastName: 'Williams',\n        email: 'anna.williams@email.com',\n        membershipType: 'Premium',\n        joinDate: '2021-11-30',\n        lastVisit: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000).toISOString(),\n        loyaltyPoints: 720,\n      },\n      status: 'pending',\n    },\n    {\n      memberId: 'member-never-visited',\n      subject: 'Welcome to ClubPulse, Alex! Your fitness journey starts here 🚀',\n      content: `Dear Alex Parker,\n\nWelcome to the ClubPulse family! We're absolutely thrilled to have you as our newest Premium member.\n\nWe noticed you haven't had a chance to visit us yet since joining, and we want to make sure you feel completely comfortable and excited about starting your fitness journey with us.\n\n**Your Premium Membership Includes:**\n• 24/7 access to all facilities\n• Unlimited group fitness classes\n• AI-powered personalised workout plans\n• 2 complimentary personal training sessions per month\n• Access to our recovery zone and meditation room\n\n**Let's Get You Started:**\n• FREE welcome session with one of our fitness consultants\n• Complimentary facility tour at your convenience\n• No-obligation chat about your fitness goals\n• Free ClubPulse starter pack (water bottle, towel, protein shake)\n\n**Ready to begin?** \nSimply call us at 020 3837 4721 or reply to this email. We can arrange a convenient time that works for you - evenings and weekends are absolutely fine!\n\nOur team is here to support you every step of the way. There's no pressure, just genuine care for your wellness journey.\n\nLooking forward to meeting you!\n\nThe ClubPulse Welcome Team\n\n*Your membership is active and ready - we can't wait to show you around!*`,\n      riskLevel: 'high',\n      currentRiskBand: 'never-visited',\n      memberProfile: {\n        firstName: 'Alex',\n        lastName: 'Parker',\n        email: 'alex.parker@email.com',\n        membershipType: 'Premium',\n        joinDate: '2024-11-20',\n        lastVisit: null,\n        loyaltyPoints: 0,\n      },\n      status: 'pending',\n    },\n    {\n      memberId: 'member-emily-taylor',\n      subject: 'Emily, we want to help you succeed! 💪',\n      content: `Dear Emily Taylor,\n\nWe hope your studies are going well! As a valued Student member, we wanted to reach out because we've noticed you haven't visited ClubPulse recently.\n\n**Student Membership Benefits:**\n• Access to all facilities during off-peak hours (09:00-16:00, 20:00-22:00)\n• Unlimited group fitness classes designed around student schedules\n• Study-friendly recovery zone perfect for post-workout relaxation\n• Budget-friendly membership with maximum value\n\n**Special Student Support:**\nWe know student life can be overwhelming with exams, assignments, and social commitments. That's exactly why we're here to help!\n\n• FREE stress-relief yoga sessions every Thursday evening\n• Quick 20-minute HIIT classes perfect for busy schedules\n• Study break workout challenges with your fellow students\n• Complimentary nutritional guidance for student budgets\n\n**This Week's Student Special:**\n• Free healthy smoothie with your next visit\n• Bonus loyalty points for any class attendance\n• Access to our quiet study area with Wi-Fi\n\n**Let's get you back on track!** Reply to this email or pop in between classes. Our team understands student life and we're here to make fitness work around YOUR schedule.\n\nBest of luck with your studies!\nThe ClubPulse Student Support Team\n\n*Remember: A healthy body supports a healthy mind - perfect for exam season!*`,\n      riskLevel: 'high',\n      currentRiskBand: 'high-risk',\n      memberProfile: {\n        firstName: 'Emily',\n        lastName: 'Taylor',\n        email: 'emily.taylor@email.com',\n        membershipType: 'Student',\n        joinDate: '2024-09-01',\n        lastVisit: new Date(Date.now() - 18 * 24 * 60 * 60 * 1000).toISOString(),\n        loyaltyPoints: 45,\n      },\n      status: 'pending',\n    },\n    {\n      memberId: 'member-lisa-garcia',\n      subject: 'Lisa, let\\'s reignite your fitness passion! 🔥',\n      content: `Hi Lisa Garcia,\n\nWe've noticed it's been a while since your last visit to ClubPulse, and we wanted to personally reach out to you.\n\n**Your Fitness Journey:**\n• Basic member since May 2023\n• 275 loyalty points earned through consistent effort\n• Previously a regular participant in our community\n\n**What's New Since Your Last Visit:**\n• Brand new functional training area with latest equipment\n• Morning energy boost classes (07:00-08:00) perfect before work\n• Updated group fitness schedule with more evening options\n• Enhanced changing facilities with better amenities\n\n**Your Basic Membership Includes:**\n• Access during all operating hours (06:00-22:00)\n• All group fitness classes at no extra charge\n• Complimentary fitness consultations\n• Full use of all gym equipment and facilities\n\n**This Month's Reconnection Offer:**\n• 25% off personal training sessions\n• Free fitness assessment to restart your goals\n• Complimentary ClubPulse water bottle\n• Priority booking for popular classes\n\n**Ready to return?** We'd love to welcome you back with a complimentary catch-up session. Simply call 020 3837 4721 or reply to this email.\n\nEvery step back is a step forward!\nYour ClubPulse Family\n\n*We believe in you, Lisa - your next workout is going to feel amazing!*`,\n      riskLevel: 'medium',\n      currentRiskBand: 'medium-risk',\n      memberProfile: {\n        firstName: 'Lisa',\n        lastName: 'Garcia',\n        email: 'lisa.garcia@email.com',\n        membershipType: 'Basic',\n        joinDate: '2023-05-12',\n        lastVisit: new Date(Date.now() - 9 * 24 * 60 * 60 * 1000).toISOString(),\n        loyaltyPoints: 275,\n      },\n      status: 'pending',\n    },\n  ];\n  \n  // Filter emails to only those for existing members\n  const validEmails = sampleEmails.filter(email => memberIds.includes(email.memberId));\n  console.log(`Creating ${validEmails.length} out of ${sampleEmails.length} sample emails for existing members`);\n\n  // Create sample emails\n  for (const emailData of validEmails) {\n    try {\n      await storage.createChurnEmail(emailData);\n    } catch (error) {\n      console.error(`Failed to create sample email for ${emailData.memberProfile.firstName}:`, error);\n    }\n  }\n  \n  console.log(`✓ Seeded ${validEmails.length} sample churn emails for staff approval`);\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":37808},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  uuid,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (mandatory for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (mandatory for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: varchar(\"role\").notNull().default(\"member\"), // 'member' or 'staff'\n  membershipType: varchar(\"membership_type\").default(\"basic\"), // 'basic', 'premium', 'student'\n  loyaltyPoints: integer(\"loyalty_points\").default(1250),\n  joinDate: timestamp(\"join_date\").defaultNow(),\n  lastVisit: timestamp(\"last_visit\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Loyalty offers table\nexport const loyaltyOffers = pgTable(\"loyalty_offers\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  points: integer(\"points\").notNull(),\n  category: varchar(\"category\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdBy: varchar(\"created_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Member offer redemptions table\nexport const offerRedemptions = pgTable(\"offer_redemptions\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  offerId: uuid(\"offer_id\").references(() => loyaltyOffers.id).notNull(),\n  pointsSpent: integer(\"points_spent\").notNull(),\n  redeemedAt: timestamp(\"redeemed_at\").defaultNow(),\n});\n\n// Staff outreach actions table\nexport const outreachActions = pgTable(\"outreach_actions\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  memberId: varchar(\"member_id\").references(() => users.id).notNull(),\n  staffId: varchar(\"staff_id\").references(() => users.id).notNull(),\n  actionType: varchar(\"action_type\").notNull(), // 'call', 'email', 'in-person', 'offer'\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Email interactions table for tracking email engagement\nexport const emailInteractions = pgTable(\"email_interactions\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  prospectEmail: varchar(\"prospect_email\").notNull(),\n  prospectName: varchar(\"prospect_name\").notNull(),\n  interactionType: varchar(\"interaction_type\").notNull(), // 'email_sent', 'link_clicked', 'tour_viewed'\n  emailSubject: varchar(\"email_subject\"),\n  trackingId: uuid(\"tracking_id\").unique().notNull().defaultRandom(),\n  metadata: jsonb(\"metadata\").default({}),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Chat conversations table\nexport const chatConversations = pgTable(\"chat_conversations\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  sessionId: varchar(\"session_id\").notNull(),\n  messages: jsonb(\"messages\").notNull(), // Array of {role: 'user'|'assistant', content: string}\n  isComplete: boolean(\"is_complete\").default(false),\n  tourBooked: boolean(\"tour_booked\").default(false),\n  contactEmail: varchar(\"contact_email\"),\n  contactName: varchar(\"contact_name\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Workout plans table\nexport const workoutPlans = pgTable(\"workout_plans\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  title: varchar(\"title\").notNull(),\n  goals: text(\"goals\").notNull(),\n  weeklySchedule: jsonb(\"weekly_schedule\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Churn prevention emails table\nexport const churnEmails = pgTable(\"churn_emails\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  memberId: varchar(\"member_id\").references(() => users.id).notNull(),\n  staffId: varchar(\"staff_id\").references(() => users.id),\n  subject: varchar(\"subject\").notNull(),\n  content: text(\"content\").notNull(),\n  riskLevel: varchar(\"risk_level\").notNull(), // 'low', 'medium', 'high'\n  currentRiskBand: varchar(\"current_risk_band\").notNull(),\n  previousRiskBand: varchar(\"previous_risk_band\"),\n  memberProfile: jsonb(\"member_profile\").notNull(), // User data used for personalization\n  status: varchar(\"status\").notNull().default(\"pending\"), // 'pending', 'approved', 'sent', 'rejected'\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  approvedAt: timestamp(\"approved_at\"),\n  sentAt: timestamp(\"sent_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  createdOffers: many(loyaltyOffers),\n  redemptions: many(offerRedemptions),\n  outreachActionsAsMember: many(outreachActions, { relationName: \"memberActions\" }),\n  outreachActionsAsStaff: many(outreachActions, { relationName: \"staffActions\" }),\n  workoutPlans: many(workoutPlans),\n  churnEmailsAsMember: many(churnEmails, { relationName: \"memberEmails\" }),\n  churnEmailsAsStaff: many(churnEmails, { relationName: \"staffEmails\" }),\n}));\n\nexport const loyaltyOffersRelations = relations(loyaltyOffers, ({ one, many }) => ({\n  creator: one(users, {\n    fields: [loyaltyOffers.createdBy],\n    references: [users.id],\n  }),\n  redemptions: many(offerRedemptions),\n}));\n\nexport const offerRedemptionsRelations = relations(offerRedemptions, ({ one }) => ({\n  user: one(users, {\n    fields: [offerRedemptions.userId],\n    references: [users.id],\n  }),\n  offer: one(loyaltyOffers, {\n    fields: [offerRedemptions.offerId],\n    references: [loyaltyOffers.id],\n  }),\n}));\n\nexport const outreachActionsRelations = relations(outreachActions, ({ one }) => ({\n  member: one(users, {\n    fields: [outreachActions.memberId],\n    references: [users.id],\n    relationName: \"memberActions\",\n  }),\n  staff: one(users, {\n    fields: [outreachActions.staffId],\n    references: [users.id],\n    relationName: \"staffActions\",\n  }),\n}));\n\nexport const workoutPlansRelations = relations(workoutPlans, ({ one }) => ({\n  user: one(users, {\n    fields: [workoutPlans.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const churnEmailsRelations = relations(churnEmails, ({ one }) => ({\n  member: one(users, {\n    fields: [churnEmails.memberId],\n    references: [users.id],\n    relationName: \"memberEmails\",\n  }),\n  staff: one(users, {\n    fields: [churnEmails.staffId],\n    references: [users.id],\n    relationName: \"staffEmails\",\n  }),\n  approver: one(users, {\n    fields: [churnEmails.approvedBy],\n    references: [users.id],\n  }),\n}));\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\nexport const insertLoyaltyOfferSchema = createInsertSchema(loyaltyOffers).omit({\n  id: true,\n  createdAt: true,\n});\nexport type InsertLoyaltyOffer = z.infer<typeof insertLoyaltyOfferSchema>;\nexport type LoyaltyOffer = typeof loyaltyOffers.$inferSelect;\n\nexport const insertOfferRedemptionSchema = createInsertSchema(offerRedemptions).omit({\n  id: true,\n  redeemedAt: true,\n});\nexport type InsertOfferRedemption = z.infer<typeof insertOfferRedemptionSchema>;\nexport type OfferRedemption = typeof offerRedemptions.$inferSelect;\n\nexport const insertOutreachActionSchema = createInsertSchema(outreachActions).omit({\n  id: true,\n  createdAt: true,\n});\nexport type InsertOutreachAction = z.infer<typeof insertOutreachActionSchema>;\nexport type OutreachAction = typeof outreachActions.$inferSelect;\n\nexport const insertChatConversationSchema = createInsertSchema(chatConversations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\nexport type InsertChatConversation = z.infer<typeof insertChatConversationSchema>;\nexport type ChatConversation = typeof chatConversations.$inferSelect;\n\nexport const insertWorkoutPlanSchema = createInsertSchema(workoutPlans).omit({\n  id: true,\n  createdAt: true,\n});\nexport type InsertWorkoutPlan = z.infer<typeof insertWorkoutPlanSchema>;\nexport type WorkoutPlan = typeof workoutPlans.$inferSelect;\n\nexport const insertChurnEmailSchema = createInsertSchema(churnEmails).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\nexport type InsertChurnEmail = z.infer<typeof insertChurnEmailSchema>;\nexport type ChurnEmail = typeof churnEmails.$inferSelect;\n\nexport const insertEmailInteractionSchema = createInsertSchema(emailInteractions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\nexport type InsertEmailInteraction = z.infer<typeof insertEmailInteractionSchema>;\nexport type EmailInteraction = typeof emailInteractions.$inferSelect;\n","size_bytes":9128},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/contexts/AuthContext\";\nimport { ProtectedRoute } from \"@/components/ProtectedRoute\";\nimport { CookieConsent } from \"@/components/CookieConsent\";\nimport { LandingPage } from \"@/pages/LandingPage\";\nimport { Login } from \"@/pages/Login\";\nimport { MemberPortal } from \"@/pages/MemberPortal\";\nimport { StaffDashboard } from \"@/pages/StaffDashboard\";\nimport { SalesPersona } from \"@/pages/SalesPersona\";\nimport { CustomerChurnAnalysis } from \"@/pages/CustomerChurnAnalysis\";\nimport VirtualTour from \"@/pages/VirtualTour\";\nimport { useAuthContext } from \"@/contexts/AuthContext\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading, user } = useAuthContext();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {/* Public routes */}\n      <Route path=\"/\" component={isAuthenticated ? ((user as any)?.role === 'staff' ? StaffDashboard : MemberPortal) : LandingPage} />\n\n      {/* Protected member routes */}\n      <Route path=\"/portal\">\n        <ProtectedRoute requiredRole=\"member\">\n          <MemberPortal />\n        </ProtectedRoute>\n      </Route>\n\n      {/* Protected staff routes */}\n      <Route path=\"/staff\">\n        <ProtectedRoute requiredRole=\"staff\">\n          <StaffDashboard />\n        </ProtectedRoute>\n      </Route>\n\n      <Route path=\"/sales\">\n        <ProtectedRoute requiredRole=\"staff\">\n          <SalesPersona />\n        </ProtectedRoute>\n      </Route>\n\n      <Route path=\"/churn-analysis\">\n        <ProtectedRoute requiredRole=\"staff\">\n          <CustomerChurnAnalysis />\n        </ProtectedRoute>\n      </Route>\n\n      {/* Login route */}\n      <Route path=\"/login\" component={Login} />\n\n      {/* Virtual Tour route (public for email links) */}\n      <Route path=\"/virtual-tour\" component={VirtualTour} />\n\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <Toaster />\n          <Router />\n          <CookieConsent />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":2650},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222.2, 90%, 8%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 90%, 8%);\n  --popover: linear-gradient(135deg, hsl(0, 0%, 100%) 0%, hsl(210, 60%, 98%) 100%);\n  --popover-foreground: hsl(222.2, 90%, 8%);\n  --primary: hsl(0, 100%, 45%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 90%, 8%);\n  --muted: hsl(210, 40%, 98%);\n  --muted-foreground: hsl(215.4, 25%, 35%);\n  --accent: hsl(210, 40%, 94%);\n  --accent-foreground: hsl(222.2, 90%, 8%);\n  --destructive: hsl(0, 100%, 50%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(214.3, 40%, 88%);\n  --input: hsl(214.3, 40%, 88%);\n  --ring: hsl(0, 100%, 45%);\n  --chart-1: hsl(340, 100%, 65%);\n  --chart-2: hsl(200, 100%, 60%);\n  --chart-3: hsl(120, 100%, 50%);\n  --chart-4: hsl(60, 100%, 70%);\n  --chart-5: hsl(280, 100%, 70%);\n  --sidebar: linear-gradient(135deg, hsl(0, 0%, 98%) 0%, hsl(260, 60%, 96%) 100%);\n  --sidebar-foreground: hsl(240, 15%, 20%);\n  --sidebar-primary: hsl(240, 100%, 60%);\n  --sidebar-primary-foreground: hsl(0, 0%, 98%);\n  --sidebar-accent: linear-gradient(135deg, hsl(300, 80%, 94%) 0%, hsl(270, 70%, 92%) 100%);\n  --sidebar-accent-foreground: hsl(222.2, 90%, 8%);\n  --sidebar-border: hsl(214.3, 40%, 88%);\n  --sidebar-ring: hsl(240, 100%, 60%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: linear-gradient(135deg, hsl(222.2, 84%, 4.9%) 0%, hsl(240, 60%, 8%) 50%, hsl(260, 40%, 12%) 100%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: linear-gradient(135deg, hsl(222.2, 84%, 4.9%) 0%, hsl(240, 60%, 8%) 50%, hsl(260, 40%, 12%) 100%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: linear-gradient(135deg, hsl(222.2, 84%, 4.9%) 0%, hsl(240, 50%, 10%) 100%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(142, 76%, 36%);\n  --primary-foreground: hsl(355.7, 100%, 97.3%);\n  --secondary: linear-gradient(135deg, hsl(217.2, 32.6%, 17.5%) 0%, hsl(240, 25%, 20%) 100%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: linear-gradient(135deg, hsl(217.2, 32.6%, 17.5%) 0%, hsl(240, 20%, 18%) 100%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: linear-gradient(135deg, hsl(217.2, 32.6%, 17.5%) 0%, hsl(240, 25%, 20%) 100%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(142, 76%, 36%);\n  --chart-1: hsl(220, 70%, 50%);\n  --chart-2: hsl(160, 60%, 45%);\n  --chart-3: hsl(30, 80%, 55%);\n  --chart-4: hsl(280, 65%, 60%);\n  --chart-5: hsl(340, 75%, 55%);\n  --sidebar: linear-gradient(135deg, hsl(222.2, 84%, 4.9%) 0%, hsl(240, 50%, 10%) 100%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(142, 76%, 36%);\n  --sidebar-primary-foreground: hsl(355.7, 100%, 97.3%);\n  --sidebar-accent: linear-gradient(135deg, hsl(217.2, 32.6%, 17.5%) 0%, hsl(240, 25%, 20%) 100%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-ring: hsl(142, 76%, 36%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    background: var(--background);\n    color: hsl(var(--foreground));\n    font-family: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n    min-height: 100vh;\n    line-height: 1.6;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n  \n  /* Enhanced typography hierarchy */\n  h1 {\n    @apply text-4xl md:text-5xl font-bold leading-tight tracking-tight;\n  }\n  \n  h2 {\n    @apply text-3xl md:text-4xl font-bold leading-tight tracking-tight;\n  }\n  \n  h3 {\n    @apply text-2xl md:text-3xl font-semibold leading-tight;\n  }\n  \n  h4 {\n    @apply text-xl md:text-2xl font-semibold leading-snug;\n  }\n  \n  h5 {\n    @apply text-lg md:text-xl font-medium leading-snug;\n  }\n  \n  h6 {\n    @apply text-base md:text-lg font-medium leading-normal;\n  }\n  \n  p {\n    @apply leading-relaxed;\n  }\n  \n  /* Improved text contrast and readability */\n  .text-readable-primary {\n    @apply text-gray-900 dark:text-gray-100;\n  }\n  \n  .text-readable-secondary {\n    @apply text-gray-700 dark:text-gray-200;\n  }\n  \n  .text-readable-muted {\n    @apply text-gray-600 dark:text-gray-300;\n  }\n  \n  .text-readable-subtle {\n    @apply text-gray-500 dark:text-gray-400;\n  }\n}\n\n@layer components {\n  .btn-primary {\n    @apply bg-primary text-primary-foreground hover:bg-primary/90;\n  }\n  \n  .btn-secondary {\n    @apply bg-secondary text-secondary-foreground hover:bg-secondary/80;\n  }\n  \n  /* Enhanced card readability */\n  .card-readable {\n    @apply bg-white/95 dark:bg-gray-900/95 backdrop-blur-sm border border-gray-200/60 dark:border-gray-700/60 shadow-lg;\n  }\n  \n  /* Better spacing utilities */\n  .content-spacing {\n    @apply space-y-6;\n  }\n  \n  .section-spacing {\n    @apply py-12 md:py-16 lg:py-20;\n  }\n  \n  /* Enhanced focus states for accessibility */\n  .focus-enhanced:focus-visible {\n    @apply outline-none ring-2 ring-primary/50 ring-offset-2 ring-offset-background;\n  }\n  \n  /* Better link styling */\n  .link-readable {\n    @apply text-primary hover:text-primary/80 transition-colors duration-200 underline decoration-primary/30 hover:decoration-primary/60 underline-offset-2;\n  }\n}\n","size_bytes":5408},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/geminiService.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\n\nconst ai = new GoogleGenAI({\n  apiKey: process.env.GEMINI_API_KEY || process.env.API_KEY || \"\",\n});\n\nexport async function generateRetentionStrategies(\n  memberProfile: any,\n): Promise<string> {\n  if (!process.env.GEMINI_API_KEY && !process.env.API_KEY) {\n    // Mock response for development\n    return `\n# AI Retention Strategies for ${memberProfile.name}\n\n## 📞 Personal Outreach Strategy\nCall ${memberProfile.name} personally to address their specific concerns: \"${memberProfile.feedback}\". Offer complimentary off-peak personal training sessions during quieter hours (2-4 PM). Highlight the personalized attention and spacious environment during these times.\n\n## 🎯 Targeted Incentives\nProvide ${memberProfile.name} with a \"VIP Access Pass\" that allows them to book equipment in advance during peak hours. Also offer a 20% discount on personal training packages to create a more exclusive, less crowded experience.\n\n## 🏋️ Alternative Solutions\nIntroduce ${memberProfile.name} to our new \"Premium Quiet Zone\" - a dedicated area for focused workouts. Schedule a tour to show them this space and explain how it addresses their specific concerns about overcrowding.\n    `.trim();\n  }\n\n  try {\n    const prompt = `You are a retention specialist for a premium fitness club. Generate 3 distinct, personalized retention strategies for the following member:\n\nMember Profile:\n- Name: ${memberProfile.name}\n- Membership Type: ${memberProfile.membershipType}\n- Member Since: ${memberProfile.joinDate}\n- Last Visit: ${memberProfile.lastVisit}\n- Average Visits/Month: ${memberProfile.avgVisits}\n- Churn Risk: ${memberProfile.churnRisk}\n- Feedback/Concerns: ${memberProfile.feedback}\n\nPlease provide 3 actionable retention strategies in markdown format with headers, addressing their specific concerns and situation. Focus on practical, immediate actions the staff can take.`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-1.5-flash\",\n      contents: [{ role: \"user\", parts: [{ text: prompt }] }],\n    });\n\n    return (\n      response.candidates?.[0]?.content?.parts?.[0]?.text ||\n      \"Unable to generate strategies at this time.\"\n    );\n  } catch (error) {\n    console.error(\"Error generating retention strategies:\", error);\n    throw new Error(\"Failed to generate retention strategies\");\n  }\n}\n\nexport async function generateSalesEmail(\n  prompt: string,\n  systemInstruction: string,\n  model: string = \"gemini-1.5-flash\",\n): Promise<{ content: string }> {\n  if (!process.env.GEMINI_API_KEY && !process.env.API_KEY) {\n    // Mock response for development\n    return {\n      content: `Subject: Discover Your Perfect Fitness Journey at Virgin Active\n\nDear [Name],\n\nI hope this email finds you well! I noticed your passion for fitness and wellness, and I wanted to personally reach out to introduce you to Virgin Active - London's premier fitness destination.\n\nBased on your interests in [interests], I believe you'd absolutely love our state-of-the-art facilities and expert-led programs designed specifically for people like you who are serious about their health and fitness goals.\n\n**What makes Virgin Active special:**\n• World-class equipment and facilities across London\n• Expert personal trainers and group fitness classes\n• Exclusive member benefits and flexible membership options\n• Community of like-minded fitness enthusiasts\n\nI'd love to invite you to experience everything we have to offer with a **complimentary 7-day trial** - completely free, no strings attached.\n\n**Ready to see for yourself?**\nClick here to take our virtual tour: [Virgin Active Virtual Tour Link]\n\nOr if you'd prefer, I can arrange a personal tour at your convenience. Simply reply to this email or call me directly.\n\nYour fitness journey deserves the best support, and I'm confident Virgin Active can provide exactly that.\n\nLooking forward to welcoming you to our community!\n\nBest regards,\n[Your Name]\nVirgin Active Sales Team\n\nP.S. Don't forget to book your free trial session - spaces are limited!`,\n    };\n  }\n\n  try {\n    const response = await ai.models.generateContent({\n      model,\n      contents: [{ role: \"user\", parts: [{ text: prompt }] }]\n    });\n\n    const text = response.candidates?.[0]?.content?.parts?.[0]?.text;\n\n    return {\n      content: text || \"Email generated successfully\",\n    };\n  } catch (error) {\n    console.error(\"Error generating sales email:\", error);\n    throw new Error(\"Failed to generate sales email\");\n  }\n}\n\nexport async function generateChurnPreventionEmail(\n  memberProfile: any,\n  riskLevel: string,\n  currentRiskBand: string,\n  previousRiskBand?: string,\n): Promise<{ subject: string; content: string }> {\n  if (!process.env.GEMINI_API_KEY && !process.env.API_KEY) {\n    // Mock response for development\n    const memberName = `${memberProfile.firstName} ${memberProfile.lastName}`;\n    const mockEmails = {\n      high: {\n        subject: `We miss you at ClubPulse, ${memberProfile.firstName}! Let's get back on track 💪`,\n        content: `Dear ${memberName},\n\nWe've noticed you haven't visited ClubPulse in a while, and we want to make sure everything is alright. As a valued ${memberProfile.membershipType} member, you're important to us!\n\n**Your Current Membership Benefits:**\n• 24/7 access to all premium facilities\n• Unlimited group fitness classes\n• Access to our AI-powered workout recommendations\n• Complimentary towel service\n\n**Special Comeback Offer - Just for You:**\nTo help you get back into your routine, we're offering:\n• FREE personal training session (worth £65)\n• 50% off next month's supplements\n• Priority booking for popular classes\n\nYour wellness journey matters to us. Our team would love to understand any challenges you're facing and help create a plan that works better for your lifestyle.\n\n**Ready to return?** Simply reply to this email or call us at 020 3837 4721.\n\nStay strong,\nThe ClubPulse Team\n\nP.S. Don't forget - your membership includes unlimited access to our new meditation room and recovery zone!`,\n      },\n      medium: {\n        subject: `${memberProfile.firstName}, let's keep your momentum going! 🏃‍♀️`,\n        content: `Hi ${memberName},\n\nWe've noticed a slight change in your visit pattern recently. As someone who's been crushing their fitness goals, we want to help you maintain that amazing momentum!\n\n**Your Recent Progress:**\n• Member since ${new Date(memberProfile.joinDate).toLocaleDateString(\"en-GB\")}\n• ${memberProfile.membershipType} membership benefits\n• Previously averaging regular visits\n\n**To keep you motivated:**\n• NEW: Try our just-launched HIIT classes (perfect for busy schedules!)\n• Book a complimentary fitness assessment to update your goals\n• 20% off personal training packages this month\n\nSometimes life gets busy - that's completely normal! Our flexible class schedule and 24/7 access are designed to work around your lifestyle.\n\n**Let's catch up:** Pop in this week for a quick chat with our wellness team. We're here to support your journey!\n\nBest regards,\nYour ClubPulse Family\n\n*Remember: Consistency beats perfection. Even 20 minutes counts!*`,\n      },\n      low: {\n        subject: `New classes and features await you, ${memberProfile.firstName}! ✨`,\n        content: `Hello ${memberName},\n\nHope you're doing well! We've added some exciting new features and classes that we think you'll love.\n\n**What's New at ClubPulse:**\n• Fresh morning yoga sessions (perfect for starting the day right)\n• Advanced strength training equipment in the new zone\n• Nutrition workshops every Saturday morning\n• Updated AI workout recommendations based on your preferences\n\n**Your Membership Perks:**\nAs a ${memberProfile.membershipType} member, you have full access to all these new offerings at no extra cost!\n\n**This Week's Highlights:**\n• Monday: Power Yoga with Sarah (7:00 AM)\n• Wednesday: Strength & Conditioning masterclass\n• Friday: Nutrition Q&A session\n\nWe'd love to see you soon and hear about your current fitness goals. Our team is always here to help you make the most of your membership.\n\nSee you soon!\nThe ClubPulse Team\n\n*Your next visit is going to be amazing - we've got everything ready for you!*`,\n      },\n    };\n\n    return (\n      mockEmails[riskLevel as keyof typeof mockEmails] || mockEmails.medium\n    );\n  }\n\n  try {\n    const memberName = `${memberProfile.firstName} ${memberProfile.lastName}`;\n    const daysSinceLastVisit = memberProfile.lastVisit\n      ? Math.floor(\n          (Date.now() - new Date(memberProfile.lastVisit).getTime()) /\n            (1000 * 60 * 60 * 24),\n        )\n      : 999;\n\n    const prompt = `You are writing a personalized churn prevention email for a UK fitness club called ClubPulse. Write a warm, encouraging email that doesn't feel pushy or desperate.\n\nMember Details:\n- Name: ${memberName}\n- Membership Type: ${memberProfile.membershipType}\n- Member Since: ${memberProfile.joinDate}\n- Last Visit: ${memberProfile.lastVisit ? `${daysSinceLastVisit} days ago` : \"Never visited\"}\n- Current Risk Level: ${riskLevel}\n- Risk Band Change: ${previousRiskBand ? `Moving from ${previousRiskBand} to ${currentRiskBand}` : `Currently in ${currentRiskBand} band`}\n\nClub Details:\n- Location: 25 Canary Wharf, London E14 5AB\n- Phone: 020 3837 4721\n- Premium membership: £59/month (24/7 access, AI coaching, group classes, 2 personal training sessions/month)\n- Basic membership: £22/month (06:00-22:00 access, basic AI workouts)\n- Student membership: £15/month (06:00-16:00 access, student areas)\n\nEmail Guidelines:\n1. Use UK English spelling and tone\n2. Include specific member benefits and club features\n3. Offer relevant incentives based on risk level:\n   - High risk (not visited 10+ days): Strong comeback offer (free PT session, discounts)\n   - Medium risk (7-10 days): Motivational check-in with mild incentives\n   - Low risk (5-7 days): New features and gentle engagement\n4. Keep tone positive, supportive, and personal\n5. Include call-to-action (phone, email, or visit)\n6. Mention UK-specific details (opening hours, pricing in GBP)\n7. Professional yet friendly closing\n\nReturn format:\n{\n  \"subject\": \"Email subject line here\",\n  \"content\": \"Full email content here\"\n}`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-1.5-flash\",\n      contents: [{ role: \"user\", parts: [{ text: prompt }] }],\n    });\n\n    const emailText = response.candidates?.[0]?.content?.parts?.[0]?.text || \"\";\n\n    // Try to parse as JSON, fallback to structured format\n    try {\n      return JSON.parse(emailText);\n    } catch {\n      // If not JSON, extract subject and content manually\n      const lines = emailText.split(\"\\n\");\n      const subjectLine = lines.find((line) =>\n        line.toLowerCase().includes(\"subject:\"),\n      );\n      const subject = subjectLine\n        ? subjectLine.replace(/subject:\\s*/i, \"\").trim()\n        : `We miss you at ClubPulse, ${memberProfile.firstName}!`;\n\n      const contentStart = lines.findIndex((line) =>\n        line.toLowerCase().includes(\"content:\"),\n      );\n      const content =\n        contentStart > -1\n          ? lines\n              .slice(contentStart + 1)\n              .join(\"\\n\")\n              .trim()\n          : emailText;\n\n      return { subject, content };\n    }\n  } catch (error) {\n    console.error(\"Error generating churn prevention email:\", error);\n    throw new Error(\"Failed to generate churn prevention email\");\n  }\n}\n\nexport async function generateLoyaltyOffers(\n  targetCriteria: string,\n): Promise<{ offers: any[] }> {\n  if (!process.env.GEMINI_API_KEY && !process.env.API_KEY) {\n    // Mock response for development\n    return {\n      offers: [\n        {\n          id: 1,\n          title: \"Free Yoga Mat\",\n          description: \"Premium branded yoga mat for dedicated practitioners\",\n          points: 400,\n          category: \"Wellness\",\n        },\n        {\n          id: 2,\n          title: \"Morning Yoga Package\",\n          description: \"5 additional morning yoga classes\",\n          points: 600,\n          category: \"Classes\",\n        },\n        {\n          id: 3,\n          title: \"Meditation Workshop\",\n          description:\n            \"Exclusive mindfulness workshop with certified instructor\",\n          points: 350,\n          category: \"Wellness\",\n        },\n      ],\n    };\n  }\n\n  try {\n    const prompt = `You are a loyalty program manager for a premium fitness club. Generate 3 creative loyalty offers targeted at the following member segment:\n\nTarget Criteria: ${targetCriteria}\n\nCreate offers that would appeal to this specific group. Each offer should include:\n- A catchy title\n- Description of what the member gets\n- Point cost (between 100-1000 points)\n- Category (Fitness, Wellness, Nutrition, Social, Classes, etc.)\n\nReturn the response as a JSON object with an \"offers\" array.`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-1.5-flash\",\n      contents: [{ role: \"user\", parts: [{ text: prompt }] }]\n    });\n\n    const rawJson = response.candidates?.[0]?.content?.parts?.[0]?.text;\n    if (rawJson) {\n      return JSON.parse(rawJson);\n    } else {\n      throw new Error(\"Empty response from model\");\n    }\n  } catch (error) {\n    console.error(\"Error generating loyalty offers:\", error);\n    throw new Error(\"Failed to generate loyalty offers\");\n  }\n}\n\n// =================================================================\n// ===== ACQUISITION CHATBOT FUNCTION - UPDATED AS PER YOUR DATA =====\n// =================================================================\nexport async function sendMessageToChat(\n  message: string,\n  conversationHistory: Array<{ role: string; content: string }>,\n): Promise<{\n  content: string;\n  contactEmail?: string;\n  contactName?: string;\n  tourBooked?: boolean;\n}> {\n  if (!process.env.GEMINI_API_KEY && !process.env.API_KEY) {\n    // Mock response for development\n    const responses = [\n      \"Hi there! Welcome to Virgin Active. To get started, which language would you prefer for this chat?\",\n      \"Great! How would you like to explore today? You can [Find clubs near me], learn about [Your goals], [Compare memberships], take a [Virtual club tour], [Show class options], or [Request a call back].\",\n      \"To suggest the best for you, what’s your main fitness goal? Some popular ones are [Weight loss], [Build muscle], or [Improve endurance].\",\n      \"Based on your goal to get stronger and visit 3-4 times a week, our 'Virgin Active All Access (Annual)' plan is the best value. It includes unlimited classes and full gym access for about £1.30 per visit. Would you like to explore clubs near you?\",\n    ];\n\n    const randomResponse =\n      responses[Math.floor(Math.random() * responses.length)];\n    return { content: randomResponse };\n  }\n\n  try {\n    // UPDATED: This system instruction now uses your detailed VA Demo data\n    const systemInstruction = `You are a friendly, motivating, and knowledgeable AI assistant for Virgin Active. Your primary goal is to understand a potential new member's needs and guide them to the perfect club and membership plan. Be conversational and avoid being robotic.\n\nFollow this conversational flow based on the user's choices:\n\n1.  **Greeting & Setup:**\n    * Start by welcoming the user to Virgin Active.\n    * First, ask their preferred language: \"[English] [Spanish] [French] [Other]\".\n    * Once confirmed, present the main menu of options: \"[Find clubs near me] [Your goals] [Compare memberships] [Virtual club tour] [Show class options] [Request a call back]\".\n\n2.  **Path A: \"Your goals\" (Research and Discovery)**\n    * If the user wants to explore their goals, follow this question sequence to build a profile. Don't ask all questions at once; make it a natural conversation.\n    * a) Main fitness goal? ([Weight loss] [Build muscle] [Improve endurance] [Rehab / recovery] [Flexibility / mobility] [Stress & wellbeing] [Social / classes] [Not sure])\n    * b) Target or timeline? ([Within 3 months] [3–6 months] [6+ months] [No specific timeline])\n    * c) Fitness experience level? ([Beginner] [Intermediate] [Advanced] [Prefer trainer guidance])\n    * d) Preferred workout style? ([Group classes] [Solo gym sessions] [Personal training] [Virtual workouts / on-demand] [Mix of these])\n    * e) Ask to explore clubs. ([Use my location] [Enter a suburb or postcode])\n    * f) Ask for search radius. ([5 km] [10 km] [20 km] [Custom])\n    * g) Ask about important filters/amenities. ([Pool] [Sauna & spa] [Late opening] [Ladies-only] [24/7 access] [Studio classes] [Personal training] [Family-friendly])\n    * h) How often they plan to visit? ([1–2x/week] [3–4x/week] [5+x/week] [Not sure])\n    * i) Preferred session length? ([30 mins] [45 mins] [60 mins] [No preference])\n    * j) Any injuries or medical conditions? ([Yes — I’ll explain] [No])\n    * k) Any other preferences? ([Evening classes] [Weekend classes] [Beginner-friendly] [Advanced classes] [Wheelchair access] [Childcare])\n    * l) Best times to work out? ([Early mornings] [Lunchtime] [Evenings] [Weekends] [No preference])\n    * m) How to receive follow-ups? ([Email] [SMS] [App notifications] [Phone call] [No follow-up])\n\n3.  **Path B: \"Compare Memberships\"**\n    * If the user wants to compare plans, ask: \"[Show me top plans] [Compare clubs & plans] [Find best plan for me] [Enter promo code]\".\n    * Based on their choice, you can ask clarifying questions like:\n        * Membership type interest? ([Individual monthly] [Individual annual] [Family] [Student] [Corporate] [Pay-as-you-go])\n        * Expected usage frequency? ([1–2x/week] [3–4x/week] [5+ / week] [Unsure])\n        * Must-have amenities? ([Pool] [Sauna & spa] [Group classes] [Personal training] [24/7 gym] [Kids club])\n\n4.  **Making Recommendations:**\n    * After gathering information from Path A or B, use the following membership data to make a personalized recommendation. Explain WHY you're recommending it based on their answers.\n    * **Virgin Active Lite (Monthly):**\n        * **Price:** £29 / month\n        * **Commitment:** No contract, cancel anytime.\n        * **Access:** Gym floor only.\n        * **Classes:** Pay-per-class / on-demand.\n        * **Best for:** Occasional visitors, those on a budget, or people who prefer flexibility and don't need classes or pool access.\n    * **Virgin Active All Access (Annual):**\n        * **Price:** £39 / month (billed annually at £468).\n        * **Commitment:** 12 months.\n        * **Access:** Gym floor, unlimited group classes, pool, sauna.\n        * **Perks:** 1 guest pass/month, can freeze up to 3 months.\n        * **Best for:** Regular members (3+ times/week), those who want classes, pool, and the best overall value.\n\n5.  **Handling Other Options:**\n    * **[Find clubs near me]:** Ask for their location (postcode or suburb).\n    * **[Request a call back]:** Ask for their name and phone number.\n    * **[Virtual club tour] / [Show class options]:** Provide links or summary information and ask what they'd like to see first.\n\nKeep responses helpful, friendly, and guide the user through the process smoothly.`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-1.5-flash\",\n      contents: [\n        ...conversationHistory.map((msg) => ({\n          role: msg.role === \"user\" ? \"user\" : \"model\",\n          parts: [{ text: msg.content }],\n        })),\n        { role: \"user\", parts: [{ text: message }] }\n      ]\n    });\n\n    const content =\n      response.candidates?.[0]?.content?.parts?.[0]?.text ||\n      \"I'm sorry, I didn't understand that. Could you please rephrase?\";\n\n    // NOTE: The simple contact extraction logic is kept for demo purposes.\n    // A more robust solution might use function calling or more advanced parsing.\n    let contactEmail, contactName, tourBooked;\n    const emailMatch = message.match(\n      /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/,\n    );\n    if (emailMatch) {\n      contactEmail = emailMatch[0];\n      tourBooked = true; // Assuming providing an email implies booking interest\n    }\n    if (contactEmail && message.toLowerCase().includes(\"my name is\")) {\n      const nameMatch = message.match(/my name is ([A-Za-z\\s]+)/i);\n      if (nameMatch) {\n        contactName = nameMatch[1].trim();\n      }\n    }\n\n    return { content, contactEmail, contactName, tourBooked };\n  } catch (error) {\n    console.error(\"Error in chat:\", error);\n    return {\n      content:\n        \"I'm experiencing some technical difficulties. Please try again or contact us directly.\",\n    };\n  }\n}\n\nexport async function generateWorkoutPlan(\n  goals: string,\n  healthData?: any,\n): Promise<{ planTitle: string; weeklySchedule: any[] }> {\n  if (!process.env.GEMINI_API_KEY && !process.env.API_KEY) {\n    // Mock response for development\n    return {\n      planTitle: \"Strength & Cardio Building Program\",\n      weeklySchedule: [\n        {\n          day: \"Monday\",\n          focus: \"Upper Body Strength\",\n          description:\n            \"Focus on building upper body strength with compound movements\",\n          exercises: [\n            \"Bench Press - 4 sets x 8-10 reps\",\n            \"Pull-ups - 3 sets x 6-8 reps\",\n            \"Shoulder Press - 3 sets x 10-12 reps\",\n            \"Dumbbell Rows - 3 sets x 10-12 reps\",\n          ],\n        },\n        {\n          day: \"Tuesday\",\n          focus: \"Cardio & Core\",\n          description: \"Improve cardiovascular fitness and core stability\",\n          exercises: [\n            \"Treadmill Run - 30 minutes moderate pace\",\n            \"Plank - 3 sets x 45 seconds\",\n            \"Russian Twists - 3 sets x 20 reps\",\n            \"Mountain Climbers - 3 sets x 30 seconds\",\n          ],\n        },\n        {\n          day: \"Wednesday\",\n          focus: \"Lower Body Strength\",\n          description: \"Build leg strength and power\",\n          exercises: [\n            \"Squats - 4 sets x 10-12 reps\",\n            \"Deadlifts - 3 sets x 8-10 reps\",\n            \"Lunges - 3 sets x 12 reps each leg\",\n            \"Calf Raises - 3 sets x 15 reps\",\n          ],\n        },\n        {\n          day: \"Thursday\",\n          focus: \"Active Recovery\",\n          description: \"Light activity and stretching\",\n          exercises: [\n            \"20-minute walk\",\n            \"Full body stretching routine\",\n            \"Foam rolling\",\n            \"Yoga or meditation\",\n          ],\n        },\n      ],\n    };\n  }\n\n  try {\n    const healthProfile = healthData\n      ? `\n\nHealth Profile:\n- Age: ${healthData.age}\n- Current Fitness Level: ${healthData.fitnessLevel}\n- Exercise Experience: ${healthData.exerciseExperience}\n- Medical Conditions/Notes: ${healthData.medicalConditions || \"None reported\"}\n`\n      : \"\";\n\n    const prompt = `You are an expert personal trainer. Create a personalized weekly workout plan based on these goals and health profile:\n\nGoals: ${goals}${healthProfile}\n\nIMPORTANT SAFETY GUIDELINES:\n- Consider the person's age, fitness level, and experience when selecting exercises\n- If medical conditions are mentioned, suggest modifications and emphasize consulting healthcare providers\n- Start conservatively for beginners and progress gradually\n- Include proper warm-up and cool-down recommendations\n- Suggest rest days and recovery periods\n\nCreate a structured workout plan with a catchy title and weekly schedule. Each day should include the focus area, description, and specific exercises with sets/reps appropriate for their level.\n\nReturn as JSON with this structure:\n{\n  \"planTitle\": \"string\",\n  \"weeklySchedule\": [\n    {\n      \"day\": \"string\",\n      \"focus\": \"string\", \n      \"description\": \"string\",\n      \"exercises\": [\"array of exercise strings with sets/reps\"]\n    }\n  ]\n}`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-1.5-flash\",\n      contents: [{ role: \"user\", parts: [{ text: prompt }] }]\n    });\n\n    const rawJson = response.candidates?.[0]?.content?.parts?.[0]?.text;\n    if (rawJson) {\n      return JSON.parse(rawJson);\n    } else {\n      throw new Error(\"Empty response from model\");\n    }\n  } catch (error) {\n    console.error(\"Error generating workout plan:\", error);\n    throw new Error(\"Failed to generate workout plan\");\n  }\n}\n","size_bytes":24205},"client/src/components/ChatBot.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { MessageCircle, X, Send, Bot, User } from \"lucide-react\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface Message {\n  role: \"user\" | \"assistant\";\n  content: string;\n  buttons?: Array<{ text: string; value: string }>;\n}\n\ninterface UserData {\n  language?: string;\n  fitnessGoal?: string;\n  frequency?: string;\n  location?: string;\n  name?: string;\n  email?: string;\n  phone?: string;\n}\n\nexport function ChatBot() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [showProactiveGreeting, setShowProactiveGreeting] = useState(false);\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      role: \"assistant\",\n      content: \"Hi there! Welcome to Virgin Active. Let's find the perfect fitness solution for you!\",\n      buttons: [\n        { text: \"English\", value: \"english\" },\n        { text: \"Español\", value: \"spanish\" },\n        { text: \"Français\", value: \"french\" }\n      ]\n    },\n  ]);\n  const [input, setInput] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [sessionId] = useState(() => `session-${Date.now()}-${Math.random()}`);\n  const [userData, setUserData] = useState<UserData>({});\n  const [currentStep, setCurrentStep] = useState(\"language\");\n\n  // Show proactive greeting after a short delay when component mounts\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setShowProactiveGreeting(true);\n    }, 2000);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  // Hide proactive greeting when chat is opened\n  useEffect(() => {\n    if (isOpen) {\n      setShowProactiveGreeting(false);\n    }\n  }, [isOpen]);\n\n  const handleButtonClick = async (value: string) => {\n    // Add user's choice to messages\n    const buttonMessage = messages[messages.length - 1];\n    const selectedButton = buttonMessage.buttons?.find(btn => btn.value === value);\n    \n    setMessages(prev => [...prev, { \n      role: \"user\", \n      content: selectedButton?.text || value \n    }]);\n\n    // Update user data and determine next step\n    let nextStep = \"\";\n    let assistantResponse: Message = { role: \"assistant\", content: \"\" };\n\n    switch (currentStep) {\n      case \"language\":\n        setUserData(prev => ({ ...prev, language: value }));\n        nextStep = \"fitnessGoal\";\n        assistantResponse = {\n          role: \"assistant\",\n          content: \"Great choice! What's your main fitness goal?\",\n          buttons: [\n            { text: \"Weight Loss\", value: \"weight_loss\" },\n            { text: \"Build Muscle\", value: \"build_muscle\" },\n            { text: \"Improve Endurance\", value: \"improve_endurance\" },\n            { text: \"General Fitness\", value: \"general_fitness\" }\n          ]\n        };\n        break;\n\n      case \"fitnessGoal\":\n        setUserData(prev => ({ ...prev, fitnessGoal: value }));\n        nextStep = \"frequency\";\n        assistantResponse = {\n          role: \"assistant\",\n          content: \"Excellent! How often do you plan to visit the gym?\",\n          buttons: [\n            { text: \"1-2 times/week\", value: \"1-2\" },\n            { text: \"3-4 times/week\", value: \"3-4\" },\n            { text: \"5+ times/week\", value: \"5+\" },\n            { text: \"Not sure yet\", value: \"unsure\" }\n          ]\n        };\n        break;\n\n      case \"frequency\":\n        setUserData(prev => ({ ...prev, frequency: value }));\n        nextStep = \"location\";\n        assistantResponse = {\n          role: \"assistant\",\n          content: \"Perfect! Which area are you looking for a gym in?\",\n          buttons: [\n            { text: \"Central London\", value: \"central_london\" },\n            { text: \"East London\", value: \"east_london\" },\n            { text: \"West London\", value: \"west_london\" },\n            { text: \"South London\", value: \"south_london\" },\n            { text: \"North London\", value: \"north_london\" }\n          ]\n        };\n        break;\n\n      case \"location\":\n        setUserData(prev => ({ ...prev, location: value }));\n        nextStep = \"contact\";\n        assistantResponse = {\n          role: \"assistant\",\n          content: \"Great! To help you get started, could you share your contact details?\",\n          buttons: [\n            { text: \"Yes, I'll share\", value: \"share_contact\" },\n            { text: \"Just browsing\", value: \"browsing\" }\n          ]\n        };\n        break;\n\n      case \"contact\":\n        if (value === \"share_contact\") {\n          nextStep = \"name\";\n          assistantResponse = {\n            role: \"assistant\",\n            content: \"Wonderful! What's your first name?\"\n          };\n        } else {\n          nextStep = \"complete\";\n          assistantResponse = {\n            role: \"assistant\",\n            content: \"No problem! Based on your interests, I'd recommend checking out our Premium membership. You can explore our facilities anytime. Thanks for chatting with us!\"\n          };\n        }\n        break;\n\n      case \"name\":\n        setUserData(prev => ({ ...prev, name: value }));\n        nextStep = \"email\";\n        assistantResponse = {\n          role: \"assistant\",\n          content: `Nice to meet you, ${value}! What's your email address?`\n        };\n        break;\n\n      case \"email\":\n        setUserData(prev => ({ ...prev, email: value }));\n        nextStep = \"phone\";\n        assistantResponse = {\n          role: \"assistant\",\n          content: \"Great! And your phone number?\"\n        };\n        break;\n\n      case \"phone\":\n        setUserData(prev => ({ ...prev, phone: value }));\n        nextStep = \"complete\";\n        \n        // Save lead data\n        try {\n          await apiRequest(\"POST\", \"/api/leads\", {\n            ...userData,\n            phone: value,\n            sessionId\n          });\n        } catch (error) {\n          console.error(\"Error saving lead:\", error);\n        }\n\n        assistantResponse = {\n          role: \"assistant\",\n          content: `Thank you ${userData.name}! I've got all your details. Based on your goal of ${userData.fitnessGoal?.replace('_', ' ')} and visiting ${userData.frequency} times per week in ${userData.location?.replace('_', ' ')}, our Premium membership would be perfect for you. Someone from our team will contact you within 24 hours to arrange a tour and discuss membership options. Have a great day!`\n        };\n        break;\n\n      default:\n        assistantResponse = {\n          role: \"assistant\",\n          content: \"Thanks for your interest! Someone from our team will be in touch soon.\"\n        };\n    }\n\n    setCurrentStep(nextStep);\n    \n    // Add assistant response after a short delay\n    setTimeout(() => {\n      setMessages(prev => [...prev, assistantResponse]);\n    }, 500);\n  };\n\n  const sendMessage = async () => {\n    if (!input.trim() || isLoading) return;\n\n    const userMessage = input.trim();\n    setInput(\"\");\n\n    // Handle text input based on current step\n    if (currentStep === \"name\" || currentStep === \"email\" || currentStep === \"phone\") {\n      handleButtonClick(userMessage);\n      return;\n    }\n\n    setMessages(prev => [...prev, { role: \"user\", content: userMessage }]);\n    setIsLoading(true);\n\n    try {\n      const response = await apiRequest(\"POST\", \"/api/chat/message\", {\n        message: userMessage,\n        sessionId,\n        userData,\n        currentStep\n      });\n\n      const data = await response.json();\n      setMessages(prev => [\n        ...prev,\n        { role: \"assistant\", content: data.content, buttons: data.buttons },\n      ]);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      setMessages(prev => [\n        ...prev,\n        {\n          role: \"assistant\",\n          content: \"I'm experiencing some technical difficulties. Please try again or contact us directly at 020 3837 4721.\",\n        },\n      ]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n\n  return (\n    <div className=\"fixed bottom-6 right-6 z-50\">\n      {/* Proactive Greeting */}\n      {showProactiveGreeting && !isOpen && (\n        <div className=\"absolute bottom-16 right-0 mb-2 animate-in slide-in-from-bottom-4 duration-500\">\n          <Card className=\"w-72 shadow-lg border bg-background/95 backdrop-blur\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-start gap-3\">\n                <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center flex-shrink-0 mt-1\">\n                  <Bot className=\"h-4 w-4 text-primary\" />\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm text-foreground\" data-testid=\"text-proactive-greeting\">\n                    Hi there! 👋 Welcome to Virgin Active. I'm here to help you find the perfect fitness solution. What brings you here today?\n                  </p>\n                  <div className=\"flex gap-2 mt-3\">\n                    <Button\n                      size=\"sm\"\n                      onClick={() => setIsOpen(true)}\n                      className=\"text-xs bg-primary hover:bg-primary/90\"\n                      data-testid=\"button-start-chat\"\n                    >\n                      Start Chat\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => setShowProactiveGreeting(false)}\n                      className=\"text-xs\"\n                      data-testid=\"button-dismiss-greeting\"\n                    >\n                      Maybe later\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Toggle Button */}\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <Button\n            onClick={() => setIsOpen(!isOpen)}\n            className=\"w-14 h-14 rounded-full shadow-lg hover:scale-110 transition-all duration-300 bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white font-bold\"\n            data-testid=\"button-toggle-chatbot\"\n          >\n            {isOpen ? (\n              <X className=\"h-6 w-6\" />\n            ) : (\n              <MessageCircle className=\"h-6 w-6\" />\n            )}\n          </Button>\n        </TooltipTrigger>\n        <TooltipContent>\n          <p>💬 {isOpen ? \"Close chat\" : \"Chat with our AI assistant!\"}</p>\n        </TooltipContent>\n      </Tooltip>\n\n      {/* Chat Window */}\n      {isOpen && (\n        <Card className=\"absolute bottom-16 right-0 w-80 shadow-2xl border\">\n          <CardHeader className=\"bg-primary text-primary-foreground p-4 flex flex-row items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-8 h-8 bg-primary-foreground/20 rounded-full flex items-center justify-center\">\n                <Bot className=\"h-4 w-4\" />\n              </div>\n              <div>\n                <h4 className=\"font-semibold\" data-testid=\"text-chatbot-title\">\n                  AI Assistant\n                </h4>\n                <p className=\"text-xs text-primary-foreground/80\">Online now</p>\n              </div>\n            </div>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setIsOpen(false)}\n                  className=\"text-primary-foreground/80 hover:text-primary-foreground p-1 bg-gradient-to-r from-red-100 to-red-200 text-red-700 hover:from-red-200 hover:to-red-300 hover:text-red-800\"\n                  data-testid=\"button-close-chatbot\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>❌ Close chat window</p>\n              </TooltipContent>\n            </Tooltip>\n          </CardHeader>\n\n          <CardContent className=\"p-0\">\n            {/* Messages */}\n            <div className=\"h-96 overflow-y-auto p-4 space-y-4\">\n              {messages.map((message, index) => (\n                <div\n                  key={index}\n                  className={`flex gap-3 ${message.role === \"user\" ? \"justify-end\" : \"\"}`}\n                  data-testid={`message-${message.role}-${index}`}\n                >\n                  {message.role === \"assistant\" && (\n                    <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center flex-shrink-0\">\n                      <Bot className=\"h-4 w-4 text-primary\" />\n                    </div>\n                  )}\n                  <div\n                    className={`rounded-2xl p-3 max-w-64 ${\n                      message.role === \"user\"\n                        ? \"bg-primary text-primary-foreground rounded-tr-md\"\n                        : \"bg-muted rounded-tl-md\"\n                    }`}\n                  >\n                    <p className=\"text-sm\">{message.content}</p>\n                    {message.buttons && (\n                      <div className=\"mt-3 flex flex-wrap gap-2\">\n                        {message.buttons.map((button, btnIndex) => (\n                          <Button\n                            key={btnIndex}\n                            size=\"sm\"\n                            variant=\"outline\"\n                            className=\"text-xs h-8\"\n                            onClick={() => handleButtonClick(button.value)}\n                          >\n                            {button.text}\n                          </Button>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                  {message.role === \"user\" && (\n                    <div className=\"w-8 h-8 bg-muted rounded-full flex items-center justify-center flex-shrink-0\">\n                      <User className=\"h-4 w-4 text-muted-foreground\" />\n                    </div>\n                  )}\n                </div>\n              ))}\n              {isLoading && (\n                <div className=\"flex gap-3\">\n                  <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center flex-shrink-0\">\n                    <Bot className=\"h-4 w-4 text-primary\" />\n                  </div>\n                  <div className=\"bg-muted rounded-2xl rounded-tl-md p-3 max-w-64\">\n                    <div className=\"flex space-x-1\">\n                      <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\"></div>\n                      <div\n                        className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\"\n                        style={{ animationDelay: \"0.1s\" }}\n                      ></div>\n                      <div\n                        className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\"\n                        style={{ animationDelay: \"0.2s\" }}\n                      ></div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Input */}\n            {(currentStep === \"name\" || currentStep === \"email\" || currentStep === \"phone\") && (\n              <div className=\"p-4 border-t\">\n                <div className=\"flex gap-2\">\n                  <Input\n                    placeholder={\n                      currentStep === \"name\" ? \"Enter your name...\" :\n                      currentStep === \"email\" ? \"Enter your email...\" :\n                      \"Enter your phone number...\"\n                    }\n                    value={input}\n                    onChange={(e) => setInput(e.target.value)}\n                    onKeyPress={handleKeyPress}\n                    disabled={isLoading}\n                    data-testid=\"input-chat-message\"\n                  />\n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <Button\n                        onClick={sendMessage}\n                        disabled={!input.trim() || isLoading}\n                        size=\"sm\"\n                        className=\"bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white font-semibold shadow-md disabled:from-gray-400 disabled:to-gray-500\"\n                        data-testid=\"button-send-message\"\n                      >\n                        <Send className=\"h-4 w-4\" />\n                      </Button>\n                    </TooltipTrigger>\n                    <TooltipContent>\n                      <p>📤 Send your message to the AI!</p>\n                    </TooltipContent>\n                  </Tooltip>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":17025},"client/src/components/CookieConsent.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function CookieConsent() {\n  const [showBanner, setShowBanner] = useState(false);\n\n  useEffect(() => {\n    const consent = localStorage.getItem(\"cookie-consent\");\n    if (!consent) {\n      setShowBanner(true);\n    }\n  }, []);\n\n  const handleAccept = () => {\n    localStorage.setItem(\"cookie-consent\", \"accepted\");\n    setShowBanner(false);\n  };\n\n  const handleDecline = () => {\n    localStorage.setItem(\"cookie-consent\", \"declined\");\n    setShowBanner(false);\n  };\n\n  if (!showBanner) return null;\n\n  return (\n    <div className=\"fixed bottom-0 left-0 right-0 bg-gradient-to-r from-white to-gray-50 border-t border-gray-200 p-4 shadow-lg z-50\">\n      <div className=\"max-w-6xl mx-auto flex flex-col sm:flex-row items-center justify-between gap-4\">\n        <div className=\"text-sm text-gray-600\">\n          <p>\n            We use cookies to enhance your experience and analyze our traffic.{\" \"}\n            <a href=\"#\" className=\"text-primary hover:underline\">\n              Learn more\n            </a>\n          </p>\n        </div>\n        <div className=\"flex gap-3\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"bg-gradient-to-r from-red-100 to-red-200 text-red-700 hover:from-red-200 hover:to-red-300 hover:text-red-800 font-medium\"\n            onClick={handleDecline}\n            data-testid=\"button-decline-cookies\"\n          >\n            Decline\n          </Button>\n          <Button\n            size=\"sm\"\n            className=\"bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white font-semibold shadow-md\"\n            onClick={handleAccept}\n            data-testid=\"button-accept-cookies\"\n          >\n            Accept All\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1893},"client/src/components/NotificationCenter.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { \n  Bell, \n  X, \n  Trophy, \n  Star, \n  Target, \n  AlertTriangle, \n  Gift,\n  TrendingUp,\n  Users,\n  CheckCircle\n} from \"lucide-react\";\n\ninterface Notification {\n  id: string;\n  type: 'achievement' | 'alert' | 'reward' | 'milestone';\n  title: string;\n  message: string;\n  timestamp: Date;\n  read: boolean;\n  urgent?: boolean;\n}\n\ninterface NotificationCenterProps {\n  userRole: 'member' | 'staff';\n}\n\nexport function NotificationCenter({ userRole }: NotificationCenterProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [notifications, setNotifications] = useState<Notification[]>(() => {\n    // Mock notifications based on user role\n    if (userRole === 'member') {\n      return [\n        {\n          id: '1',\n          type: 'achievement',\n          title: 'Streak Milestone! 🎉',\n          message: 'You have completed a 7-day workout streak! Keep it up!',\n          timestamp: new Date(Date.now() - 10 * 60 * 1000),\n          read: false\n        },\n        {\n          id: '2',\n          type: 'reward',\n          title: 'Points Earned',\n          message: 'You earned 50 loyalty points from your last workout!',\n          timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),\n          read: false\n        },\n        {\n          id: '3',\n          type: 'milestone',\n          title: 'Monthly Goal Achieved!',\n          message: 'Congratulations! You have hit your monthly workout target of 20 sessions.',\n          timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000),\n          read: true\n        }\n      ];\n    } else {\n      return [\n        {\n          id: '1',\n          type: 'alert',\n          title: 'Member At Risk',\n          message: 'Member has not visited in 6 days. Consider outreach.',\n          timestamp: new Date(Date.now() - 30 * 60 * 1000),\n          read: false,\n          urgent: true\n        },\n        {\n          id: '2',\n          type: 'milestone',\n          title: 'Revenue Milestone',\n          message: 'Monthly revenue target exceeded by 12%! Great work team.',\n          timestamp: new Date(Date.now() - 60 * 60 * 1000),\n          read: false\n        },\n        {\n          id: '3',\n          type: 'alert',\n          title: 'Peak Hour Alert',\n          message: 'Gym capacity at 85% during 6-7 PM slot today.',\n          timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000),\n          read: false\n        }\n      ];\n    }\n  });\n\n  const unreadCount = notifications.filter(n => !n.read).length;\n\n  const getNotificationIcon = (type: Notification['type']) => {\n    switch (type) {\n      case 'achievement':\n        return <Trophy className=\"h-5 w-5 text-yellow-600\" />;\n      case 'reward':\n        return <Gift className=\"h-5 w-5 text-blue-600\" />;\n      case 'milestone':\n        return <Target className=\"h-5 w-5 text-green-600\" />;\n      case 'alert':\n        return <AlertTriangle className=\"h-5 w-5 text-red-600\" />;\n      default:\n        return <Bell className=\"h-5 w-5 text-gray-600\" />;\n    }\n  };\n\n  const markAsRead = (id: string) => {\n    setNotifications(prev => prev.map(n => \n      n.id === id ? { ...n, read: true } : n\n    ));\n  };\n\n  const markAllAsRead = () => {\n    setNotifications(prev => prev.map(n => ({ ...n, read: true })));\n  };\n\n  const removeNotification = (id: string) => {\n    setNotifications(prev => prev.filter(n => n.id !== id));\n  };\n\n  const formatTime = (timestamp: Date) => {\n    const now = new Date();\n    const diffMs = now.getTime() - timestamp.getTime();\n    const diffMins = Math.floor(diffMs / 60000);\n    const diffHours = Math.floor(diffMs / 3600000);\n    const diffDays = Math.floor(diffMs / 86400000);\n\n    if (diffMins < 60) return `${diffMins}m ago`;\n    if (diffHours < 24) return `${diffHours}h ago`;\n    return `${diffDays}d ago`;\n  };\n\n  return (\n    <div className=\"relative\">\n      {/* Notification Bell */}\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"relative\"\n        data-testid=\"button-notifications\"\n      >\n        <Bell className=\"h-5 w-5\" />\n        {unreadCount > 0 && (\n          <span className=\"absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center\">\n            {unreadCount > 9 ? '9+' : unreadCount}\n          </span>\n        )}\n      </Button>\n\n      {/* Notification Panel */}\n      {isOpen && (\n        <div className=\"absolute right-0 top-12 w-80 bg-gradient-to-br from-white to-gray-50 rounded-lg shadow-xl border border-gray-200 z-50\">\n          <Card className=\"border-0 shadow-none\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-lg\">\n                  {userRole === 'member' ? 'Your Achievements' : 'Staff Alerts'}\n                </CardTitle>\n                <div className=\"flex items-center gap-2\">\n                  {unreadCount > 0 && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={markAllAsRead}\n                      className=\"text-xs bg-gradient-to-r from-blue-100 to-purple-100 text-blue-700 hover:from-blue-200 hover:to-purple-200 hover:text-blue-800 font-medium\"\n                    >\n                      Mark all read\n                    </Button>\n                  )}\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => setIsOpen(false)}\n                    className=\"bg-gradient-to-r from-red-100 to-red-200 text-red-700 hover:from-red-200 hover:to-red-300 hover:text-red-800 font-medium\"\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent className=\"pt-0\">\n              {notifications.length === 0 ? (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <Bell className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                  <p>No notifications yet</p>\n                </div>\n              ) : (\n                <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                  {notifications.map((notification) => (\n                    <div\n                      key={notification.id}\n                      className={`p-3 rounded-lg border transition-all cursor-pointer ${\n                        !notification.read \n                          ? notification.urgent \n                            ? 'bg-red-50 border-red-200' \n                            : 'bg-blue-50 border-blue-200'\n                          : 'bg-gray-50 border-gray-200'\n                      }`}\n                      onClick={() => markAsRead(notification.id)}\n                      data-testid={`notification-${notification.id}`}\n                    >\n                      <div className=\"flex items-start gap-3\">\n                        <div className=\"flex-shrink-0 mt-0.5\">\n                          {getNotificationIcon(notification.type)}\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-start justify-between\">\n                            <h4 className={`text-sm font-semibold ${\n                              !notification.read ? 'text-gray-900' : 'text-gray-700'\n                            }`}>\n                              {notification.title}\n                            </h4>\n                            <div className=\"flex items-center gap-1 ml-2\">\n                              <span className=\"text-xs text-gray-500\">\n                                {formatTime(notification.timestamp)}\n                              </span>\n                              {!notification.read && (\n                                <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                              )}\n                            </div>\n                          </div>\n                          <p className={`text-xs mt-1 ${\n                            !notification.read ? 'text-gray-700' : 'text-gray-600'\n                          }`}>\n                            {notification.message}\n                          </p>\n                        </div>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            removeNotification(notification.id);\n                          }}\n                          className=\"flex-shrink-0 p-1 h-6 w-6 bg-gradient-to-r from-red-100 to-red-200 text-red-600 hover:from-red-200 hover:to-red-300 hover:text-red-700\"\n                        >\n                          <X className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Backdrop */}\n      {isOpen && (\n        <div\n          className=\"fixed inset-0 z-40\"\n          onClick={() => setIsOpen(false)}\n        />\n      )}\n    </div>\n  );\n}","size_bytes":9374},"client/src/components/ProtectedRoute.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuthContext } from \"@/contexts/AuthContext\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n  requiredRole?: \"member\" | \"staff\";\n}\n\nexport function ProtectedRoute({ children, requiredRole }: ProtectedRouteProps) {\n  const { user, isLoading, isAuthenticated } = useAuthContext();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n\n    if (!isLoading && isAuthenticated && requiredRole && user?.role !== requiredRole) {\n      toast({\n        title: \"Access Denied\",\n        description: `${requiredRole} access required`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, requiredRole, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || (requiredRole && user?.role !== requiredRole)) {\n    return null;\n  }\n\n  return <>{children}</>;\n}\n","size_bytes":1399},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useState, useEffect } from \"react\";\nimport type { User } from \"@shared/schema\";\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  login: (user: User) => void;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check localStorage for user session on mount\n    try {\n      const storedUser = localStorage.getItem(\"user\");\n      if (storedUser) {\n        setUser(JSON.parse(storedUser));\n      }\n    } catch (error) {\n      console.error(\"Error parsing stored user:\", error);\n      localStorage.removeItem(\"user\");\n    }\n    setIsLoading(false);\n  }, []);\n\n  const login = (userData: User) => {\n    setUser(userData);\n    localStorage.setItem(\"user\", JSON.stringify(userData));\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem(\"user\");\n  };\n\n  return (\n    <AuthContext.Provider value={{ \n      user, \n      isLoading, \n      isAuthenticated: !!user, \n      login, \n      logout \n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuthContext() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuthContext must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":1524},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useState, useEffect } from \"react\";\n\nexport function useAuth() {\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check localStorage for user session\n    try {\n      const storedUser = localStorage.getItem(\"user\");\n      if (storedUser) {\n        setUser(JSON.parse(storedUser));\n      }\n    } catch (error) {\n      console.error(\"Error parsing stored user:\", error);\n      localStorage.removeItem(\"user\");\n    }\n    setIsLoading(false);\n  }, []);\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":603},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/ChurnPrediction.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Users, \n  AlertTriangle, \n  TrendingDown, \n  Phone,\n  Sparkles,\n  FileText\n} from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useAuthContext } from \"@/contexts/AuthContext\";\nimport type { User, OutreachAction } from \"@shared/schema\";\n\nexport function ChurnPrediction() {\n  const [selectedMember, setSelectedMember] = useState<User | null>(null);\n  const [retentionStrategies, setRetentionStrategies] = useState<string>(\"\");\n  const [actionType, setActionType] = useState(\"call\");\n  const [actionNotes, setActionNotes] = useState(\"\");\n  const { user: currentUser } = useAuthContext();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: metrics, isLoading: metricsLoading } = useQuery({\n    queryKey: [\"/api/staff/metrics\"],\n    retry: false,\n  });\n\n  const { data: atRiskMembers = [], isLoading: membersLoading } = useQuery({\n    queryKey: [\"/api/staff/at-risk-members\"],\n    retry: false,\n  });\n\n  const { data: outreachHistory = [] } = useQuery({\n    queryKey: [\"/api/staff/member\", selectedMember?.id, \"outreach-history\"],\n    enabled: !!selectedMember?.id,\n    retry: false,\n  });\n\n  const generateStrategiesMutation = useMutation({\n    mutationFn: async (memberProfile: any) => {\n      const response = await apiRequest(\"POST\", \"/api/ai/retention-strategies\", {\n        memberProfile,\n      });\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      setRetentionStrategies(data.strategies);\n      toast({\n        title: \"Strategies Generated\",\n        description: \"AI has created personalized retention strategies.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate retention strategies.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logActionMutation = useMutation({\n    mutationFn: async (actionData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/staff/outreach-action\", actionData);\n      return await response.json();\n    },\n    onSuccess: () => {\n      setActionNotes(\"\");\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/staff/member\", selectedMember?.id, \"outreach-history\"] \n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/staff/metrics\"] });\n      toast({\n        title: \"Action Logged\",\n        description: \"Outreach action has been recorded.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to log outreach action.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGenerateStrategies = () => {\n    if (!selectedMember) return;\n\n    const memberProfile = {\n      name: `${selectedMember.firstName} ${selectedMember.lastName}`,\n      membershipType: selectedMember.membershipType,\n      joinDate: selectedMember.joinDate ? new Date(selectedMember.joinDate).toLocaleDateString() : \"Unknown\",\n      lastVisit: selectedMember.lastVisit ? new Date(selectedMember.lastVisit).toLocaleDateString() : \"Never\",\n      avgVisits: Math.floor(Math.random() * 15) + 5, // Mock data for demo\n      churnRisk: \"89%\", // Mock data for demo\n      feedback: \"Finds it too crowded\", // Mock data for demo\n    };\n\n    generateStrategiesMutation.mutate(memberProfile);\n  };\n\n  const handleLogAction = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!selectedMember || !actionNotes.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please select a member and enter action notes.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    logActionMutation.mutate({\n      memberId: selectedMember.id,\n      actionType,\n      notes: actionNotes.trim(),\n    });\n  };\n\n  const getRiskLevel = (member: User) => {\n    if (!member.lastVisit) return { level: \"high\", color: \"bg-red-500\", percentage: 95 };\n    \n    const daysSinceLastVisit = Math.floor(\n      (Date.now() - new Date(member.lastVisit).getTime()) / (1000 * 60 * 60 * 24)\n    );\n    \n    if (daysSinceLastVisit > 10) return { level: \"high\", color: \"bg-red-500\", percentage: 89 };\n    if (daysSinceLastVisit > 7) return { level: \"medium\", color: \"bg-orange-500\", percentage: 76 };\n    return { level: \"low\", color: \"bg-yellow-500\", percentage: 65 };\n  };\n\n  const getActionIcon = (actionType: string) => {\n    switch (actionType) {\n      case \"call\": return \"📞\";\n      case \"email\": return \"📧\";\n      case \"in-person\": return \"👥\";\n      case \"offer\": return \"🎁\";\n      default: return \"📝\";\n    }\n  };\n\n  if (metricsLoading || membersLoading) {\n    return (\n      <div className=\"p-8\">\n        <div className=\"grid md:grid-cols-4 gap-6 mb-8\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-16 bg-gray-200 rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-12\">\n        <div className=\"max-w-6xl mx-auto text-center\">\n          <span className=\"inline-block px-4 py-2 bg-red-600 text-white text-sm font-bold uppercase tracking-wider rounded-full mb-4\">\n            AI Insights\n          </span>\n          <h1 className=\"text-4xl lg:text-6xl font-black tracking-tight text-gray-900 leading-tight mb-6\">\n            CHURN{\" \"}\n            <span className=\"text-red-600 block\">PREDICTION</span>\n          </h1>\n          <p className=\"text-xl text-gray-700 leading-relaxed mb-8 max-w-2xl mx-auto\">\n            Identify and retain at-risk members with AI-powered insights\n          </p>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid md:grid-cols-4 gap-6 mb-8\">\n        <Card className=\"border border-slate-200/60 shadow-sm hover:shadow-md transition-all duration-300\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"w-12 h-12 bg-blue-100 rounded-xl flex items-center justify-center\">\n                <Users className=\"text-blue-600 h-6 w-6\" />\n              </div>\n              <div>\n                <h3 className=\"text-xs font-semibold uppercase tracking-wider text-slate-500\">Total Members</h3>\n                <p className=\"text-3xl font-bold text-slate-900\" data-testid=\"text-total-members\">\n                  {(metrics as any)?.totalMembers || 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border border-slate-200/60 shadow-sm hover:shadow-md transition-all duration-300\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"w-12 h-12 bg-orange-100 rounded-xl flex items-center justify-center\">\n                <AlertTriangle className=\"text-orange-600 h-6 w-6\" />\n              </div>\n              <div>\n                <h3 className=\"text-xs font-semibold uppercase tracking-wider text-slate-500\">At-Risk Members</h3>\n                <p className=\"text-3xl font-bold text-orange-600\" data-testid=\"text-at-risk-members\">\n                  {(metrics as any)?.atRiskMembers || 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border border-slate-200/60 shadow-sm hover:shadow-md transition-all duration-300\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"w-12 h-12 bg-red-100 rounded-xl flex items-center justify-center\">\n                <TrendingDown className=\"text-red-600 h-6 w-6\" />\n              </div>\n              <div>\n                <h3 className=\"text-xs font-semibold uppercase tracking-wider text-slate-500\">Churn Rate</h3>\n                <p className=\"text-3xl font-bold text-red-600\" data-testid=\"text-churn-rate\">\n                  {(metrics as any)?.churnRate || \"0%\"}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border border-slate-200/60 shadow-sm hover:shadow-md transition-all duration-300\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"w-12 h-12 bg-green-100 rounded-xl flex items-center justify-center\">\n                <Phone className=\"text-green-600 h-6 w-6\" />\n              </div>\n              <div>\n                <h3 className=\"text-xs font-semibold uppercase tracking-wider text-slate-500\">Outreach Today</h3>\n                <p className=\"text-3xl font-bold text-green-600\" data-testid=\"text-outreach-today\">\n                  {(metrics as any)?.outreachToday || 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid lg:grid-cols-3 gap-8\">\n        {/* At-Risk Members List */}\n        <div className=\"lg:col-span-1\">\n          <Card className=\"border border-slate-200/60 shadow-sm hover:shadow-md transition-all duration-300\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg font-semibold text-slate-900\">High-Risk Members</CardTitle>\n              <p className=\"text-slate-600 text-sm leading-relaxed\">Sorted by churn probability</p>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              <div className=\"max-h-96 overflow-y-auto\">\n                {(atRiskMembers as User[]).length === 0 ? (\n                  <div className=\"p-6 text-center text-gray-500\">\n                    <AlertTriangle className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                    <p>No at-risk members found</p>\n                  </div>\n                ) : (\n                  (atRiskMembers as User[]).map((member: User, index: number) => {\n                    const risk = getRiskLevel(member);\n                    const isSelected = selectedMember?.id === member.id;\n                    \n                    return (\n                      <div\n                        key={member.id}\n                        onClick={() => setSelectedMember(member)}\n                        className={`p-4 border-b border-gray-100 hover:bg-gray-50 cursor-pointer transition-colors ${\n                          isSelected ? 'bg-blue-50 border-blue-200' : ''\n                        }`}\n                        data-testid={`member-${index}`}\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <h3 className=\"font-semibold text-gray-900\">\n                              {member.firstName} {member.lastName}\n                            </h3>\n                            <p className=\"text-sm text-gray-600 capitalize\">\n                              {member.membershipType} Member • {\n                                member.joinDate \n                                  ? Math.floor((Date.now() - new Date(member.joinDate).getTime()) / (1000 * 60 * 60 * 24 * 30))\n                                  : 0\n                              } months\n                            </p>\n                            <p className=\"text-xs text-orange-600 mt-1\">\n                              Risk: {risk.percentage}% • Last visit: {\n                                member.lastVisit \n                                  ? Math.floor((Date.now() - new Date(member.lastVisit).getTime()) / (1000 * 60 * 60 * 24)) + \" days ago\"\n                                  : \"Never\"\n                              }\n                            </p>\n                          </div>\n                          <div className={`w-3 h-3 ${risk.color} rounded-full`}></div>\n                        </div>\n                      </div>\n                    );\n                  })\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Member Details & Actions */}\n        <div className=\"lg:col-span-2\">\n          <Card className=\"border border-slate-200/60 shadow-sm hover:shadow-md transition-all duration-300\">\n            {selectedMember ? (\n              <>\n                {/* Selected Member Profile */}\n                <CardHeader className=\"border-b\">\n                  <div className=\"flex items-start gap-6\">\n                    <div className=\"w-16 h-16 bg-gray-300 rounded-full flex items-center justify-center text-gray-600 font-semibold text-xl\">\n                      {selectedMember.firstName?.[0]}{selectedMember.lastName?.[0]}\n                    </div>\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-2xl mb-2\">\n                        {selectedMember.firstName} {selectedMember.lastName}\n                      </CardTitle>\n                      <div className=\"grid md:grid-cols-2 gap-4 text-sm\">\n                        <div>\n                          <p className=\"text-gray-600\">\n                            Membership: <span className=\"font-medium text-gray-900 capitalize\">\n                              {selectedMember.membershipType}\n                            </span>\n                          </p>\n                          <p className=\"text-gray-600\">\n                            Member since: <span className=\"font-medium text-gray-900\">\n                              {selectedMember.joinDate ? new Date(selectedMember.joinDate).toLocaleDateString() : \"Unknown\"}\n                            </span>\n                          </p>\n                          <p className=\"text-gray-600\">\n                            Last visit: <span className=\"font-medium text-gray-900\">\n                              {selectedMember.lastVisit \n                                ? Math.floor((Date.now() - new Date(selectedMember.lastVisit).getTime()) / (1000 * 60 * 60 * 24)) + \" days ago\"\n                                : \"Never\"\n                              }\n                            </span>\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"text-gray-600\">\n                            Churn risk: <span className=\"font-medium text-red-600\">\n                              {getRiskLevel(selectedMember).percentage}%\n                            </span>\n                          </p>\n                          <p className=\"text-gray-600\">\n                            Loyalty points: <span className=\"font-medium text-gray-900\">\n                              {selectedMember.loyaltyPoints}\n                            </span>\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardHeader>\n\n                <CardContent className=\"p-6\">\n                  {/* AI Retention Strategies */}\n                  <div className=\"mb-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <h3 className=\"text-lg font-semibold text-gray-900\">AI Retention Strategies</h3>\n                      <Button\n                        onClick={handleGenerateStrategies}\n                        disabled={generateStrategiesMutation.isPending}\n                        className=\"flex items-center gap-2\"\n                        data-testid=\"button-generate-strategies\"\n                      >\n                        <Sparkles className=\"h-4 w-4\" />\n                        {generateStrategiesMutation.isPending ? \"Generating...\" : \"Generate Strategies\"}\n                      </Button>\n                    </div>\n\n                    {generateStrategiesMutation.isPending ? (\n                      <div className=\"p-4 bg-gray-50 rounded-lg text-center\">\n                        <div className=\"inline-block animate-spin rounded-full h-6 w-6 border-b-2 border-primary mb-2\"></div>\n                        <p className=\"text-sm text-gray-600\">AI is analyzing member profile and generating strategies...</p>\n                      </div>\n                    ) : retentionStrategies ? (\n                      <div \n                        className=\"bg-gray-50 rounded-lg p-4 prose prose-sm max-w-none\"\n                        dangerouslySetInnerHTML={{ __html: retentionStrategies.replace(/\\n/g, '<br>') }}\n                        data-testid=\"retention-strategies-content\"\n                      />\n                    ) : (\n                      <div className=\"p-4 bg-gray-50 rounded-lg text-center text-gray-500\">\n                        Click \"Generate Strategies\" to get AI-powered retention recommendations\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Staff Action Logging */}\n                  <div className=\"grid md:grid-cols-2 gap-6\">\n                    <div>\n                      <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">✍️ Log Staff Outreach</h3>\n                      <form onSubmit={handleLogAction} className=\"space-y-4\">\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Action Type</label>\n                          <Select value={actionType} onValueChange={setActionType}>\n                            <SelectTrigger data-testid=\"select-action-type\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"call\">Phone Call</SelectItem>\n                              <SelectItem value=\"email\">Email</SelectItem>\n                              <SelectItem value=\"in-person\">In-Person Meeting</SelectItem>\n                              <SelectItem value=\"offer\">Special Offer</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Notes</label>\n                          <Textarea\n                            placeholder=\"Describe the action taken and member response...\"\n                            value={actionNotes}\n                            onChange={(e) => setActionNotes(e.target.value)}\n                            className=\"h-24\"\n                            data-testid=\"textarea-action-notes\"\n                          />\n                        </div>\n                        <Button\n                          type=\"submit\"\n                          disabled={logActionMutation.isPending || !actionNotes.trim()}\n                          className=\"w-full bg-green-600 hover:bg-green-700\"\n                          data-testid=\"button-log-action\"\n                        >\n                          {logActionMutation.isPending ? \"Logging...\" : \"Log Action\"}\n                        </Button>\n                      </form>\n                    </div>\n\n                    <div>\n                      <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">📜 Outreach History</h3>\n                      <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n                        {(outreachHistory as OutreachAction[]).length === 0 ? (\n                          <div className=\"text-center text-gray-500 py-4\">\n                            <FileText className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                            <p>No outreach history found</p>\n                          </div>\n                        ) : (\n                          (outreachHistory as (OutreachAction & { staffName?: string })[]).map((action: OutreachAction & { staffName?: string }, index: number) => (\n                            <div key={action.id} className=\"bg-gray-50 p-3 rounded-lg\" data-testid={`outreach-${index}`}>\n                              <div className=\"flex items-center justify-between mb-2\">\n                                <span className=\"text-sm font-medium text-gray-900\">\n                                  {getActionIcon(action.actionType)} {action.actionType.charAt(0).toUpperCase() + action.actionType.slice(1)}\n                                </span>\n                                <span className=\"text-xs text-gray-500\">\n                                  {action.createdAt ? new Date(action.createdAt).toLocaleDateString() : \"Unknown\"}\n                                </span>\n                              </div>\n                              <p className=\"text-sm text-gray-700\">{action.notes}</p>\n                              <p className=\"text-xs text-gray-500 mt-1\">\n                                by {action.staffName || currentUser?.firstName + ' ' + currentUser?.lastName || 'Staff'}\n                              </p>\n                            </div>\n                          ))\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </>\n            ) : (\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"text-gray-500\">\n                  <Users className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">Select a Member</h3>\n                  <p>Choose a member from the at-risk list to view details and manage retention efforts.</p>\n                </div>\n              </CardContent>\n            )}\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":22666},"client/src/pages/LandingPage.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  Dumbbell,\n  Brain,\n  Gift,\n  TrendingUp,\n  Users,\n  Heart,\n  Facebook,\n  Instagram,\n  Twitter,\n  MapPin,\n  Phone,\n  Mail,\n  Check,\n  Star,\n  Award,\n  Target,\n  Clock,\n  Quote,\n  Zap,\n  Shield,\n  Sparkles,\n  ArrowRight,\n  PlayCircle,\n  MessageCircle,\n  Trophy,\n  Rocket,\n} from \"lucide-react\";\nimport { ChatBot } from \"@/components/ChatBot\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nexport function LandingPage() {\n  const handleGetStarted = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  const handleBookTour = () => {\n    window.scrollTo({ top: document.body.scrollHeight, behavior: \"smooth\" });\n  };\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Enhanced Header - Virgin Active Style */}\n      <header className=\"bg-white backdrop-blur-lg border-b border-gray-100 sticky top-0 z-50 shadow-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-20\">\n            <div className=\"flex items-center gap-4\">\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <div className=\"w-12 h-12 bg-red-600 rounded-lg flex items-center justify-center cursor-pointer transform hover:scale-110 transition-all duration-300 shadow-md\">\n                    <Dumbbell className=\"text-white h-6 w-6\" />\n                  </div>\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>Your premium fitness destination</p>\n                </TooltipContent>\n              </Tooltip>\n              <div className=\"flex flex-col\">\n                <span className=\"text-2xl font-black text-red-600 tracking-tight\">\n                  Member Buddy\n                </span>\n                <span className=\"text-xs text-gray-500 font-medium tracking-wider uppercase\">\n                  Real Wellness\n                </span>\n              </div>\n            </div>\n            <nav className=\"hidden md:flex items-center gap-8\">\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <a\n                    href=\"#features\"\n                    className=\"text-gray-700 hover:text-red-600 transition-all duration-300 font-medium relative group text-sm uppercase tracking-wide\"\n                  >\n                    CLUB FEATURES\n                    <span className=\"absolute -bottom-1 left-0 w-0 h-0.5 bg-red-600 group-hover:w-full transition-all duration-300\"></span>\n                  </a>\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>Discover our world-class facilities</p>\n                </TooltipContent>\n              </Tooltip>\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <a\n                    href=\"#pricing\"\n                    className=\"text-gray-700 hover:text-red-600 transition-all duration-300 font-medium relative group text-sm uppercase tracking-wide\"\n                  >\n                    MEMBERSHIP\n                    <span className=\"absolute -bottom-1 left-0 w-0 h-0.5 bg-red-600 group-hover:w-full transition-all duration-300\"></span>\n                  </a>\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>Find your perfect membership plan</p>\n                </TooltipContent>\n              </Tooltip>\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <a\n                    href=\"#success\"\n                    className=\"text-gray-700 hover:text-red-600 transition-all duration-300 font-medium relative group text-sm uppercase tracking-wide\"\n                  >\n                    SUCCESS STORIES\n                    <span className=\"absolute -bottom-1 left-0 w-0 h-0.5 bg-red-600 group-hover:w-full transition-all duration-300\"></span>\n                  </a>\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>See amazing member transformations</p>\n                </TooltipContent>\n              </Tooltip>\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <a\n                    href=\"#contact\"\n                    className=\"text-gray-700 hover:text-red-600 transition-all duration-300 font-medium relative group text-sm uppercase tracking-wide\"\n                  >\n                    CONTACT\n                    <span className=\"absolute -bottom-1 left-0 w-0 h-0.5 bg-red-600 group-hover:w-full transition-all duration-300\"></span>\n                  </a>\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>Get in touch with our team</p>\n                </TooltipContent>\n              </Tooltip>\n            </nav>\n            <div className=\"flex items-center gap-4\">\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    className=\"text-gray-700 hover:text-red-600 hover:bg-red-50 font-medium transition-all duration-300 text-sm uppercase tracking-wide\"\n                    onClick={handleGetStarted}\n                    data-testid=\"button-sign-in\"\n                  >\n                    LOG IN\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>Access your member account</p>\n                </TooltipContent>\n              </Tooltip>\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button\n                    className=\"bg-red-600 hover:bg-red-700 text-white font-bold shadow-md transform hover:scale-105 transition-all duration-300 text-sm uppercase tracking-wide\"\n                    onClick={handleGetStarted}\n                    data-testid=\"button-get-started\"\n                  >\n                    JOIN NOW\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>Start your fitness journey today</p>\n                </TooltipContent>\n              </Tooltip>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section - Virgin Active Style */}\n      <section className=\"relative bg-white py-16 lg:py-24 overflow-hidden\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid lg:grid-cols-2 gap-12 lg:gap-16 items-center\">\n            <div className=\"text-center lg:text-left relative z-10\">\n              <div className=\"flex items-center justify-center lg:justify-start gap-3 mb-8\">\n                <div className=\"px-6 py-2 bg-red-100 border border-red-200 rounded-full\">\n                  <span className=\"text-red-700 font-bold text-sm tracking-wider uppercase\">\n                    <Sparkles className=\"w-4 h-4 inline mr-2\" />\n                    Premium Experience\n                  </span>\n                </div>\n              </div>\n              <h1 className=\"text-4xl md:text-5xl lg:text-6xl font-black text-gray-900 mb-8 leading-tight\">\n                WELCOME TO{\" \"}\n                <span className=\"text-red-600 block\">REAL WELLNESS</span>\n                <span className=\"block text-3xl md:text-4xl lg:text-5xl mt-2 text-gray-600 font-bold\">\n                  One membership. Endless variety.\n                </span>\n              </h1>\n              <div className=\"space-y-4 mb-10 text-left max-w-2xl mx-auto lg:mx-0\">\n                <p className=\"text-lg md:text-xl text-gray-700 leading-relaxed font-medium\">\n                  <span className=\"text-gray-900 font-bold\">Real rewards:</span>{\" \"}\n                  instant goodies from Kauai & Mother plus partner discounts\n                </p>\n                <p className=\"text-lg md:text-xl text-gray-700 leading-relaxed font-medium\">\n                  <span className=\"text-gray-900 font-bold\">\n                    Real endorphins:\n                  </span>{\" \"}\n                  spacious gym floors & unlimited exercise classes\n                </p>\n                <p className=\"text-lg md:text-xl text-gray-700 leading-relaxed font-medium\">\n                  <span className=\"text-gray-900 font-bold\">\n                    Real relaxation:\n                  </span>{\" \"}\n                  pools, saunas & steam rooms\n                </p>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row gap-6 justify-center lg:justify-start mb-12\">\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <Button\n                      size=\"lg\"\n                      onClick={handleGetStarted}\n                      className=\"bg-red-600 hover:bg-red-700 text-white font-bold text-lg px-8 py-4 transform hover:scale-105 transition-all duration-300 shadow-lg rounded-lg uppercase tracking-wide\"\n                      data-testid=\"button-start-free-trial\"\n                    >\n                      JOIN THE CLUB\n                    </Button>\n                  </TooltipTrigger>\n                  <TooltipContent>\n                    <p>Start your membership today</p>\n                  </TooltipContent>\n                </Tooltip>\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      size=\"lg\"\n                      className=\"border-2 border-red-600 text-red-600 hover:bg-red-600 hover:text-white font-bold text-lg px-8 py-4 transition-all duration-300 shadow-md uppercase tracking-wide\"\n                      onClick={handleBookTour}\n                      data-testid=\"button-book-tour\"\n                    >\n                      <PlayCircle className=\"w-5 h-5 mr-3\" />\n                      BOOK A TOUR\n                    </Button>\n                  </TooltipTrigger>\n                  <TooltipContent>\n                    <p>Visit our club and see the facilities</p>\n                  </TooltipContent>\n                </Tooltip>\n              </div>\n\n              {/* Trust Indicators */}\n              <div className=\"flex flex-col sm:flex-row items-center justify-center lg:justify-start gap-8 text-gray-600\">\n                <div className=\"flex items-center gap-2\">\n                  <Shield className=\"w-5 h-5 text-red-600\" />\n                  <span className=\"font-medium text-gray-800\">\n                    Pay Nothing Until October*\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Star className=\"w-5 h-5 text-red-600\" />\n                  <span className=\"font-medium text-gray-800\">\n                    4.9/5 Member Rating\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Users className=\"w-5 h-5 text-red-600\" />\n                  <span className=\"font-medium text-gray-800\">\n                    50+ Premium Clubs\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"relative z-10\">\n              <div className=\"relative group\">\n                <img\n                  src=\"https://images.unsplash.com/photo-1583454110551-21f2fa2afe61?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&h=600\"\n                  alt=\"Modern gym interior with high-tech equipment\"\n                  className=\"rounded-2xl shadow-2xl w-full transform group-hover:scale-105 transition-all duration-500\"\n                />\n\n                {/* AI Status Card */}\n                <div className=\"absolute -bottom-6 -left-6 bg-white/95 backdrop-blur-sm p-6 rounded-xl shadow-2xl border border-gray-200\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"w-14 h-14 bg-gradient-to-br from-red-500 to-red-600 rounded-xl flex items-center justify-center shadow-lg\">\n                      <Brain className=\"text-white h-7 w-7\" />\n                    </div>\n                    <div>\n                      <p className=\"font-bold text-gray-900 text-lg\">\n                        AI Coach Active\n                      </p>\n                      <p className=\"text-gray-600 font-medium flex items-center gap-2\">\n                        <Zap className=\"w-4 h-4\" />\n                        Analyzing your fitness data\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Achievement Badge */}\n                <div className=\"absolute -top-4 -right-4 bg-gradient-to-br from-red-500 to-red-600 text-white p-4 rounded-xl shadow-xl transform rotate-6 hover:rotate-0 transition-all duration-300\">\n                  <div className=\"flex items-center gap-2\">\n                    <Trophy className=\"w-6 h-6\" />\n                    <div>\n                      <p className=\"font-bold text-sm\">89% Success</p>\n                      <p className=\"text-xs opacity-90\">Goal Achievement</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section id=\"features\" className=\"py-20 lg:py-24 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-20\">\n            <div className=\"inline-flex items-center gap-3 px-6 py-3 bg-red-100 border border-red-200 rounded-full mb-8\">\n              <Sparkles className=\"w-5 h-5 text-red-600\" />\n              <span className=\"text-red-700 font-bold text-sm tracking-wider uppercase\">\n                World-Class Facilities\n              </span>\n            </div>\n            <h2 className=\"text-4xl md:text-5xl font-black text-gray-900 mb-8 leading-tight\">\n              Where Fitness Meets{\" \"}\n              <span className=\"text-red-600\">Excellence</span>\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-4xl mx-auto leading-relaxed font-medium\">\n              Experience the ultimate in fitness luxury with our premium\n              facilities and expert guidance.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {[\n              {\n                icon: Brain,\n                title: \"Personal Training\",\n                description:\n                  \"Work with certified personal trainers who create customized programs tailored to your specific goals and fitness level.\",\n                gradient: \"from-red-500 to-red-600\",\n                bgGradient: \"from-red-50 to-red-100\",\n              },\n              {\n                icon: Users,\n                title: \"Group Classes\",\n                description:\n                  \"Join energizing group fitness classes led by expert instructors in our spacious, fully-equipped studios.\",\n                gradient: \"from-gray-700 to-gray-800\",\n                bgGradient: \"from-gray-50 to-gray-100\",\n              },\n              {\n                icon: Dumbbell,\n                title: \"Premium Equipment\",\n                description:\n                  \"Train with the latest high-tech equipment and free weights in our expansive, climate-controlled gym floors.\",\n                gradient: \"from-red-500 to-red-600\",\n                bgGradient: \"from-red-50 to-red-100\",\n              },\n              {\n                icon: Heart,\n                title: \"Wellness & Spa\",\n                description:\n                  \"Relax and recover in our luxury spa facilities including pools, saunas, steam rooms, and treatment areas.\",\n                gradient: \"from-gray-700 to-gray-800\",\n                bgGradient: \"from-gray-50 to-gray-100\",\n              },\n              {\n                icon: Trophy,\n                title: \"Member Rewards\",\n                description:\n                  \"Enjoy exclusive member benefits including partner discounts, priority booking, and access to special events.\",\n                gradient: \"from-red-500 to-red-600\",\n                bgGradient: \"from-red-50 to-red-100\",\n              },\n              {\n                icon: Target,\n                title: \"Goal Achievement\",\n                description:\n                  \"Track your progress with regular assessments and celebrate milestones with our supportive member community.\",\n                gradient: \"from-gray-700 to-gray-800\",\n                bgGradient: \"from-gray-50 to-gray-100\",\n              },\n            ].map((feature, index) => (\n              <Card\n                key={index}\n                className=\"group bg-white/95 backdrop-blur-sm border border-slate-200/60 shadow-sm hover:border-red-300/60 hover:shadow-2xl transition-all duration-500 transform hover:scale-105 hover:-translate-y-2 overflow-hidden\"\n              >\n                <CardContent className=\"p-8\">\n                  <div\n                    className={`w-16 h-16 bg-gradient-to-br ${feature.bgGradient} rounded-xl flex items-center justify-center mb-6 shadow-sm group-hover:shadow-lg transition-all duration-300 group-hover:scale-110`}\n                  >\n                    <feature.icon\n                      className={`bg-gradient-to-br ${feature.gradient} bg-clip-text text-transparent h-8 w-8`}\n                      style={{\n                        WebkitBackgroundClip: \"text\",\n                        WebkitTextFillColor: \"transparent\",\n                      }}\n                    />\n                  </div>\n                  <h3 className=\"text-lg md:text-xl lg:text-2xl font-bold text-slate-900 mb-4 group-hover:text-red-600 transition-colors duration-300\">\n                    {feature.title}\n                  </h3>\n                  <p className=\"text-slate-600 text-sm md:text-base leading-relaxed font-medium group-hover:text-slate-700 transition-colors duration-300\">\n                    {feature.description}\n                  </p>\n\n                  <div className=\"mt-6 flex items-center text-gray-400 group-hover:text-red-600 transition-all duration-300\">\n                    <span className=\"text-sm font-medium mr-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300 uppercase tracking-wide\">\n                      Learn more\n                    </span>\n                    <ArrowRight className=\"w-4 h-4 transform translate-x-0 group-hover:translate-x-1 transition-transform duration-300\" />\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Facility Showcase */}\n          <div className=\"mt-24\">\n            <div className=\"text-center mb-16\">\n              <h3 className=\"text-3xl md:text-4xl font-black text-gray-900 mb-6\">\n                Experience Our{\" \"}\n                <span className=\"text-red-600\">Premium Facilities</span>\n              </h3>\n              <p className=\"text-xl text-gray-600 font-medium max-w-2xl mx-auto\">\n                State-of-the-art equipment and spaces designed for your success\n              </p>\n            </div>\n\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {[\n                {\n                  image:\n                    \"https://images.unsplash.com/photo-1534438327276-14e5300c3a48?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=600&h=400\",\n                  title: \"Cardio Zone\",\n                  description:\n                    \"Latest cardio equipment with entertainment systems\",\n                },\n                {\n                  image:\n                    \"https://images.unsplash.com/photo-1583454110551-21f2fa2afe61?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=600&h=400\",\n                  title: \"Strength Training\",\n                  description: \"Premium free weights and resistance machines\",\n                },\n                {\n                  image:\n                    \"https://images.unsplash.com/photo-1518611012118-696072aa579a?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=600&h=400\",\n                  title: \"Group Studios\",\n                  description: \"Spacious studios for all your favorite classes\",\n                },\n              ].map((facility, index) => (\n                <div\n                  key={index}\n                  className=\"group relative overflow-hidden rounded-xl shadow-lg hover:shadow-2xl transition-all duration-500 transform hover:scale-105\"\n                >\n                  <img\n                    src={facility.image}\n                    alt={facility.title}\n                    className=\"w-full h-64 object-cover group-hover:scale-110 transition-transform duration-500\"\n                  />\n                  <div className=\"absolute inset-0 bg-gradient-to-t from-black/80 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n                  <div className=\"absolute bottom-6 left-6 text-white opacity-0 group-hover:opacity-100 transition-all duration-300 transform translate-y-4 group-hover:translate-y-0\">\n                    <h4 className=\"text-xl font-bold mb-2\">{facility.title}</h4>\n                    <p className=\"text-sm text-gray-200\">\n                      {facility.description}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Section */}\n      <section id=\"pricing\" className=\"py-20 lg:py-24 bg-white\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-20\">\n            <h2 className=\"text-4xl md:text-5xl font-black text-gray-900 mb-6\">\n              Choose Your Membership\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed font-medium\">\n              Flexible plans designed to fit your lifestyle and fitness goals\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-3 gap-8 max-w-5xl mx-auto\">\n            {/* Basic Plan */}\n            <Card className=\"bg-white/95 backdrop-blur-sm border border-slate-200/60 shadow-sm hover:border-red-300/60 hover:shadow-xl transition-all duration-300\">\n              <CardContent className=\"p-8\">\n                <div className=\"text-center mb-8\">\n                  <h3 className=\"text-xl md:text-2xl font-bold text-slate-900 mb-3 uppercase tracking-wide\">\n                    Basic\n                  </h3>\n                  <p className=\"text-slate-600 mb-6 font-medium leading-relaxed\">\n                    Perfect for getting started\n                  </p>\n                  <div className=\"text-3xl md:text-4xl font-black text-slate-900\">\n                    £22\n                    <span className=\"text-lg text-gray-600 font-semibold\">\n                      /month\n                    </span>\n                  </div>\n                </div>\n                <ul className=\"space-y-4 mb-10\">\n                  {[\n                    \"Gym access (06:00-22:00)\",\n                    \"Locker room facilities\",\n                    \"Mobile app access\",\n                    \"Basic fitness assessment\",\n                  ].map((feature, index) => (\n                    <li key={index} className=\"flex items-center gap-3\">\n                      <Check className=\"text-red-600 h-5 w-5 flex-shrink-0\" />\n                      <span className=\"text-gray-700 font-medium\">\n                        {feature}\n                      </span>\n                    </li>\n                  ))}\n                </ul>\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full border-2 border-red-600 text-red-600 hover:bg-red-600 hover:text-white font-bold shadow-sm uppercase tracking-wide\"\n                      onClick={handleGetStarted}\n                      data-testid=\"button-select-basic\"\n                    >\n                      GET STARTED\n                    </Button>\n                  </TooltipTrigger>\n                  <TooltipContent>\n                    <p>Perfect starter plan for fitness beginners</p>\n                  </TooltipContent>\n                </Tooltip>\n              </CardContent>\n            </Card>\n\n            {/* Premium Plan */}\n            <Card className=\"bg-red-600 relative transform lg:scale-105 shadow-xl border border-red-500/80 backdrop-blur-sm\" style={{ color: 'white' }}>\n              <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2 bg-white text-red-600 px-6 py-2 rounded-full text-sm font-bold shadow-lg border-2 border-red-600\">\n                MOST POPULAR\n              </div>\n              <CardContent className=\"p-8\" style={{ color: 'white' }}>\n                <div className=\"text-center mb-8\">\n                  <h3 className=\"text-2xl font-bold mb-3 uppercase tracking-wide\" style={{ color: 'white' }}>\n                    Premium\n                  </h3>\n                  <p className=\"mb-6 font-medium\" style={{ color: '#fecaca' }}>\n                    The complete experience\n                  </p>\n                  <div className=\"text-4xl font-black\" style={{ color: 'white' }}>\n                    £59\n                    <span className=\"text-lg font-semibold\" style={{ color: '#fecaca' }}>\n                      /month\n                    </span>\n                  </div>\n                </div>\n                <ul className=\"space-y-4 mb-8\">\n                  {[\n                    \"24/7 gym access\",\n                    \"Unlimited group classes\",\n                    \"Personal training sessions (2/month)\",\n                    \"Premium spa facilities\",\n                    \"Member rewards program\",\n                    \"Nutrition consultation\",\n                  ].map((feature, index) => (\n                    <li key={index} className=\"flex items-center gap-3\">\n                      <Check className=\"h-5 w-5 flex-shrink-0\" style={{ color: 'white' }} />\n                      <span className=\"font-medium\" style={{ color: 'white' }}>{feature}</span>\n                    </li>\n                  ))}\n                </ul>\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <Button\n                      className=\"w-full bg-white text-red-600 hover:bg-gray-100 font-bold shadow-lg uppercase tracking-wide\"\n                      onClick={handleGetStarted}\n                      data-testid=\"button-select-premium\"\n                    >\n                      START PREMIUM\n                    </Button>\n                  </TooltipTrigger>\n                  <TooltipContent>\n                    <p>The ultimate fitness experience</p>\n                  </TooltipContent>\n                </Tooltip>\n              </CardContent>\n            </Card>\n\n            {/* Student Plan */}\n            <Card className=\"bg-white/95 backdrop-blur-sm border border-slate-200/60 shadow-sm hover:border-red-300/60 hover:shadow-xl transition-all duration-300\">\n              <CardContent className=\"p-8\">\n                <div className=\"text-center mb-8\">\n                  <h3 className=\"text-xl md:text-2xl font-bold text-slate-900 mb-3 uppercase tracking-wide\">\n                    Student\n                  </h3>\n                  <p className=\"text-slate-600 mb-6 font-medium leading-relaxed\">\n                    Special pricing for students\n                  </p>\n                  <div className=\"text-3xl md:text-4xl font-black text-slate-900\">\n                    £15\n                    <span className=\"text-lg text-gray-600 font-semibold\">\n                      /month\n                    </span>\n                  </div>\n                </div>\n                <ul className=\"space-y-4 mb-8\">\n                  {[\n                    \"Gym access (06:00-16:00)\",\n                    \"Basic group classes\",\n                    \"Study areas with WiFi\",\n                    \"Student community events\",\n                  ].map((feature, index) => (\n                    <li key={index} className=\"flex items-center gap-3\">\n                      <Check className=\"text-red-600 h-5 w-5 flex-shrink-0\" />\n                      <span className=\"text-gray-700 font-medium\">\n                        {feature}\n                      </span>\n                    </li>\n                  ))}\n                </ul>\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full border-2 border-red-600 text-red-600 hover:bg-red-600 hover:text-white font-bold shadow-sm uppercase tracking-wide\"\n                      onClick={handleGetStarted}\n                      data-testid=\"button-select-student\"\n                    >\n                      VERIFY STUDENT STATUS\n                    </Button>\n                  </TooltipTrigger>\n                  <TooltipContent>\n                    <p>Special student discount available</p>\n                  </TooltipContent>\n                </Tooltip>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Success Stories */}\n      <section id=\"success\" className=\"py-20 lg:py-24 bg-gray-900\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-20\">\n            <div className=\"inline-flex items-center gap-3 px-6 py-3 bg-red-600/20 border border-red-500/30 rounded-full mb-8\">\n              <Trophy className=\"w-5 h-5 text-red-400\" />\n              <span className=\"text-red-300 font-bold text-sm tracking-wider uppercase\">\n                Proven Results\n              </span>\n            </div>\n            <h2 className=\"text-4xl md:text-5xl font-black text-white mb-8 leading-tight\">\n              Join the <span className=\"text-red-500\">Success Revolution</span>\n            </h2>\n            <p className=\"text-xl text-gray-300 max-w-3xl mx-auto font-medium\">\n              Real transformations from our community of achievers\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8 mb-16\">\n            {[\n              {\n                icon: Users,\n                number: \"2,500+\",\n                label: \"Active Members\",\n                color: \"blue\",\n              },\n              {\n                icon: Target,\n                number: \"89%\",\n                label: \"Goal Achievement\",\n                color: \"green\",\n              },\n              {\n                icon: Award,\n                number: \"4.9/5\",\n                label: \"Member Satisfaction\",\n                color: \"yellow\",\n              },\n              {\n                icon: Clock,\n                number: \"5 Years\",\n                label: \"Average Membership\",\n                color: \"purple\",\n              },\n            ].map((stat, index) => (\n              <Tooltip key={index}>\n                <TooltipTrigger asChild>\n                  <div className=\"group text-center cursor-pointer bg-white/10 backdrop-blur-sm rounded-xl p-6 border border-white/20 hover:border-white/40 transition-all duration-300 hover:bg-white/15 transform hover:scale-105\">\n                    <div className=\"w-16 h-16 bg-gradient-to-br from-red-500 to-red-600 rounded-xl flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform duration-300 shadow-lg\">\n                      <stat.icon className=\"text-white h-8 w-8\" />\n                    </div>\n                    <div className=\"text-3xl md:text-4xl font-black text-white mb-2 group-hover:text-red-300 transition-colors duration-300\">\n                      {stat.number}\n                    </div>\n                    <div className=\"text-gray-300 font-medium text-base\">\n                      {stat.label}\n                    </div>\n                  </div>\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>Outstanding member statistics</p>\n                </TooltipContent>\n              </Tooltip>\n            ))}\n          </div>\n\n          {/* Testimonials */}\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {[\n              {\n                quote:\n                  \"Virgin Active completely transformed my fitness journey. The facilities are world-class and the staff truly care about your success.\",\n                author: \"Sarah M.\",\n                membership: \"Premium Member, 8 months\",\n                image:\n                  \"https://images.unsplash.com/photo-1494790108755-2616b612b377?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=150&h=150\",\n              },\n              {\n                quote:\n                  \"As a busy professional, I love the 24/7 access and premium amenities. It's the perfect escape from my hectic schedule.\",\n                author: \"Michael R.\",\n                membership: \"Premium Member, 1.5 years\",\n                image:\n                  \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=150&h=150\",\n              },\n              {\n                quote:\n                  \"The community here is incredible. Everyone supports each other, and the luxury facilities make every workout feel special.\",\n                author: \"Jessica L.\",\n                membership: \"Premium Member, 2 years\",\n                image:\n                  \"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=150&h=150\",\n              },\n            ].map((testimonial, index) => (\n              <Card\n                key={index}\n                className=\"bg-white/10 backdrop-blur-sm border border-white/20 hover:border-white/30 hover:shadow-xl transition-all duration-300\"\n              >\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center mb-4\">\n                    {[...Array(5)].map((_, i) => (\n                      <Star\n                        key={i}\n                        className=\"text-yellow-400 h-4 w-4 fill-current\"\n                      />\n                    ))}\n                  </div>\n                  <Quote className=\"text-red-400 h-6 w-6 mb-4\" />\n                  <p className=\"text-gray-200 mb-6 italic leading-relaxed\">\n                    \"{testimonial.quote}\"\n                  </p>\n                  <div className=\"flex items-center gap-3\">\n                    <img\n                      src={testimonial.image}\n                      alt={testimonial.author}\n                      className=\"w-10 h-10 rounded-full object-cover border-2 border-white/20\"\n                    />\n                    <div>\n                      <div className=\"font-bold text-white text-sm\">\n                        {testimonial.author}\n                      </div>\n                      <div className=\"text-xs text-gray-300\">\n                        {testimonial.membership}\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Why Choose Us */}\n      <section className=\"py-20 lg:py-24 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-black text-gray-900 mb-6\">\n              Why Choose Virgin Active?\n            </h2>\n            <p className=\"text-xl text-gray-600 font-medium max-w-2xl mx-auto\">\n              Premium facilities and expert guidance for your success\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-8 uppercase tracking-wide\">\n                Premium Experience\n              </h3>\n              <div className=\"space-y-8\">\n                {[\n                  {\n                    icon: Brain,\n                    title: \"Expert Personal Training\",\n                    description:\n                      \"Certified trainers create personalized programs that evolve with your progress and goals.\",\n                  },\n                  {\n                    icon: TrendingUp,\n                    title: \"Advanced Progress Tracking\",\n                    description:\n                      \"Detailed analytics and insights help you understand and optimize your fitness journey.\",\n                  },\n                  {\n                    icon: Gift,\n                    title: \"Exclusive Member Rewards\",\n                    description:\n                      \"Earn points for every visit and redeem them for exclusive perks and partner discounts.\",\n                  },\n                ].map((feature, index) => (\n                  <div key={index} className=\"flex gap-4\">\n                    <div className=\"w-12 h-12 bg-red-100 rounded-xl flex items-center justify-center flex-shrink-0\">\n                      <feature.icon className=\"text-red-600 h-6 w-6\" />\n                    </div>\n                    <div>\n                      <h4 className=\"font-bold text-gray-900 mb-2 text-lg\">\n                        {feature.title}\n                      </h4>\n                      <p className=\"text-gray-600 leading-relaxed font-medium\">\n                        {feature.description}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"relative\">\n              <img\n                src=\"https://images.unsplash.com/photo-1571902943202-507ec2618e8f?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=600&h=400\"\n                alt=\"Premium fitness facilities\"\n                className=\"rounded-xl shadow-xl w-full\"\n              />\n              <div className=\"absolute -bottom-4 -right-4 bg-white p-4 rounded-xl shadow-xl border border-gray-200\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\"></div>\n                  <span className=\"text-sm font-bold text-gray-900 uppercase tracking-wide\">\n                    Premium Active\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer id=\"contact\" className=\"bg-gray-900 text-white py-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            <div>\n              <div className=\"flex items-center gap-3 mb-6\">\n                <div className=\"w-10 h-10 bg-red-600 rounded-lg flex items-center justify-center shadow-md\">\n                  <Dumbbell className=\"text-white h-5 w-5\" />\n                </div>\n                <span className=\"text-xl font-black uppercase tracking-wide\">\n                  Virgin Active\n                </span>\n              </div>\n              <p className=\"text-gray-400 mb-6 leading-relaxed\">\n                Premium fitness facilities designed for real wellness and\n                lasting results.\n              </p>\n              <div className=\"flex gap-4\">\n                <a\n                  href=\"#\"\n                  className=\"w-10 h-10 bg-gray-800 rounded-lg flex items-center justify-center hover:bg-red-600 transition-colors duration-300\"\n                >\n                  <Facebook className=\"h-5 w-5\" />\n                </a>\n                <a\n                  href=\"#\"\n                  className=\"w-10 h-10 bg-gray-800 rounded-lg flex items-center justify-center hover:bg-red-600 transition-colors duration-300\"\n                >\n                  <Instagram className=\"h-5 w-5\" />\n                </a>\n                <a\n                  href=\"#\"\n                  className=\"w-10 h-10 bg-gray-800 rounded-lg flex items-center justify-center hover:bg-red-600 transition-colors duration-300\"\n                >\n                  <Twitter className=\"h-5 w-5\" />\n                </a>\n              </div>\n            </div>\n            <div>\n              <h4 className=\"font-bold mb-6 text-white uppercase tracking-wide\">\n                Quick Links\n              </h4>\n              <ul className=\"space-y-3 text-gray-400\">\n                <li>\n                  <a\n                    href=\"#\"\n                    className=\"hover:text-white transition-colors font-medium\"\n                  >\n                    About Us\n                  </a>\n                </li>\n                <li>\n                  <a\n                    href=\"#\"\n                    className=\"hover:text-white transition-colors font-medium\"\n                  >\n                    Classes\n                  </a>\n                </li>\n                <li>\n                  <a\n                    href=\"#\"\n                    className=\"hover:text-white transition-colors font-medium\"\n                  >\n                    Personal Training\n                  </a>\n                </li>\n                <li>\n                  <a\n                    href=\"#\"\n                    className=\"hover:text-white transition-colors font-medium\"\n                  >\n                    Membership\n                  </a>\n                </li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-bold mb-6 text-white uppercase tracking-wide\">\n                Support\n              </h4>\n              <ul className=\"space-y-3 text-gray-400\">\n                <li>\n                  <a\n                    href=\"#\"\n                    className=\"hover:text-white transition-colors font-medium\"\n                  >\n                    Help Center\n                  </a>\n                </li>\n                <li>\n                  <a\n                    href=\"#\"\n                    className=\"hover:text-white transition-colors font-medium\"\n                  >\n                    Contact Us\n                  </a>\n                </li>\n                <li>\n                  <a\n                    href=\"#\"\n                    className=\"hover:text-white transition-colors font-medium\"\n                  >\n                    Privacy Policy\n                  </a>\n                </li>\n                <li>\n                  <a\n                    href=\"#\"\n                    className=\"hover:text-white transition-colors font-medium\"\n                  >\n                    Terms of Service\n                  </a>\n                </li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-bold mb-6 text-white uppercase tracking-wide\">\n                Contact Info\n              </h4>\n              <ul className=\"space-y-4 text-gray-400\">\n                <li className=\"flex items-start gap-3\">\n                  <MapPin className=\"h-5 w-5 flex-shrink-0 mt-0.5\" />\n                  <span className=\"font-medium\">\n                    25 Canary Wharf, London E14 5AB\n                  </span>\n                </li>\n                <li className=\"flex items-center gap-3\">\n                  <Phone className=\"h-5 w-5 flex-shrink-0\" />\n                  <span className=\"font-medium\">020 3837 4721</span>\n                </li>\n                <li className=\"flex items-center gap-3\">\n                  <Mail className=\"h-5 w-5 flex-shrink-0\" />\n                  <span className=\"font-medium\">hello@virginactive.co.uk</span>\n                </li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"border-t border-gray-800 mt-12 pt-8 text-center\">\n            <p className=\"text-gray-400 font-medium\">\n              &copy; 2025 Virgin Active. All rights reserved.\n            </p>\n          </div>\n        </div>\n      </footer>\n\n      <ChatBot />\n    </div>\n  );\n}\n","size_bytes":44243},"client/src/pages/LoyaltyCampaigns.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Sparkles, Target, Megaphone } from \"lucide-react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { LoyaltyOffer } from \"@shared/schema\";\n\ninterface GeneratedOffer {\n  id: number;\n  title: string;\n  description: string;\n  points: number;\n  category: string;\n}\n\nexport function LoyaltyCampaigns() {\n  const [campaignCriteria, setCampaignCriteria] = useState(\"\");\n  const [generatedOffers, setGeneratedOffers] = useState<GeneratedOffer[]>([]);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: activeOffers = [], isLoading: offersLoading } = useQuery({\n    queryKey: [\"/api/loyalty-offers\"],\n    retry: false,\n  });\n\n  const generateOffersMutation = useMutation({\n    mutationFn: async (criteria: string) => {\n      const response = await apiRequest(\"POST\", \"/api/ai/generate-loyalty-offers\", {\n        targetCriteria: criteria,\n      });\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      setGeneratedOffers(data.offers || []);\n      toast({\n        title: \"Offers Generated\",\n        description: \"AI has created targeted loyalty offers for your campaign.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate loyalty offers.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const publishOfferMutation = useMutation({\n    mutationFn: async (offer: GeneratedOffer) => {\n      const response = await apiRequest(\"POST\", \"/api/loyalty-offers\", {\n        title: offer.title,\n        description: offer.description,\n        points: offer.points,\n        category: offer.category,\n        isActive: true,\n      });\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/loyalty-offers\"] });\n      toast({\n        title: \"Offer Published\",\n        description: \"The loyalty offer is now available to members.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to publish loyalty offer.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deactivateOfferMutation = useMutation({\n    mutationFn: async (offerId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/loyalty-offers/${offerId}`);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/loyalty-offers\"] });\n      toast({\n        title: \"Offer Deactivated\",\n        description: \"The loyalty offer has been removed from the member portal.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to deactivate loyalty offer.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGenerateOffers = () => {\n    if (!campaignCriteria.trim()) {\n      toast({\n        title: \"Criteria Required\",\n        description: \"Please describe your target audience first.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    generateOffersMutation.mutate(campaignCriteria.trim());\n  };\n\n  const handlePublishOffer = (offer: GeneratedOffer) => {\n    publishOfferMutation.mutate(offer);\n  };\n\n  const handleDeactivateOffer = (offerId: string) => {\n    deactivateOfferMutation.mutate(offerId);\n  };\n\n  const getCategoryColor = (category: string) => {\n    const colors = {\n      fitness: \"bg-primary/10 text-primary\",\n      wellness: \"bg-purple-100 text-purple-800\",\n      nutrition: \"bg-blue-100 text-blue-800\",\n      social: \"bg-orange-100 text-orange-800\",\n      classes: \"bg-green-100 text-green-800\",\n    };\n    return colors[category.toLowerCase() as keyof typeof colors] || \"bg-gray-100 text-gray-800\";\n  };\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"mb-12\">\n          <div className=\"max-w-6xl mx-auto text-center\">\n            <span className=\"inline-block px-4 py-2 bg-red-600 text-white text-sm font-bold uppercase tracking-wider rounded-full mb-4\">\n              Marketing Tools\n            </span>\n            <h1 className=\"text-4xl lg:text-6xl font-black tracking-tight text-gray-900 leading-tight mb-6\">\n              LOYALTY{\" \"}\n              <span className=\"text-red-600 block\">CAMPAIGNS</span>\n            </h1>\n            <p className=\"text-xl text-gray-700 leading-relaxed mb-8 max-w-2xl mx-auto\">\n              Create and manage AI-powered loyalty offers for members\n            </p>\n          </div>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-8\">\n          {/* Create New Campaign */}\n          <Card className=\"border border-slate-200/60 shadow-sm hover:shadow-md transition-all duration-300\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg font-semibold text-slate-900 flex items-center gap-2\">\n                <Target className=\"h-5 w-5 text-slate-600\" />\n                Create New Campaign\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Target Audience</label>\n                <Textarea\n                  placeholder=\"Example: Members who attend morning yoga classes and have been members for over 6 months\"\n                  value={campaignCriteria}\n                  onChange={(e) => setCampaignCriteria(e.target.value)}\n                  className=\"h-24\"\n                  data-testid=\"textarea-campaign-criteria\"\n                />\n              </div>\n              <Button\n                onClick={handleGenerateOffers}\n                disabled={generateOffersMutation.isPending || !campaignCriteria.trim()}\n                className=\"w-full flex items-center gap-2\"\n                data-testid=\"button-generate-offers\"\n              >\n                <Sparkles className=\"h-4 w-4\" />\n                {generateOffersMutation.isPending ? \"Generating...\" : \"Generate AI Offers\"}\n              </Button>\n\n              {/* Loading State */}\n              {generateOffersMutation.isPending && (\n                <div className=\"p-4 bg-gray-50 rounded-lg text-center\">\n                  <div className=\"inline-block animate-spin rounded-full h-6 w-6 border-b-2 border-primary mb-2\"></div>\n                  <p className=\"text-sm text-gray-600\">AI is creating targeted loyalty offers...</p>\n                </div>\n              )}\n\n              {/* Generated Offers */}\n              {generatedOffers.length > 0 && (\n                <div className=\"space-y-4\">\n                  <h3 className=\"font-semibold text-gray-900\">Generated Offers</h3>\n                  {generatedOffers.map((offer) => (\n                    <Card key={offer.id} className=\"bg-slate-50/50 border border-slate-200/60 shadow-sm hover:shadow-md transition-all duration-300\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-start justify-between mb-3\">\n                          <div>\n                            <h4 className=\"font-semibold text-slate-900\">{offer.title}</h4>\n                            <p className=\"text-sm text-slate-600 leading-relaxed\">{offer.description}</p>\n                          </div>\n                          <Badge className={getCategoryColor(offer.category)}>\n                            {offer.category}\n                          </Badge>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-primary font-semibold\">{offer.points} points</span>\n                          <Button\n                            onClick={() => handlePublishOffer(offer)}\n                            disabled={publishOfferMutation.isPending}\n                            size=\"sm\"\n                            className=\"bg-green-600 hover:bg-green-700\"\n                            data-testid={`button-publish-${offer.id}`}\n                          >\n                            {publishOfferMutation.isPending ? \"Publishing...\" : \"Publish\"}\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Active Campaigns */}\n          <Card className=\"border border-slate-200/60 shadow-sm hover:shadow-md transition-all duration-300\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg font-semibold text-slate-900 flex items-center gap-2\">\n                <Megaphone className=\"h-5 w-5 text-slate-600\" />\n                Active Campaigns\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {offersLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(3)].map((_, i) => (\n                    <div key={i} className=\"animate-pulse border border-gray-200 rounded-lg p-4\">\n                      <div className=\"h-6 bg-gray-200 rounded mb-2\"></div>\n                      <div className=\"h-4 bg-gray-200 rounded mb-3 w-2/3\"></div>\n                      <div className=\"h-8 bg-gray-200 rounded\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : (activeOffers as LoyaltyOffer[]).length === 0 ? (\n                <div className=\"text-center text-gray-500 py-8\">\n                  <Megaphone className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No Active Campaigns</h3>\n                  <p>Create your first campaign to start engaging members with targeted offers.</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {(activeOffers as LoyaltyOffer[]).map((offer: LoyaltyOffer) => (\n                    <Card key={offer.id} className=\"border border-slate-200/60 shadow-sm hover:shadow-md transition-all duration-300\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-start justify-between mb-3\">\n                          <div>\n                            <h4 className=\"font-semibold text-slate-900\">{offer.title}</h4>\n                            <p className=\"text-sm text-slate-600 leading-relaxed\">{offer.description}</p>\n                          </div>\n                          <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                            Active\n                          </Badge>\n                        </div>\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <div className=\"flex items-center gap-4\">\n                            <span className=\"text-primary font-semibold\">{offer.points} points</span>\n                            <span className=\"text-gray-600\">Category: {offer.category}</span>\n                          </div>\n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            onClick={() => handleDeactivateOffer(offer.id)}\n                            disabled={deactivateOfferMutation.isPending}\n                            data-testid={`button-deactivate-${offer.id}`}\n                          >\n                            {deactivateOfferMutation.isPending ? \"Deactivating...\" : \"Deactivate\"}\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13145},"client/src/pages/LoyaltyRewards.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { AlertDialog, AlertDialogAction, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { Star, Clock, MapPin, Package, Calendar, CheckCircle, X } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuthContext } from \"@/contexts/AuthContext\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { LoyaltyOffer, OfferRedemption } from \"@shared/schema\";\n\nexport function LoyaltyRewards() {\n  const { user } = useAuthContext();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [collectionDialog, setCollectionDialog] = useState<{ isOpen: boolean; offer?: LoyaltyOffer | null }>({ isOpen: false, offer: null });\n  const [confirmDialog, setConfirmDialog] = useState<{ isOpen: boolean; offer?: LoyaltyOffer | null }>({ isOpen: false, offer: null });\n  const [autoCloseTimer, setAutoCloseTimer] = useState<NodeJS.Timeout | null>(null);\n\n  const confirmRedeem = () => {\n    if (confirmDialog.offer) {\n      redeemOfferMutation.mutate(confirmDialog.offer.id);\n      setConfirmDialog({ isOpen: false, offer: null });\n    }\n  };\n\n  const { data: offers = [], isLoading: offersLoading } = useQuery({\n    queryKey: [\"/api/loyalty-offers\"],\n    retry: false,\n  });\n\n  const { data: redemptions = [] } = useQuery({\n    queryKey: [\"/api/user/redemptions\"],\n    retry: false,\n  });\n\n  const redeemOfferMutation = useMutation({\n    mutationFn: async (offerId: string) => {\n      const response = await apiRequest(\"POST\", `/api/offers/${offerId}/redeem`);\n      return await response.json();\n    },\n    onSuccess: (data, offerId) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/redemptions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      \n      // Find the redeemed offer to show collection instructions\n      const redeemedOffer = (offers as LoyaltyOffer[]).find(o => o.id === offerId);\n      if (redeemedOffer) {\n        setCollectionDialog({ isOpen: true, offer: redeemedOffer });\n        \n        // Set up auto-close timer for 10 seconds\n        const timer = setTimeout(() => {\n          setCollectionDialog({ isOpen: false, offer: null });\n        }, 10000);\n        setAutoCloseTimer(timer);\n      }\n      \n      toast({\n        title: \"Offer Redeemed Successfully!\",\n        description: `${redeemedOffer?.title || 'Your reward'} has been added to your redemption history.`,\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      const errorMessage = error.message.includes(\"400:\")\n        ? error.message.split(\"400: \")[1]\n        : \"Failed to redeem offer. Please try again.\";\n      \n      toast({\n        title: \"Redemption Failed\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getOfferStatus = (offer: LoyaltyOffer) => {\n    const isRedeemed = (redemptions as OfferRedemption[]).some((r: OfferRedemption) => r.offerId === offer.id);\n    const canAfford = user && (user.loyaltyPoints || 0) >= offer.points;\n    \n    if (isRedeemed) return \"redeemed\";\n    if (!canAfford) return \"insufficient\";\n    return \"available\";\n  };\n\n  const getOfferButtonText = (status: string) => {\n    switch (status) {\n      case \"redeemed\": return \"Redeemed\";\n      case \"insufficient\": return \"Insufficient Points\";\n      default: return \"Redeem\";\n    }\n  };\n\n  const getCategoryColor = (category: string) => {\n    const colors = {\n      fitness: \"bg-primary/10 text-primary\",\n      wellness: \"bg-purple-100 text-purple-800\",\n      nutrition: \"bg-blue-100 text-blue-800\",\n      social: \"bg-orange-100 text-orange-800\",\n      classes: \"bg-green-100 text-green-800\",\n    };\n    return colors[category.toLowerCase() as keyof typeof colors] || \"bg-gray-100 text-gray-800\";\n  };\n\n  const getCollectionInstructions = (offer: LoyaltyOffer) => {\n    const category = offer.category.toLowerCase();\n    \n    if (category === 'merchandise') {\n      return {\n        title: 'Collection Required',\n        description: 'Please collect your item from the front desk during business hours (6AM-10PM). Bring photo ID for verification.',\n        location: 'Front Desk - Main Entrance',\n        timeframe: 'Available for collection within 30 days'\n      };\n    } else if (category === 'nutrition') {\n      return {\n        title: 'Ready for Pickup',\n        description: 'Your nutrition item is ready for collection at our smoothie bar.',\n        location: 'Smoothie Bar - First Floor',\n        timeframe: 'Collect within 7 days'\n      };\n    } else if (category === 'training' || category === 'classes') {\n      return {\n        title: 'Session Booking Required',\n        description: 'Contact our training team to schedule your session at your convenience.',\n        location: 'Call: (555) 123-4567 or visit Front Desk',\n        timeframe: 'Book within 60 days'\n      };\n    } else if (category === 'wellness') {\n      return {\n        title: 'Appointment Booking',\n        description: 'Schedule your wellness session with our reception team.',\n        location: 'Reception - Second Floor',\n        timeframe: 'Book within 90 days'\n      };\n    } else {\n      return {\n        title: 'Redemption Complete',\n        description: 'Your reward has been processed and will be available shortly.',\n        location: 'Check your member account for updates',\n        timeframe: 'Processing within 24 hours'\n      };\n    }\n  };\n\n  if (offersLoading) {\n    return (\n      <div className=\"p-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            {[...Array(4)].map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardContent className=\"p-6\">\n                  <div className=\"h-6 bg-gray-200 rounded mb-2\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded mb-4 w-2/3\"></div>\n                  <div className=\"h-8 bg-gray-200 rounded\"></div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const redeemedOffers = (redemptions as OfferRedemption[])\n    .map(redemption => {\n      const offer = (offers as LoyaltyOffer[]).find(o => o.id === redemption.offerId);\n      return offer ? { ...offer, redemption } : null;\n    })\n    .filter(Boolean)\n    .reverse(); // Show most recent first\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Loyalty Rewards</h1>\n            <p className=\"text-gray-600\">Redeem your points for exclusive rewards and perks</p>\n          </div>\n          <Card className=\"bg-gradient-to-br from-primary to-primary/90 text-white\">\n            <CardContent className=\"px-6 py-4\">\n              <p className=\"text-sm text-primary-foreground/80\">Available Points</p>\n              <p className=\"text-2xl font-bold\" data-testid=\"text-user-points\">\n                {user?.loyaltyPoints}\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"available\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"available\">Available Offers</TabsTrigger>\n            <TabsTrigger value=\"history\">\n              My Redemptions ({redeemedOffers.length})\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"available\" className=\"space-y-6\">\n            {(offers as LoyaltyOffer[]).length === 0 ? (\n              <Card className=\"p-8 text-center\">\n                <div className=\"text-gray-500\">\n                  <Star className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No Rewards Available</h3>\n                  <p>Check back later for new loyalty offers!</p>\n                </div>\n              </Card>\n            ) : (\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                {(offers as LoyaltyOffer[]).map((offer: LoyaltyOffer) => {\n                  const status = getOfferStatus(offer);\n                  const isDisabled = status !== \"available\" || redeemOfferMutation.isPending;\n                  \n                  return (\n                    <Card\n                      key={offer.id}\n                      className={`overflow-hidden transition-all duration-300 ${\n                        status === \"redeemed\" \n                          ? \"opacity-60 bg-gray-50\" \n                          : \"hover:shadow-lg\"\n                      }`}\n                      data-testid={`offer-${offer.id}`}\n                    >\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-start justify-between mb-4\">\n                          <div>\n                            <h3 className=\"text-lg font-semibold text-gray-900 mb-1\">\n                              {offer.title}\n                            </h3>\n                            <p className=\"text-gray-600 text-sm\">{offer.description}</p>\n                          </div>\n                          <Badge className={getCategoryColor(offer.category)}>\n                            {offer.category === 'Food' ? '🍽️ ' : \n                             offer.category === 'Fitness' ? '💪 ' :\n                             offer.category === 'Merchandise' ? '🎁 ' :\n                             offer.category === 'Wellness' ? '🧘 ' :\n                             offer.category === 'Training' ? '🎯 ' :\n                             offer.category === 'Classes' ? '🏃 ' : ''}\n                            {offer.category}\n                          </Badge>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-2 text-primary\">\n                            <Star className=\"h-4 w-4\" />\n                            <span className=\"font-semibold\">{offer.points} points</span>\n                          </div>\n                          <Button\n                            onClick={() => setConfirmDialog({ isOpen: true, offer })}\n                            disabled={isDisabled}\n                            variant={status === \"available\" ? \"default\" : \"secondary\"}\n                            size=\"sm\"\n                            className={status === \"available\" \n                              ? \"bg-gradient-to-r from-purple-500 to-indigo-500 hover:from-purple-600 hover:to-indigo-600 text-white font-semibold shadow-md\" \n                              : \"bg-gradient-to-r from-gray-400 to-gray-500 text-white font-medium\"}\n                            data-testid={`button-redeem-${offer.id}`}\n                          >\n                            {getOfferButtonText(status)}\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"history\" className=\"space-y-6\">\n            {redeemedOffers.length === 0 ? (\n              <Card className=\"p-8 text-center\">\n                <div className=\"text-gray-500\">\n                  <Clock className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No Redemptions Yet</h3>\n                  <p>Your redeemed rewards will appear here</p>\n                </div>\n              </Card>\n            ) : (\n              <div className=\"space-y-4\">\n                {redeemedOffers.map((item: any) => {\n                  const instructions = getCollectionInstructions(item);\n                  return (\n                    <Card key={`${item.id}-${item.redemption.id}`} className=\"overflow-hidden\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-start justify-between mb-4\">\n                          <div className=\"flex items-start gap-4\">\n                            <div className=\"w-12 h-12 bg-green-100 rounded-xl flex items-center justify-center\">\n                              <CheckCircle className=\"text-green-600 h-6 w-6\" />\n                            </div>\n                            <div>\n                              <h3 className=\"text-lg font-semibold text-gray-900 mb-1\">\n                                {item.title}\n                              </h3>\n                              <p className=\"text-gray-600 text-sm mb-2\">{item.description}</p>\n                              <div className=\"flex items-center gap-4 text-sm text-gray-600\">\n                                <div className=\"flex items-center gap-1\">\n                                  <Calendar className=\"h-4 w-4\" />\n                                  <span>\n                                    Redeemed {new Date(item.redemption.redeemedAt).toLocaleDateString('en-US', {\n                                      year: 'numeric',\n                                      month: 'short',\n                                      day: 'numeric'\n                                    })}\n                                  </span>\n                                </div>\n                                <div className=\"flex items-center gap-1\">\n                                  <Star className=\"h-4 w-4\" />\n                                  <span>{item.redemption.pointsSpent} points</span>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                          <Badge className={getCategoryColor(item.category)}>\n                            {item.category === 'Food' ? '🍽️ ' : \n                             item.category === 'Fitness' ? '💪 ' :\n                             item.category === 'Merchandise' ? '🎁 ' :\n                             item.category === 'Wellness' ? '🧘 ' :\n                             item.category === 'Training' ? '🎯 ' :\n                             item.category === 'Classes' ? '🏃 ' : ''}\n                            {item.category}\n                          </Badge>\n                        </div>\n                        <div className=\"bg-blue-50 rounded-lg p-4\">\n                          <div className=\"flex items-start gap-3\">\n                            <MapPin className=\"h-5 w-5 text-blue-600 mt-0.5 flex-shrink-0\" />\n                            <div>\n                              <h4 className=\"font-semibold text-blue-900 mb-1\">{instructions.title}</h4>\n                              <p className=\"text-blue-800 text-sm mb-2\">{instructions.description}</p>\n                              <div className=\"space-y-1 text-sm\">\n                                <p className=\"text-blue-700\"><strong>Location:</strong> {instructions.location}</p>\n                                <p className=\"text-blue-700\"><strong>Timeframe:</strong> {instructions.timeframe}</p>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n        {/* Collection Instructions Dialog */}\n        <AlertDialog open={collectionDialog.isOpen} onOpenChange={(open) => {\n          if (!open && autoCloseTimer) {\n            clearTimeout(autoCloseTimer);\n            setAutoCloseTimer(null);\n          }\n          setCollectionDialog({ isOpen: open, offer: null });\n        }}>\n          <AlertDialogContent className=\"max-w-md bg-white z-[100] shadow-2xl sm:top-[50%] sm:left-[50%] sm:translate-x-[-50%] sm:translate-y-[-50%]\">\n            {/* Close Button */}\n            <button\n              onClick={() => {\n                if (autoCloseTimer) {\n                  clearTimeout(autoCloseTimer);\n                  setAutoCloseTimer(null);\n                }\n                setCollectionDialog({ isOpen: false, offer: null });\n              }}\n              className=\"absolute top-4 right-4 z-10 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\"\n              data-testid=\"button-close-popup\"\n            >\n              <X className=\"h-4 w-4\" />\n              <span className=\"sr-only\">Close</span>\n            </button>\n            \n            <AlertDialogHeader>\n              <AlertDialogTitle className=\"flex items-center gap-2 pr-8\">\n                <Package className=\"h-5 w-5 text-primary\" />\n                Reward Redeemed Successfully!\n              </AlertDialogTitle>\n              <AlertDialogDescription className=\"space-y-4\">\n                {collectionDialog.offer && (() => {\n                  const instructions = getCollectionInstructions(collectionDialog.offer);\n                  return (\n                    <div className=\"text-left\">\n                      <div className=\"bg-green-50 rounded-lg p-4 mb-4\">\n                        <div className=\"flex items-center gap-2 text-green-800 mb-2\">\n                          <CheckCircle className=\"h-4 w-4\" />\n                          <span className=\"font-semibold\">{collectionDialog.offer.title}</span>\n                        </div>\n                        <p className=\"text-green-700 text-sm\">{collectionDialog.offer.description}</p>\n                      </div>\n                      \n                      <div className=\"space-y-3\">\n                        <h4 className=\"font-semibold text-gray-900\">{instructions.title}</h4>\n                        <p className=\"text-gray-700 text-sm\">{instructions.description}</p>\n                        <div className=\"space-y-2 text-sm\">\n                          <div className=\"flex items-start gap-2\">\n                            <MapPin className=\"h-4 w-4 text-gray-600 mt-0.5 flex-shrink-0\" />\n                            <span><strong>Location:</strong> {instructions.location}</span>\n                          </div>\n                          <div className=\"flex items-start gap-2\">\n                            <Clock className=\"h-4 w-4 text-gray-600 mt-0.5 flex-shrink-0\" />\n                            <span><strong>Timeframe:</strong> {instructions.timeframe}</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })()}\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogAction>Got it!</AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n\n        {/* Confirmation Dialog */}\n        <AlertDialog open={confirmDialog.isOpen} onOpenChange={(open) => setConfirmDialog({ isOpen: open, offer: null })}>\n          <AlertDialogContent className=\"max-w-md bg-white z-[100] shadow-2xl\">\n            <AlertDialogHeader>\n              <AlertDialogTitle className=\"flex items-center gap-2\">\n                <Package className=\"h-5 w-5 text-primary\" />\n                Confirm Redemption\n              </AlertDialogTitle>\n              <AlertDialogDescription>\n                {confirmDialog.offer && (\n                  <div className=\"space-y-4\">\n                    <div className=\"bg-blue-50 rounded-lg p-4\">\n                      <div className=\"flex items-center gap-2 text-blue-800 mb-2\">\n                        <CheckCircle className=\"h-4 w-4\" />\n                        <span className=\"font-semibold\">{confirmDialog.offer.title}</span>\n                      </div>\n                      <p className=\"text-blue-700 text-sm mb-3\">{confirmDialog.offer.description}</p>\n                      <div className=\"flex items-center gap-2\">\n                        <Star className=\"h-4 w-4 text-yellow-500\" />\n                        <span className=\"font-semibold text-blue-800\">{confirmDialog.offer.points} points</span>\n                      </div>\n                    </div>\n                    <p className=\"text-gray-600 text-sm\">\n                      Are you sure you want to redeem this offer? This action cannot be undone and will deduct {confirmDialog.offer.points} points from your account.\n                    </p>\n                  </div>\n                )}\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setConfirmDialog({ isOpen: false, offer: null })}\n                data-testid=\"button-cancel-redeem\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={confirmRedeem}\n                disabled={redeemOfferMutation.isPending}\n                data-testid=\"button-confirm-redeem\"\n              >\n                {redeemOfferMutation.isPending ? 'Redeeming...' : 'Confirm Redemption'}\n              </Button>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n\n      </div>\n    </div>\n  );\n}\n","size_bytes":22140},"client/src/pages/MemberPortal.tsx":{"content":"import { useState } from \"react\";\nimport { AppLayout } from \"@/components/ui/layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tooltip, TooltipContent, TooltipTrigger } from \"@/components/ui/tooltip\";\n// Progress component implemented inline\nimport { \n  Calendar, \n  Flame, \n  Star, \n  Brain, \n  Gift,\n  TrendingUp,\n  Target,\n  Activity,\n  Trophy,\n  Clock,\n  BarChart3\n} from \"lucide-react\";\nimport { LineChart, Line, XAxis, YAxis, ResponsiveContainer, PieChart, Pie, Cell, BarChart, Bar, Tooltip as RechartsTooltip } from \"recharts\";\nimport { WorkoutPlanner } from \"@/pages/WorkoutPlanner\";\nimport { LoyaltyRewards } from \"@/pages/LoyaltyRewards\";\nimport { useAuthContext } from \"@/contexts/AuthContext\";\n\nexport function MemberPortal() {\n  const [activeTab, setActiveTab] = useState(\"dashboard\");\n  const { user } = useAuthContext();\n\n  const renderContent = () => {\n    switch (activeTab) {\n      case \"workout-planner\":\n        return <WorkoutPlanner />;\n      case \"loyalty-rewards\":\n        return <LoyaltyRewards />;\n      case \"workout-history\":\n        return <WorkoutHistory />;\n      case \"profile\":\n        return <ProfilePage />;\n      default:\n        return <MemberDashboard onTabChange={setActiveTab} />;\n    }\n  };\n\n  return (\n    <AppLayout\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      userRole=\"member\"\n    >\n      {renderContent()}\n    </AppLayout>\n  );\n}\n\nfunction MemberDashboard({ onTabChange }: { onTabChange: (tab: string) => void }) {\n  const { user } = useAuthContext();\n\n  // Mock progress data for demonstration\n  const weeklyActivity = [\n    { day: 'Mon', visits: 1, goal: 1 },\n    { day: 'Tue', visits: 1, goal: 1 },\n    { day: 'Wed', visits: 0, goal: 1 },\n    { day: 'Thu', visits: 1, goal: 1 },\n    { day: 'Fri', visits: 1, goal: 1 },\n    { day: 'Sat', visits: 1, goal: 1 },\n    { day: 'Sun', visits: 0, goal: 1 }\n  ];\n\n  const monthlyProgress = [\n    { week: 'Week 1', visits: 5 },\n    { week: 'Week 2', visits: 4 },\n    { week: 'Week 3', visits: 6 },\n    { week: 'Week 4', visits: 3 }\n  ];\n\n  const workoutTypes = [\n    { name: 'Cardio', value: 45, color: '#8b5cf6' },\n    { name: 'Strength', value: 35, color: '#06b6d4' },\n    { name: 'Flexibility', value: 20, color: '#f97316' }\n  ];\n\n  const currentStreak = 3;\n  const monthlyGoal = 20;\n  const currentVisits = 8;\n  const goalProgress = (currentVisits / monthlyGoal) * 100;\n\n  return (\n    <div className=\"p-8 max-w-7xl mx-auto\">\n      {/* Virgin Active Style Hero Banner */}\n      <div className=\"mb-12 relative overflow-hidden\">\n        {/* Background Pattern */}\n        <div className=\"absolute inset-0 bg-gradient-to-br from-red-600 via-red-500 to-red-700 opacity-5\"></div>\n        \n        {/* Main Content */}\n        <div className=\"relative p-8 lg:p-12\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n              <div>\n                <div className=\"mb-6\">\n                  <span className=\"inline-block px-4 py-2 bg-red-600 text-white text-sm font-bold uppercase tracking-wider rounded-full mb-4\">\n                    Premium Member\n                  </span>\n                  <h1 className=\"text-4xl lg:text-6xl font-black tracking-tight text-gray-900 leading-tight mb-6\">\n                    WELCOME TO{\" \"}\n                    <span className=\"text-red-600 block\">REAL WELLNESS</span>\n                  </h1>\n                  <p className=\"text-xl text-gray-700 leading-relaxed mb-8 max-w-lg\">\n                    Ready to get back on track? We've got some great offers to help you reach your goals.\n                  </p>\n                </div>\n                \n                {/* Member Stats */}\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-black text-red-600\">{user?.loyaltyPoints || 0}</div>\n                    <div className=\"text-sm font-semibold text-gray-600 uppercase tracking-wide\">Loyalty Points</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-black text-gray-900\">{new Date().getFullYear() - (user?.joinDate ? new Date(user.joinDate).getFullYear() : new Date().getFullYear() - 2)}Y</div>\n                    <div className=\"text-sm font-semibold text-gray-600 uppercase tracking-wide\">Member Since</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-black text-gray-900\">{user?.membershipType || 'Premium'}</div>\n                    <div className=\"text-sm font-semibold text-gray-600 uppercase tracking-wide\">Plan</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-black text-gray-900\">Active</div>\n                    <div className=\"text-sm font-semibold text-gray-600 uppercase tracking-wide\">Status</div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Right Side - Member Photo Placeholder */}\n              <div className=\"hidden lg:block\">\n                <div className=\"relative\">\n                  <div className=\"w-full h-96 bg-gradient-to-br from-gray-100 to-gray-200 rounded-2xl flex items-center justify-center\">\n                    <div className=\"text-center\">\n                      <div className=\"w-20 h-20 bg-red-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n                        <span className=\"text-white text-2xl font-bold\">{user?.firstName?.charAt(0) || 'M'}</span>\n                      </div>\n                      <p className=\"text-gray-600 font-semibold\">{user?.firstName || 'Member'} - {user?.membershipType || 'Premium'} Member</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Real Wellness Features Section */}\n      <div className=\"mb-16\">\n        <div className=\"max-w-6xl mx-auto\">\n          <h2 className=\"text-3xl lg:text-4xl font-black text-gray-900 mb-12 text-center\">\n            Your membership. Endless possibilities.\n          </h2>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-red-600 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <Gift className=\"text-white h-8 w-8\" />\n              </div>\n              <h3 className=\"font-bold text-gray-900 mb-2\">Real rewards</h3>\n              <p className=\"text-sm text-gray-600 leading-relaxed\">instant goodies & partner discounts for staying active</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-red-600 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <Activity className=\"text-white h-8 w-8\" />\n              </div>\n              <h3 className=\"font-bold text-gray-900 mb-2\">Real endorphins</h3>\n              <p className=\"text-sm text-gray-600 leading-relaxed\">spacious gym floors & unlimited exercise classes</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-red-600 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <Target className=\"text-white h-8 w-8\" />\n              </div>\n              <h3 className=\"font-bold text-gray-900 mb-2\">Real progress</h3>\n              <p className=\"text-sm text-gray-600 leading-relaxed\">personal training & nutrition coaching</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-red-600 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <Brain className=\"text-white h-8 w-8\" />\n              </div>\n              <h3 className=\"font-bold text-gray-900 mb-2\">Real relaxation</h3>\n              <p className=\"text-sm text-gray-600 leading-relaxed\">pools, saunas & steam rooms</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Your Progress Dashboard */}\n      <div className=\"mb-16\">\n        <h2 className=\"text-2xl lg:text-3xl font-black text-gray-900 mb-8\">Your progress dashboard</h2>\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n        <Card className=\"relative overflow-hidden hover:shadow-lg transition-all duration-300 border-0 bg-white shadow-md\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"w-12 h-12 bg-red-600 rounded-2xl flex items-center justify-center\">\n                <Calendar className=\"text-white h-6 w-6\" />\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-3xl font-black text-gray-900\" data-testid=\"text-monthly-visits\">{currentVisits}</p>\n                <p className=\"text-sm font-semibold text-gray-600 uppercase tracking-wide\">of {monthlyGoal} visits</p>\n              </div>\n            </div>\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-gray-900 font-bold\">Monthly Goal</span>\n                <span className=\"text-sm font-black text-red-600\">{Math.round(goalProgress)}%</span>\n              </div>\n              <div className=\"w-full bg-gray-200 rounded-full h-3\">\n                <div \n                  className=\"bg-red-600 h-3 rounded-full transition-all duration-500\" \n                  style={{ width: `${goalProgress}%` }}\n                />\n              </div>\n              {goalProgress < 50 && (\n                <div className=\"text-xs text-gray-900 font-bold\">\n                  You've got this! Let's reach that goal!\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"relative overflow-hidden hover:shadow-lg transition-all duration-300 border-0 bg-white shadow-md\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"w-12 h-12 bg-red-600 rounded-2xl flex items-center justify-center\">\n                <Flame className=\"text-white h-6 w-6\" />\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-3xl font-black text-gray-900\" data-testid=\"text-current-streak\">{currentStreak}</p>\n                <p className=\"text-sm font-semibold text-gray-600 uppercase tracking-wide\">Day Streak</p>\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"text-sm text-gray-900 font-bold\">Keep the momentum!</div>\n              <div className=\"text-xs text-gray-600\">\n                Visit today to maintain your streak\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"relative overflow-hidden hover:shadow-lg transition-all duration-300 border-0 bg-white shadow-md\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"w-12 h-12 bg-red-600 rounded-2xl flex items-center justify-center\">\n                <Trophy className=\"text-white h-6 w-6\" />\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-3xl font-black text-gray-900\">Gold</p>\n                <p className=\"text-sm font-semibold text-gray-600 uppercase tracking-wide\">Member Status</p>\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"text-sm text-gray-900 font-bold\">Premium Benefits Active</div>\n              <div className=\"text-xs text-gray-600\">\n                Personal Trainer Included\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"relative overflow-hidden hover:shadow-lg transition-all duration-300 border-0 bg-white shadow-md\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div className=\"w-12 h-12 bg-red-600 rounded-2xl flex items-center justify-center\">\n                <Clock className=\"text-white h-6 w-6\" />\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-3xl font-black text-gray-900\">2.5</p>\n                <p className=\"text-sm font-semibold text-gray-600 uppercase tracking-wide\">Avg Hours/Visit</p>\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"text-sm text-gray-900 font-bold\">Great consistency!</div>\n              <div className=\"text-xs text-gray-600\">\n                Optimal workout duration\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        </div>\n      </div>\n\n      {/* Progress Charts */}\n      <div className=\"grid lg:grid-cols-2 gap-6 mb-8\">\n        <Card className=\"border border-slate-200/60 shadow-sm hover:shadow-md transition-all duration-300\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-lg font-semibold text-slate-900 flex items-center gap-2\">\n              <BarChart3 className=\"h-5 w-5 text-slate-600\" />\n              Weekly Activity\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={weeklyActivity} margin={{ top: 20, right: 20, bottom: 20, left: 20 }}>\n                  <XAxis \n                    dataKey=\"day\" \n                    axisLine={false}\n                    tickLine={false}\n                    tick={{ fontSize: 12, fill: '#6b7280' }}\n                  />\n                  <YAxis \n                    axisLine={false}\n                    tickLine={false}\n                    tick={{ fontSize: 10, fill: '#6b7280' }}\n                    domain={[0, 'dataMax + 0.5']}\n                  />\n                  <RechartsTooltip \n                    contentStyle={{\n                      backgroundColor: '#1f2937',\n                      border: 'none',\n                      borderRadius: '8px',\n                      color: 'white',\n                      fontSize: '12px'\n                    }}\n                    formatter={(value) => [`${value} visit${value !== 1 ? 's' : ''}`, 'Daily Activity']}\n                  />\n                  <Bar \n                    dataKey=\"visits\" \n                    fill=\"hsl(var(--primary))\" \n                    radius={[4, 4, 0, 0]}\n                    stroke=\"hsl(var(--primary))\"\n                    strokeWidth={1}\n                  >\n                    {weeklyActivity.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.visits > 0 ? 'hsl(var(--primary))' : '#e5e7eb'} />\n                    ))}\n                  </Bar>\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n            <div className=\"mt-4 flex items-center justify-between text-sm\">\n              <div className=\"flex items-center gap-2 bg-gradient-to-r from-white to-gray-50 px-3 py-2 rounded-lg shadow-md border\">\n                <div className=\"w-3 h-3 bg-primary rounded-full\"></div>\n                <span className=\"text-gray-900 font-semibold\">Workout completed</span>\n              </div>\n              <div className=\"flex items-center gap-2 bg-gradient-to-r from-white to-gray-50 px-3 py-2 rounded-lg shadow-md border\">\n                <div className=\"w-3 h-3 bg-gray-500 rounded-full\"></div>\n                <span className=\"text-gray-900 font-semibold\">Rest day</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border border-slate-200/60 shadow-sm hover:shadow-md transition-all duration-300\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-lg font-semibold text-slate-900 flex items-center gap-2\">\n              <Target className=\"h-5 w-5 text-slate-600\" />\n              Workout Focus\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64 flex items-center justify-center\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <PieChart>\n                  <Pie\n                    data={workoutTypes}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    innerRadius={60}\n                    outerRadius={100}\n                    paddingAngle={5}\n                    dataKey=\"value\"\n                    stroke=\"white\"\n                    strokeWidth={2}\n                  >\n                    {workoutTypes.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Pie>\n                  <RechartsTooltip \n                    contentStyle={{\n                      backgroundColor: '#1f2937',\n                      border: 'none',\n                      borderRadius: '8px',\n                      color: 'white',\n                      fontSize: '12px'\n                    }}\n                    formatter={(value) => [`${value}%`, 'Workout Time']}\n                  />\n                </PieChart>\n              </ResponsiveContainer>\n            </div>\n            <div className=\"grid grid-cols-3 gap-4 mt-6\">\n              {workoutTypes.map((type, index) => (\n                <div key={index} className=\"text-center bg-gradient-to-br from-white to-blue-50 p-3 rounded-lg shadow-md border\">\n                  <div className=\"flex items-center justify-center gap-2 mb-1\">\n                    <div \n                      className=\"w-4 h-4 rounded-full border border-gray-300 shadow-sm\" \n                      style={{ backgroundColor: type.color }}\n                    />\n                    <span className=\"text-sm font-bold text-gray-900\">{type.name}</span>\n                  </div>\n                  <div className=\"text-xl font-bold text-gray-900\">{type.value}%</div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Enhanced Quick Actions */}\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        <Card className=\"bg-gradient-to-br from-blue-50/80 to-cyan-50/60 text-gray-900 relative overflow-hidden hover:shadow-lg transition-all duration-300 border border-slate-200/60 shadow-sm hover:border-blue-300/60\">\n          <div className=\"absolute top-0 right-0 w-20 h-20 bg-white/10 rounded-full -translate-y-10 translate-x-10\"></div>\n          <CardContent className=\"p-6 relative\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div>\n                <h3 className=\"text-lg font-bold text-slate-900 mb-2 flex items-center gap-2\">\n                  🤖 AI Workout Planner\n                </h3>\n                <p className=\"text-slate-600 text-sm leading-relaxed\">Get a personalized workout plan tailored to your goals</p>\n              </div>\n              <div className=\"w-12 h-12 bg-white/40 rounded-xl flex items-center justify-center backdrop-blur-sm\">\n                <Brain className=\"text-primary h-6 w-6\" />\n              </div>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button\n                    variant=\"secondary\"\n                    onClick={() => onTabChange(\"workout-planner\")}\n                    className=\"bg-gradient-to-r from-green-500 to-emerald-500 text-white hover:from-green-600 hover:to-emerald-600 font-semibold shadow-md\"\n                    data-testid=\"button-create-plan\"\n                  >\n                    Create Plan ✨\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>🤖 Let AI design the perfect workout just for you!</p>\n                </TooltipContent>\n              </Tooltip>\n              <div className=\"text-xs text-gray-700 font-medium bg-primary/5 border border-primary/20 px-2 py-1 rounded\">\n                AI-powered recommendations\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-indigo-50/80 to-blue-50/60 text-gray-900 relative overflow-hidden hover:shadow-lg transition-all duration-300 border border-slate-200/60 shadow-sm hover:border-indigo-300/60\">\n          <div className=\"absolute bottom-0 left-0 w-16 h-16 bg-white/10 rounded-full -translate-y-8 -translate-x-8\"></div>\n          <CardContent className=\"p-6 relative\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div>\n                <h3 className=\"text-lg font-bold text-slate-900 mb-2 flex items-center gap-2\">\n                  🎁 Loyalty Rewards\n                </h3>\n                <p className=\"text-slate-600 text-sm leading-relaxed\">Redeem your {user?.loyaltyPoints} points for exclusive rewards</p>\n              </div>\n              <div className=\"w-12 h-12 bg-white/40 rounded-xl flex items-center justify-center backdrop-blur-sm\">\n                <Gift className=\"text-blue-600 h-6 w-6\" />\n              </div>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button\n                    variant=\"secondary\"\n                    onClick={() => onTabChange(\"loyalty-rewards\")}\n                    className=\"bg-gradient-to-r from-blue-500 to-cyan-500 text-white hover:from-blue-600 hover:to-cyan-600 font-semibold shadow-md\"\n                    data-testid=\"button-view-rewards\"\n                  >\n                    View Rewards 🏆\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>🎁 Discover amazing perks you've earned!</p>\n                </TooltipContent>\n              </Tooltip>\n              <div className=\"text-xs text-gray-700 font-medium bg-blue-50 border border-blue-200 px-2 py-1 rounded\">\n                8 rewards available\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Enhanced Quick Access to Workout History */}\n      <div className=\"mt-8\">\n        <Card className=\"bg-gradient-to-br from-green-50/80 to-emerald-50/60 text-gray-900 relative overflow-hidden hover:shadow-lg transition-all duration-300 border border-slate-200/60 shadow-sm hover:border-green-300/60\">\n          <div className=\"absolute top-0 left-1/2 w-24 h-24 bg-white/10 rounded-full -translate-y-12 -translate-x-12\"></div>\n          <CardContent className=\"p-6 relative\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div>\n                <h3 className=\"text-lg font-bold text-slate-900 mb-2 flex items-center gap-2\">\n                  📊 Workout History\n                </h3>\n                <p className=\"text-slate-600 text-sm leading-relaxed\">Track your progress and view past workouts</p>\n              </div>\n              <div className=\"w-12 h-12 bg-white/60 rounded-xl flex items-center justify-center backdrop-blur-sm\">\n                <BarChart3 className=\"text-green-600 h-6 w-6\" />\n              </div>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <Button\n                    variant=\"secondary\"\n                    onClick={() => onTabChange(\"workout-history\")}\n                    className=\"bg-gradient-to-r from-purple-500 to-indigo-500 text-white hover:from-purple-600 hover:to-indigo-600 font-semibold shadow-md\"\n                    data-testid=\"button-view-history\"\n                  >\n                    View History 📈\n                  </Button>\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>📊 See your incredible fitness journey progress!</p>\n                </TooltipContent>\n              </Tooltip>\n              <div className=\"text-xs text-gray-700 font-medium bg-green-50 border border-green-200 px-2 py-1 rounded\">\n                {currentVisits} workouts this month\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nfunction WorkoutHistory() {\n  // Mock workout history data\n  const workoutHistory = [\n    {\n      id: 1,\n      date: \"2024-08-20\",\n      type: \"Upper Body Strength\",\n      duration: 75,\n      exercises: 8,\n      caloriesBurned: 420,\n      notes: \"Great session! Increased bench press weight.\"\n    },\n    {\n      id: 2,\n      date: \"2024-08-18\", \n      type: \"Cardio & Core\",\n      duration: 45,\n      exercises: 6,\n      caloriesBurned: 380,\n      notes: \"Feeling stronger on planks\"\n    },\n    {\n      id: 3,\n      date: \"2024-08-16\",\n      type: \"Lower Body Strength\",\n      duration: 80,\n      exercises: 7,\n      caloriesBurned: 450,\n      notes: \"New PR on squats! 🎉\"\n    },\n    {\n      id: 4,\n      date: \"2024-08-14\",\n      type: \"Full Body HIIT\",\n      duration: 50,\n      exercises: 10,\n      caloriesBurned: 520,\n      notes: \"Intense session, feeling accomplished\"\n    },\n    {\n      id: 5,\n      date: \"2024-08-12\",\n      type: \"Yoga & Flexibility\",\n      duration: 60,\n      exercises: 12,\n      caloriesBurned: 180,\n      notes: \"Much needed recovery session\"\n    }\n  ];\n\n  const weeklyProgress = [\n    { week: 'Week 1', workouts: 3, avgDuration: 60, totalCalories: 1200 },\n    { week: 'Week 2', workouts: 4, avgDuration: 65, totalCalories: 1450 },\n    { week: 'Week 3', workouts: 5, avgDuration: 58, totalCalories: 1580 },\n    { week: 'Week 4', workouts: 4, avgDuration: 70, totalCalories: 1380 }\n  ];\n\n  const totalWorkouts = workoutHistory.length;\n  const totalHours = Math.round(workoutHistory.reduce((sum, w) => sum + w.duration, 0) / 60);\n  const avgDuration = Math.round(workoutHistory.reduce((sum, w) => sum + w.duration, 0) / totalWorkouts);\n  const totalCalories = workoutHistory.reduce((sum, w) => sum + w.caloriesBurned, 0);\n\n  return (\n    <div className=\"p-8 max-w-6xl mx-auto\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">🏋️ Workout History</h1>\n        <p className=\"text-gray-600\">Track your fitness journey and celebrate your progress 🎯</p>\n      </div>\n\n      {/* Progress Stats */}\n      <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Total Workouts</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{totalWorkouts}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-blue-100 rounded-xl flex items-center justify-center\">\n                <Activity className=\"text-blue-600 h-6 w-6\" />\n              </div>\n            </div>\n            <p className=\"text-xs text-gray-500 mt-2\">Last 30 days</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Total Hours</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{totalHours}h</p>\n              </div>\n              <div className=\"w-12 h-12 bg-green-100 rounded-xl flex items-center justify-center\">\n                <Clock className=\"text-green-600 h-6 w-6\" />\n              </div>\n            </div>\n            <p className=\"text-xs text-gray-500 mt-2\">Time invested</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Avg Duration</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{avgDuration}min</p>\n              </div>\n              <div className=\"w-12 h-12 bg-purple-100 rounded-xl flex items-center justify-center\">\n                <Target className=\"text-purple-600 h-6 w-6\" />\n              </div>\n            </div>\n            <p className=\"text-xs text-gray-500 mt-2\">Per session</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Calories Burned</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{totalCalories.toLocaleString()}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-orange-100 rounded-xl flex items-center justify-center\">\n                <Flame className=\"text-orange-600 h-6 w-6\" />\n              </div>\n            </div>\n            <p className=\"text-xs text-gray-500 mt-2\">Total burned</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Progress Chart */}\n      <div className=\"grid lg:grid-cols-2 gap-6 mb-8\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              📈 Weekly Progress\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={weeklyProgress}>\n                  <XAxis \n                    dataKey=\"week\" \n                    axisLine={false}\n                    tickLine={false}\n                    tick={{ fontSize: 12 }}\n                  />\n                  <YAxis \n                    axisLine={false}\n                    tickLine={false}\n                    tick={{ fontSize: 12 }}\n                  />\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"workouts\"\n                    stroke=\"hsl(var(--primary))\"\n                    strokeWidth={3}\n                    dot={{ fill: 'hsl(var(--primary))', strokeWidth: 2, r: 5 }}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              🔥 Calories Burned Trend\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={weeklyProgress}>\n                  <XAxis \n                    dataKey=\"week\" \n                    axisLine={false}\n                    tickLine={false}\n                    tick={{ fontSize: 12 }}\n                  />\n                  <YAxis \n                    axisLine={false}\n                    tickLine={false}\n                    tick={{ fontSize: 12 }}\n                  />\n                  <Bar \n                    dataKey=\"totalCalories\" \n                    fill=\"#10b981\" \n                    radius={[4, 4, 0, 0]}\n                  />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Workout History List */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            🏆 Recent Workouts\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {workoutHistory.map((workout, index) => (\n              <div key={workout.id} className=\"border border-gray-200 rounded-lg p-4 hover:shadow-sm transition-shadow\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                      {workout.type.includes('Cardio') ? <span className=\"text-lg\">🏃</span> : \n                       workout.type.includes('Strength') ? <span className=\"text-lg\">💪</span> :\n                       workout.type.includes('HIIT') ? <span className=\"text-lg\">⚡</span> :\n                       workout.type.includes('Yoga') ? <span className=\"text-lg\">🧘</span> :\n                       <span className=\"text-primary font-semibold text-sm\">#{totalWorkouts - index}</span>}\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900\">{workout.type}</h3>\n                      <p className=\"text-sm text-gray-600\">\n                        {new Date(workout.date).toLocaleDateString('en-US', { \n                          weekday: 'long', \n                          year: 'numeric', \n                          month: 'short', \n                          day: 'numeric' \n                        })}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-sm font-medium text-gray-900\">{workout.duration} min</p>\n                    <p className=\"text-xs text-gray-600\">{workout.caloriesBurned} calories</p>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4 mb-3 text-sm\">\n                  <div className=\"flex items-center gap-2\">\n                    <Clock className=\"h-4 w-4 text-gray-600\" />\n                    <span className=\"text-gray-600\">{workout.duration} minutes</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Activity className=\"h-4 w-4 text-gray-600\" />\n                    <span className=\"text-gray-600\">{workout.exercises} exercises</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Flame className=\"h-4 w-4 text-gray-600\" />\n                    <span className=\"text-gray-600\">{workout.caloriesBurned} calories</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Trophy className=\"h-4 w-4 text-gray-600\" />\n                    <span className=\"text-gray-600\">+{Math.round(workout.caloriesBurned / 10)} points</span>\n                  </div>\n                </div>\n\n                {workout.notes && (\n                  <div className=\"bg-gray-50 rounded-lg p-3\">\n                    <p className=\"text-sm text-gray-700\">{workout.notes}</p>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nfunction ProfilePage() {\n  const { user } = useAuthContext();\n\n  return (\n    <div className=\"p-8 max-w-4xl mx-auto\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Profile Settings</h1>\n        <p className=\"text-gray-600\">Manage your account information and preferences</p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Account Information</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">First Name</label>\n              <div className=\"p-3 bg-gray-50 rounded-lg text-gray-900\" data-testid=\"text-profile-first-name\">\n                {user?.firstName}\n              </div>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Last Name</label>\n              <div className=\"p-3 bg-gray-50 rounded-lg text-gray-900\" data-testid=\"text-profile-last-name\">\n                {user?.lastName}\n              </div>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Email</label>\n              <div className=\"p-3 bg-gray-50 rounded-lg text-gray-900\" data-testid=\"text-profile-email\">\n                {user?.email}\n              </div>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Membership Type</label>\n              <div className=\"p-3 bg-gray-50 rounded-lg text-gray-900 capitalize\" data-testid=\"text-profile-membership\">\n                {user?.membershipType}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"pt-6 border-t\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"font-semibold text-gray-900\">Loyalty Points</h3>\n                <p className=\"text-gray-600\">Your current reward balance</p>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-2xl font-bold text-primary\" data-testid=\"text-profile-points\">\n                  {user?.loyaltyPoints}\n                </p>\n                <p className=\"text-sm text-gray-600\">points</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":37487},"client/src/pages/StaffDashboard.tsx":{"content":"import { useState } from \"react\";\nimport { AppLayout } from \"@/components/ui/layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { \n  Users, \n  TrendingUp, \n  DollarSign, \n  Calendar,\n  Activity,\n  UserCheck,\n  Clock,\n  Award\n} from \"lucide-react\";\nimport { LineChart, Line, XAxis, YAxis, ResponsiveContainer, BarChart, Bar, PieChart, Pie, Cell, AreaChart, Area } from \"recharts\";\nimport { CustomerChurnAnalysis } from \"@/pages/CustomerChurnAnalysis\";\nimport { LoyaltyCampaigns } from \"@/pages/LoyaltyCampaigns\";\nimport { SalesPersona } from \"@/pages/SalesPersona\";\n\nexport function StaffDashboard() {\n  const [activeTab, setActiveTab] = useState(\"customer-churn-analysis\");\n\n  const renderContent = () => {\n    switch (activeTab) {\n      case \"loyalty-campaigns\":\n        return <LoyaltyCampaigns />;\n      case \"member-analytics\":\n        return <MemberAnalytics />;\n      case \"sales-persona\":\n        return <SalesPersona />;\n      default:\n        return <CustomerChurnAnalysis />;\n    }\n  };\n\n  return (\n    <AppLayout\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      userRole=\"staff\"\n    >\n      {renderContent()}\n    </AppLayout>\n  );\n}\n\nfunction MemberAnalytics() {\n  // Mock analytics data\n  const membershipGrowth = [\n    { month: 'Jan', newMembers: 45, churnedMembers: 12, totalMembers: 450 },\n    { month: 'Feb', newMembers: 52, churnedMembers: 8, totalMembers: 494 },\n    { month: 'Mar', newMembers: 38, churnedMembers: 15, totalMembers: 517 },\n    { month: 'Apr', newMembers: 61, churnedMembers: 10, totalMembers: 568 },\n    { month: 'May', newMembers: 44, churnedMembers: 7, totalMembers: 605 },\n    { month: 'Jun', newMembers: 49, churnedMembers: 13, totalMembers: 641 }\n  ];\n\n  const membershipTypes = [\n    { name: 'Premium', value: 315, color: '#3b82f6', revenue: 24885 },\n    { name: 'Basic', value: 248, color: '#10b981', revenue: 7192 },\n    { name: 'Student', value: 78, color: '#f59e0b', revenue: 1482 }\n  ];\n\n  const peakHours = [\n    { time: '06:00', members: 45 },\n    { time: '07:00', members: 78 },\n    { time: '08:00', members: 95 },\n    { time: '09:00', members: 62 },\n    { time: '10:00', members: 34 },\n    { time: '11:00', members: 28 },\n    { time: '12:00', members: 52 },\n    { time: '13:00', members: 48 },\n    { time: '14:00', members: 31 },\n    { time: '15:00', members: 29 },\n    { time: '16:00', members: 41 },\n    { time: '17:00', members: 89 },\n    { time: '18:00', members: 124 },\n    { time: '19:00', members: 98 },\n    { time: '20:00', members: 67 },\n    { time: '21:00', members: 43 }\n  ];\n\n  const totalMembers = 641;\n  const monthlyRevenue = 33559;\n  const avgVisitsPerMember = 8.4;\n  const memberRetentionRate = 92;\n\n  return (\n    <div className=\"p-8 max-w-7xl mx-auto\">\n      <div className=\"mb-12\">\n        <div className=\"max-w-6xl mx-auto text-center\">\n          <span className=\"inline-block px-4 py-2 bg-red-600 text-white text-sm font-bold uppercase tracking-wider rounded-full mb-4\">\n            Staff Dashboard\n          </span>\n          <h1 className=\"text-4xl lg:text-6xl font-black tracking-tight text-gray-900 leading-tight mb-6\">\n            MEMBER{\" \"}\n            <span className=\"text-red-600 block\">ANALYTICS</span>\n          </h1>\n          <p className=\"text-xl text-gray-700 leading-relaxed mb-8 max-w-2xl mx-auto\">\n            Comprehensive insights into member behavior and club performance\n          </p>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <Card className=\"border border-slate-200/60 shadow-sm hover:shadow-md transition-all duration-300\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-xs font-semibold uppercase tracking-wider text-slate-500\">Total Members</p>\n                <p className=\"text-3xl font-bold text-slate-900\">{totalMembers}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-blue-100 rounded-xl flex items-center justify-center\">\n                <Users className=\"text-blue-600 h-6 w-6\" />\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2 mt-4\">\n              <TrendingUp className=\"h-4 w-4 text-green-500\" />\n              <span className=\"text-sm text-green-600 font-medium\">+7.6% from last month</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border border-slate-200/60 shadow-sm hover:shadow-md transition-all duration-300\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-xs font-semibold uppercase tracking-wider text-slate-500\">Monthly Revenue</p>\n                <p className=\"text-3xl font-bold text-slate-900\">£{monthlyRevenue.toLocaleString()}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-green-100 rounded-xl flex items-center justify-center\">\n                <DollarSign className=\"text-green-600 h-6 w-6\" />\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2 mt-4\">\n              <TrendingUp className=\"h-4 w-4 text-green-500\" />\n              <span className=\"text-sm text-green-600 font-medium\">+12.3% vs last month</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border border-slate-200/60 shadow-sm hover:shadow-md transition-all duration-300\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-xs font-semibold uppercase tracking-wider text-slate-500\">Avg Visits/Member</p>\n                <p className=\"text-3xl font-bold text-slate-900\">{avgVisitsPerMember}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-purple-100 rounded-xl flex items-center justify-center\">\n                <Activity className=\"text-purple-600 h-6 w-6\" />\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2 mt-4\">\n              <Calendar className=\"h-4 w-4 text-blue-500\" />\n              <span className=\"text-sm text-gray-600\">per month</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border border-slate-200/60 shadow-sm hover:shadow-md transition-all duration-300\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Retention Rate</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{memberRetentionRate}%</p>\n              </div>\n              <div className=\"w-12 h-12 bg-orange-100 rounded-xl flex items-center justify-center\">\n                <UserCheck className=\"text-orange-600 h-6 w-6\" />\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2 mt-4\">\n              <Award className=\"h-4 w-4 text-yellow-500\" />\n              <span className=\"text-sm text-gray-600\">Industry leading</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts Grid */}\n      <div className=\"grid lg:grid-cols-2 gap-6 mb-8\">\n        <Card className=\"border border-slate-200/60 shadow-sm hover:shadow-md transition-all duration-300\">\n          <CardHeader>\n            <CardTitle>Membership Growth Trend</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-80\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <AreaChart data={membershipGrowth}>\n                  <XAxis \n                    dataKey=\"month\" \n                    axisLine={false}\n                    tickLine={false}\n                    tick={{ fontSize: 12 }}\n                  />\n                  <YAxis \n                    axisLine={false}\n                    tickLine={false}\n                    tick={{ fontSize: 12 }}\n                  />\n                  <Area\n                    type=\"monotone\"\n                    dataKey=\"totalMembers\"\n                    stroke=\"hsl(var(--primary))\"\n                    fill=\"hsl(var(--primary))\"\n                    fillOpacity={0.1}\n                  />\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"totalMembers\"\n                    stroke=\"hsl(var(--primary))\"\n                    strokeWidth={2}\n                    dot={{ fill: 'hsl(var(--primary))', strokeWidth: 2, r: 4 }}\n                  />\n                </AreaChart>\n              </ResponsiveContainer>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border border-slate-200/60 shadow-sm hover:shadow-md transition-all duration-300\">\n          <CardHeader>\n            <CardTitle>Peak Hours Analysis</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-80\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={peakHours}>\n                  <XAxis \n                    dataKey=\"time\" \n                    axisLine={false}\n                    tickLine={false}\n                    tick={{ fontSize: 10 }}\n                  />\n                  <YAxis \n                    axisLine={false}\n                    tickLine={false}\n                    tick={{ fontSize: 12 }}\n                  />\n                  <Bar \n                    dataKey=\"members\" \n                    fill=\"hsl(var(--primary))\" \n                    radius={[2, 2, 0, 0]}\n                  />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Membership Breakdown */}\n      <div className=\"grid lg:grid-cols-3 gap-6\">\n        <Card className=\"lg:col-span-1 border border-slate-200/60 shadow-sm hover:shadow-md transition-all duration-300\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-lg font-semibold text-slate-900 flex items-center gap-2\">\n              📊 Membership Distribution\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64 flex items-center justify-center\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <PieChart>\n                  <Pie\n                    data={membershipTypes}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    innerRadius={50}\n                    outerRadius={90}\n                    paddingAngle={5}\n                    dataKey=\"value\"\n                  >\n                    {membershipTypes.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Pie>\n                </PieChart>\n              </ResponsiveContainer>\n            </div>\n            <div className=\"space-y-2 mt-4\">\n              {membershipTypes.map((type, index) => (\n                <div key={index} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <div \n                      className=\"w-3 h-3 rounded-full\" \n                      style={{ backgroundColor: type.color }}\n                    />\n                    <span className=\"text-sm font-medium\">\n                      {type.name === 'Premium' ? '⭐ ' : type.name === 'Basic' ? '🌱 ' : '🎓 '}\n                      {type.name}\n                    </span>\n                  </div>\n                  <span className=\"text-sm text-gray-600\">{type.value} members</span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"lg:col-span-2 border border-slate-200/60 shadow-sm hover:shadow-md transition-all duration-300\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-lg font-semibold text-slate-900 flex items-center gap-2\">\n              💰 Revenue by Membership Type\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {membershipTypes.map((type, index) => {\n                const revenuePercentage = (type.revenue / monthlyRevenue) * 100;\n                return (\n                  <div key={index} className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"font-medium\">{type.name} (${type.revenue.toLocaleString()})</span>\n                      <span className=\"text-gray-600\">{Math.round(revenuePercentage)}%</span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-3\">\n                      <div \n                        className=\"h-3 rounded-full transition-all duration-300\" \n                        style={{ \n                          width: `${revenuePercentage}%`,\n                          backgroundColor: type.color \n                        }}\n                      />\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13345},"client/src/pages/WorkoutPlanner.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Sparkles, Dumbbell, AlertTriangle, Heart, User, Shield } from \"lucide-react\";\nimport { Tooltip, TooltipContent, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\ninterface WorkoutDay {\n  day: string;\n  focus: string;\n  description: string;\n  exercises: string[];\n}\n\ninterface WorkoutPlan {\n  planTitle: string;\n  weeklySchedule: WorkoutDay[];\n}\n\ninterface HealthData {\n  age: string;\n  fitnessLevel: string;\n  exerciseExperience: string;\n  medicalConditions: string;\n  medicalClearance: boolean;\n  personalTrainerConsent: boolean;\n}\n\nexport function WorkoutPlanner() {\n  const [currentStep, setCurrentStep] = useState(1); // 1: Health Data, 2: Goals, 3: Generated Plan\n  const [healthData, setHealthData] = useState<HealthData>({\n    age: '',\n    fitnessLevel: '',\n    exerciseExperience: '',\n    medicalConditions: '',\n    medicalClearance: false,\n    personalTrainerConsent: false\n  });\n  const [goals, setGoals] = useState(\"\");\n  const [workoutPlan, setWorkoutPlan] = useState<WorkoutPlan | null>(null);\n  const { toast } = useToast();\n\n  const generatePlanMutation = useMutation({\n    mutationFn: async (data: { goals: string; healthData: HealthData }) => {\n      const response = await apiRequest(\"POST\", \"/api/ai/workout-plan\", data);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      setWorkoutPlan(data);\n      toast({\n        title: \"Workout Plan Created!\",\n        description: \"Your personalized plan is ready.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate workout plan. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleHealthDataSubmit = () => {\n    if (!healthData.age || !healthData.fitnessLevel || !healthData.exerciseExperience) {\n      toast({\n        title: \"Information Required\",\n        description: \"Please fill in all required health information.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (!healthData.medicalClearance || !healthData.personalTrainerConsent) {\n      toast({\n        title: \"Consent Required\",\n        description: \"Please confirm both medical clearance and personal trainer consultation agreements.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setCurrentStep(2);\n  };\n\n  const handleGeneratePlan = () => {\n    if (!goals.trim()) {\n      toast({\n        title: \"Goals Required\",\n        description: \"Please describe your fitness goals first.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    generatePlanMutation.mutate({ goals: goals.trim(), healthData });\n    setCurrentStep(3);\n  };\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"mb-12 content-spacing\">\n          <h1 className=\"text-4xl md:text-5xl font-bold text-readable-primary\">AI Workout Planner</h1>\n          <p className=\"text-gray-600\">\n            Get a personalized workout plan designed with your health profile and goals in mind.\n          </p>\n        </div>\n\n        {/* Progress indicator */}\n        <div className=\"flex items-center justify-center mb-8\">\n          <div className=\"flex items-center\">\n            <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-semibold ${\n              currentStep >= 1 ? 'bg-primary text-white' : 'bg-gray-200 text-gray-600'\n            }`}>\n              1\n            </div>\n            <div className={`w-16 h-1 ${\n              currentStep >= 2 ? 'bg-primary' : 'bg-gray-200'\n            }`}></div>\n            <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-semibold ${\n              currentStep >= 2 ? 'bg-primary text-white' : 'bg-gray-200 text-gray-600'\n            }`}>\n              2\n            </div>\n            <div className={`w-16 h-1 ${\n              currentStep >= 3 ? 'bg-primary' : 'bg-gray-200'\n            }`}></div>\n            <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-semibold ${\n              currentStep >= 3 ? 'bg-primary text-white' : 'bg-gray-200 text-gray-600'\n            }`}>\n              3\n            </div>\n          </div>\n        </div>\n        <div className=\"flex justify-center mb-8 space-x-4 text-sm text-gray-600\">\n          <span className={currentStep === 1 ? 'font-semibold text-primary' : ''}>Health Profile</span>\n          <span className={currentStep === 2 ? 'font-semibold text-primary' : ''}>Fitness Goals</span>\n          <span className={currentStep === 3 ? 'font-semibold text-primary' : ''}>Your Plan</span>\n        </div>\n\n        {/* Step 1: Health Data Collection */}\n        {currentStep === 1 && (\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <User className=\"h-5 w-5\" />\n                Health & Safety Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Medical Disclaimer */}\n              <Alert className=\"border-red-200 bg-red-50\">\n                <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                <AlertDescription className=\"text-red-800\">\n                  <strong>Important Medical Disclaimer:</strong> Before starting any exercise program, please consult with your healthcare provider, \n                  especially if you have any medical conditions, injuries, or concerns about your health. This AI-generated workout plan is for \n                  informational purposes only and should not replace professional medical advice.\n                </AlertDescription>\n              </Alert>\n              \n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"age\">Age *</Label>\n                  <Input\n                    id=\"age\"\n                    type=\"number\"\n                    placeholder=\"e.g., 25\"\n                    value={healthData.age}\n                    onChange={(e) => setHealthData({...healthData, age: e.target.value})}\n                    data-testid=\"input-age\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"fitness-level\">Current Fitness Level *</Label>\n                  <Select value={healthData.fitnessLevel} onValueChange={(value) => setHealthData({...healthData, fitnessLevel: value})}>\n                    <SelectTrigger data-testid=\"select-fitness-level\">\n                      <SelectValue placeholder=\"Select your level\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"beginner\">Beginner - New to exercise</SelectItem>\n                      <SelectItem value=\"intermediate\">Intermediate - Regular exercise</SelectItem>\n                      <SelectItem value=\"advanced\">Advanced - Very active lifestyle</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"experience\">Exercise Experience *</Label>\n                  <Select value={healthData.exerciseExperience} onValueChange={(value) => setHealthData({...healthData, exerciseExperience: value})}>\n                    <SelectTrigger data-testid=\"select-experience\">\n                      <SelectValue placeholder=\"Select experience\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"none\">No experience</SelectItem>\n                      <SelectItem value=\"some\">Some experience (0-2 years)</SelectItem>\n                      <SelectItem value=\"moderate\">Moderate experience (2-5 years)</SelectItem>\n                      <SelectItem value=\"extensive\">Extensive experience (5+ years)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"conditions\">Medical Conditions or Injuries (Optional)</Label>\n                <Textarea\n                  id=\"conditions\"\n                  placeholder=\"List any medical conditions, injuries, or physical limitations that should be considered...\"\n                  value={healthData.medicalConditions}\n                  onChange={(e) => setHealthData({...healthData, medicalConditions: e.target.value})}\n                  className=\"min-h-20\"\n                  data-testid=\"textarea-conditions\"\n                />\n              </div>\n              \n              {/* Consent checkboxes */}\n              <div className=\"space-y-4 p-4 bg-gray-50 rounded-lg\">\n                <div className=\"flex items-start space-x-3\">\n                  <Checkbox\n                    id=\"medical-clearance\"\n                    checked={healthData.medicalClearance}\n                    onCheckedChange={(checked) => setHealthData({...healthData, medicalClearance: checked as boolean})}\n                    data-testid=\"checkbox-medical-clearance\"\n                  />\n                  <Label htmlFor=\"medical-clearance\" className=\"text-sm leading-5\">\n                    I confirm that I have consulted with my healthcare provider about starting an exercise program, \n                    and I have been cleared for physical activity. I understand the risks involved in exercise.\n                  </Label>\n                </div>\n                \n                <div className=\"flex items-start space-x-3\">\n                  <Checkbox\n                    id=\"trainer-consent\"\n                    checked={healthData.personalTrainerConsent}\n                    onCheckedChange={(checked) => setHealthData({...healthData, personalTrainerConsent: checked as boolean})}\n                    data-testid=\"checkbox-trainer-consent\"\n                  />\n                  <Label htmlFor=\"trainer-consent\" className=\"text-sm leading-5\">\n                    I understand this is an AI-generated plan and agree to consult with qualified personal trainers \n                    at Member Buddy before starting this workout program for proper form guidance and safety.\n                  </Label>\n                </div>\n              </div>\n              \n              <Button\n                onClick={handleHealthDataSubmit}\n                className=\"w-full flex items-center gap-2 bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white font-semibold shadow-md\"\n                data-testid=\"button-continue-health\"\n              >\n                <Shield className=\"h-4 w-4\" />\n                Continue to Goals\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n        \n        {/* Step 2: Goals */}\n        {currentStep === 2 && (\n          <Card className=\"mb-8\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Sparkles className=\"h-5 w-5\" />\n                Tell us about your goals\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Textarea\n                placeholder=\"Example: I want to build muscle in my upper body and improve my cardio. I can train 4 days a week and have about 1 hour per session.\"\n                value={goals}\n                onChange={(e) => setGoals(e.target.value)}\n                className=\"min-h-32\"\n                data-testid=\"textarea-workout-goals\"\n              />\n              <div className=\"flex gap-4\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setCurrentStep(1)}\n                  className=\"bg-gradient-to-r from-gray-100 to-gray-200 text-gray-700 border-gray-300 hover:from-gray-200 hover:to-gray-300 hover:text-gray-800 font-medium\"\n                  data-testid=\"button-back-health\"\n                >\n                  Back\n                </Button>\n                <Button\n                  onClick={handleGeneratePlan}\n                  disabled={generatePlanMutation.isPending || !goals.trim()}\n                  className=\"flex items-center gap-2 flex-1 bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white font-bold shadow-md disabled:from-gray-400 disabled:to-gray-500\"\n                  data-testid=\"button-generate-plan\"\n                >\n                  <Sparkles className=\"h-4 w-4\" />\n                  {generatePlanMutation.isPending ? \"Creating Plan...\" : \"Create My Plan! ✨\"}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Step 3: Loading State and Generated Plan */}\n        {currentStep === 3 && generatePlanMutation.isPending && (\n          <Card className=\"p-8 text-center\">\n            <div className=\"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-primary mb-4\"></div>\n            <p className=\"text-gray-600\">Our AI is creating your personalized workout plan based on your health profile...</p>\n          </Card>\n        )}\n\n        {/* Generated Workout Plan */}\n        {currentStep === 3 && workoutPlan && (\n          <Card className=\"overflow-hidden\">\n            <CardHeader className=\"bg-gradient-to-r from-primary to-primary/90 text-white\">\n              <CardTitle className=\"text-2xl mb-2\" data-testid=\"text-plan-title\">\n                {workoutPlan.planTitle}\n              </CardTitle>\n              <p className=\"text-primary-foreground/80\">Customized for your goals and schedule</p>\n            </CardHeader>\n            \n            {/* AI Disclaimer */}\n            <div className=\"px-6 pt-6\">\n              <Alert className=\"border-orange-200 bg-orange-50\">\n                <AlertTriangle className=\"h-4 w-4 text-orange-600\" />\n                <AlertDescription className=\"text-orange-800\">\n                  <strong>AI-Generated Content:</strong> This workout plan is created by artificial intelligence based on your input. \n                  Please consult with our qualified fitness coaches or your healthcare provider before starting any new exercise program, \n                  especially if you have any health conditions or concerns.\n                </AlertDescription>\n              </Alert>\n            </div>\n            \n            <CardContent className=\"p-6\">\n              <Accordion type=\"single\" collapsible className=\"space-y-4\">\n                {workoutPlan.weeklySchedule.map((day, index) => (\n                  <AccordionItem\n                    key={index}\n                    value={`day-${index}`}\n                    className=\"bg-gray-50 rounded-lg border-0\"\n                    data-testid={`workout-day-${index}`}\n                  >\n                    <AccordionTrigger className=\"p-4 hover:bg-gray-100 rounded-lg\">\n                      <span className=\"flex items-center justify-between w-full\">\n                        <span className=\"font-semibold text-gray-900\">\n                          {day.day} - {day.focus}\n                        </span>\n                      </span>\n                    </AccordionTrigger>\n                    <AccordionContent className=\"px-4 pb-4 pt-2\">\n                      <p className=\"text-gray-600 mb-3\">{day.description}</p>\n                      <ul className=\"space-y-2\">\n                        {day.exercises.map((exercise, exerciseIndex) => {\n                          // Get appropriate icon based on exercise type\n                          let icon = <Dumbbell className=\"text-primary h-4 w-4\" />;\n                          if (exercise.toLowerCase().includes('push') || exercise.toLowerCase().includes('press')) {\n                            icon = <span className=\"text-base\">💪</span>;\n                          } else if (exercise.toLowerCase().includes('run') || exercise.toLowerCase().includes('cardio')) {\n                            icon = <span className=\"text-base\">🏃</span>;\n                          } else if (exercise.toLowerCase().includes('squat') || exercise.toLowerCase().includes('lunge')) {\n                            icon = <span className=\"text-base\">🧿</span>;\n                          } else if (exercise.toLowerCase().includes('stretch') || exercise.toLowerCase().includes('yoga')) {\n                            icon = <span className=\"text-base\">🧘</span>;\n                          } else if (exercise.toLowerCase().includes('jump') || exercise.toLowerCase().includes('burpee')) {\n                            icon = <span className=\"text-base\">⚡</span>;\n                          }\n                          \n                          return (\n                            <li key={exerciseIndex} className=\"flex items-center gap-2\">\n                              {icon}\n                              <span>{exercise}</span>\n                            </li>\n                          );\n                        })}\n                      </ul>\n                    </AccordionContent>\n                  </AccordionItem>\n                ))}\n              </Accordion>\n              \n              {/* Professional Consultation Reminder */}\n              <div className=\"mt-6 pt-6 border-t border-gray-200\">\n                <Alert className=\"border-blue-200 bg-blue-50\">\n                  <Heart className=\"h-4 w-4 text-blue-600\" />\n                  <AlertDescription className=\"text-blue-800\">\n                    <strong>Your Safety Matters:</strong> Remember to warm up before exercising, listen to your body, and stop if you feel pain. \n                    For best results and safety, consider scheduling a session with our certified personal trainers who can review this plan \n                    and make personalized adjustments for your fitness level and any physical limitations.\n                  </AlertDescription>\n                </Alert>\n              </div>\n              \n              {/* Start New Plan Button */}\n              <div className=\"mt-6 pt-6 border-t border-gray-200 text-center\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setCurrentStep(1);\n                    setWorkoutPlan(null);\n                    setGoals('');\n                    setHealthData({\n                      age: '',\n                      fitnessLevel: '',\n                      exerciseExperience: '',\n                      medicalConditions: '',\n                      medicalClearance: false,\n                      personalTrainerConsent: false\n                    });\n                  }}\n                  className=\"bg-gradient-to-r from-teal-500 to-cyan-500 text-white border-teal-500 hover:from-teal-600 hover:to-cyan-600 hover:border-teal-600 font-semibold shadow-md\"\n                  data-testid=\"button-new-plan\"\n                >\n                  Create New Plan\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":20240},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border text-card-foreground shadow-sm\",\n      className\n    )}\n    style={{\n      background: 'var(--card)',\n      ...props.style\n    }}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1924},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-gray-600 [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10473},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/layout.tsx":{"content":"import {\n  Sidebar,\n  SidebarContent,\n  SidebarProvider,\n  SidebarInset,\n  SidebarHeader,\n} from \"@/components/ui/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dumbbell,\n  LayoutDashboard,\n  Gift,\n  User,\n  LogOut,\n  TrendingUp,\n  Megaphone,\n  Users,\n  Mail,\n  Shield,\n  ToggleLeft,\n  ToggleRight,\n  Rocket,\n} from \"lucide-react\";\nimport { useAuthContext } from \"@/contexts/AuthContext\";\nimport { NotificationCenter } from \"@/components/NotificationCenter\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n  activeTab: string;\n  onTabChange: (tab: string) => void;\n  userRole: \"member\" | \"staff\";\n}\n\nexport function AppLayout({\n  children,\n  activeTab,\n  onTabChange,\n  userRole,\n}: LayoutProps) {\n  const { user } = useAuthContext();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const handleSignOut = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  const toggleRoleMutation = useMutation({\n    mutationFn: async () => {\n      const newRole = user?.role === \"staff\" ? \"member\" : \"staff\";\n      const response = await apiRequest(\"POST\", \"/api/user/toggle-role\", {\n        role: newRole,\n      });\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Role Updated\",\n        description: `Switched to ${user?.role === \"staff\" ? \"Member\" : \"Staff\"} mode. Page will reload.`,\n      });\n      // Reload to update the interface\n      setTimeout(() => window.location.reload(), 1000);\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to toggle role. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const memberTabs = [\n    { id: \"dashboard\", label: \"Dashboard\", icon: LayoutDashboard },\n    { id: \"workout-planner\", label: \"AI Workout Planner\", icon: Dumbbell },\n    { id: \"loyalty-rewards\", label: \"Loyalty Rewards\", icon: Gift },\n    { id: \"profile\", label: \"Profile\", icon: User },\n  ];\n\n  const staffTabs = [\n    { id: \"customer-churn-analysis\", label: \"Customer Churn Analysis\", icon: TrendingUp },\n    { id: \"loyalty-campaigns\", label: \"Loyalty Campaigns\", icon: Megaphone },\n    { id: \"member-analytics\", label: \"Member Analytics\", icon: Users },\n    { id: \"sales-persona\", label: \"Sales Persona\", icon: Rocket },\n  ];\n\n  const tabs = userRole === \"staff\" ? staffTabs : memberTabs;\n  const primaryColor =\n    userRole === \"staff\"\n      ? \"text-blue-600 bg-blue-50\"\n      : \"text-primary bg-primary/10\";\n  const roleDisplayName =\n    userRole === \"staff\"\n      ? \"Staff Member\"\n      : `${user?.membershipType || \"Basic\"} Member`;\n\n  return (\n    <div className=\"flex min-h-screen\">\n      {/* Fixed Sidebar */}\n      <div className=\"fixed inset-y-0 left-0 w-80 bg-white border-r border-gray-200 opacity-70 hover:opacity-100 transition-opacity duration-300 overflow-y-auto\">\n        <div className=\"p-6\">\n          <div className=\"flex items-center gap-3 mb-8\">\n            <div className=\"w-8 h-8 bg-gradient-to-br from-primary to-primary/80 rounded-lg flex items-center justify-center\">\n              <Dumbbell className=\"text-white h-4 w-4\" />\n            </div>\n            <span className=\"text-xl font-bold text-gray-900\">\n              Member Buddy\n            </span>\n          </div>\n\n          {/* User Profile */}\n          <div\n            className={`bg-gradient-to-br ${userRole === \"staff\" ? \"from-blue-50 to-purple-50\" : \"from-primary/5 to-blue-50\"} p-4 rounded-xl mb-6`}\n          >\n            <div className=\"flex items-center gap-3 mb-3\">\n              <Avatar className=\"h-12 w-12\">\n                <AvatarFallback\n                  className={\n                    userRole === \"staff\"\n                      ? \"bg-blue-600 text-white\"\n                      : \"bg-primary text-white\"\n                  }\n                >\n                  {user?.firstName?.[0]}\n                  {user?.lastName?.[0]}\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1 min-w-0\">\n                <h2\n                  className=\"text-sm font-semibold text-gray-900\"\n                  data-testid=\"text-user-name\"\n                >\n                  {user?.firstName} {user?.lastName}\n                </h2>\n                <p className=\"text-xs text-gray-600\">{roleDisplayName}</p>\n              </div>\n            </div>\n            {userRole === \"member\" && (\n              <div className=\"flex items-center gap-2 text-sm text-primary\">\n                <Shield className=\"h-4 w-4\" />\n                <span data-testid=\"text-loyalty-points\">\n                  {user?.loyaltyPoints}\n                </span>\n                <span>points</span>\n              </div>\n            )}\n            {userRole === \"staff\" && (\n              <div className=\"flex items-center gap-2 text-sm text-blue-700\">\n                <Shield className=\"h-4 w-4\" />\n                <span>Member Relations</span>\n              </div>\n            )}\n\n            {/* Role Toggle for Testing - Development Only */}\n            <div className=\"mt-3 pt-3 border-t border-gray-200\">\n              <div className=\"flex items-center justify-between text-xs\">\n                <span className=\"text-gray-600\">Persona Testing:</span>\n                <Badge\n                  variant={userRole === \"staff\" ? \"default\" : \"secondary\"}\n                  className=\"text-xs\"\n                >\n                  {userRole === \"staff\" ? \"Staff\" : \"Member\"}\n                </Badge>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"w-full mt-2 text-xs justify-start gap-2 text-gray-600 hover:text-gray-900\"\n                onClick={() => toggleRoleMutation.mutate()}\n                disabled={toggleRoleMutation.isPending}\n                data-testid=\"button-toggle-role\"\n              >\n                {user?.role === \"staff\" ? (\n                  <ToggleRight className=\"h-3 w-3\" />\n                ) : (\n                  <ToggleLeft className=\"h-3 w-3\" />\n                )}\n                <span>\n                  {toggleRoleMutation.isPending\n                    ? \"Switching...\"\n                    : `Switch to ${user?.role === \"staff\" ? \"Member\" : \"Staff\"}`}\n                </span>\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"px-6\">\n          {/* Navigation */}\n          <nav className=\"space-y-2\">\n            {tabs.map((tab) => (\n              <Button\n                key={tab.id}\n                variant=\"ghost\"\n                className={`w-full justify-start gap-3 ${\n                  activeTab === tab.id\n                    ? primaryColor\n                    : \"text-gray-600 hover:text-gray-900 hover:bg-gray-50\"\n                }`}\n                onClick={() => onTabChange(tab.id)}\n                data-testid={`nav-${tab.id}`}\n              >\n                <tab.icon className=\"h-5 w-5\" />\n                <span>{tab.label}</span>\n              </Button>\n            ))}\n          </nav>\n\n          <div className=\"mt-8 pt-6 border-t border-gray-200\">\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start gap-3 text-gray-600 hover:text-red-600\"\n              onClick={handleSignOut}\n              data-testid=\"button-sign-out\"\n            >\n              <LogOut className=\"h-5 w-5\" />\n              <span>Sign Out</span>\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 ml-80\">{children}</div>\n    </div>\n  );\n}\n","size_bytes":7931},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-gray-900 dark:bg-gray-100 px-3 py-1.5 text-sm text-white dark:text-gray-900 shadow-lg animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1233},"client/src/pages/ChurnEmailManagement.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Mail,\n  CheckCircle,\n  XCircle,\n  Send,\n  Clock,\n  User,\n  Calendar,\n  Eye,\n  EyeOff,\n} from \"lucide-react\";\n\ninterface ChurnEmail {\n  id: string;\n  memberId: string;\n  subject: string;\n  content: string;\n  riskLevel: string;\n  currentRiskBand: string;\n  previousRiskBand?: string;\n  memberProfile: {\n    firstName: string;\n    lastName: string;\n    email: string;\n    membershipType: string;\n    joinDate: string;\n    lastVisit?: string;\n    loyaltyPoints: number;\n  };\n  status: string;\n  approvedBy?: string;\n  approvedAt?: string;\n  sentAt?: string;\n  createdAt: string;\n  updatedAt: string;\n  memberName?: string;\n  memberEmail?: string;\n  memberMembershipType?: string;\n}\n\nexport function ChurnEmailManagement() {\n  const [emails, setEmails] = useState<ChurnEmail[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedEmail, setSelectedEmail] = useState<ChurnEmail | null>(null);\n  const [expandedContent, setExpandedContent] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetchChurnEmails();\n  }, []);\n\n  const fetchChurnEmails = async () => {\n    try {\n      const response = await fetch(\"/api/staff/churn-emails\", {\n        credentials: \"include\",\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setEmails(data);\n      }\n    } catch (error) {\n      console.error(\"Error fetching churn emails:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleApprove = async (emailId: string) => {\n    try {\n      const response = await fetch(\n        `/api/staff/churn-emails/${emailId}/approve`,\n        {\n          method: \"POST\",\n          credentials: \"include\",\n        },\n      );\n      if (response.ok) {\n        await fetchChurnEmails(); // Refresh the list\n      }\n    } catch (error) {\n      console.error(\"Error approving email:\", error);\n    }\n  };\n\n  const handleReject = async (emailId: string) => {\n    try {\n      const response = await fetch(\n        `/api/staff/churn-emails/${emailId}/reject`,\n        {\n          method: \"POST\",\n          credentials: \"include\",\n        },\n      );\n      if (response.ok) {\n        await fetchChurnEmails(); // Refresh the list\n      }\n    } catch (error) {\n      console.error(\"Error rejecting email:\", error);\n    }\n  };\n\n  const handleMarkSent = async (emailId: string) => {\n    try {\n      const response = await fetch(`/api/staff/churn-emails/${emailId}/send`, {\n        method: \"POST\",\n        credentials: \"include\",\n      });\n      if (response.ok) {\n        await fetchChurnEmails(); // Refresh the list\n      }\n    } catch (error) {\n      console.error(\"Error marking email as sent:\", error);\n    }\n  };\n\n  const getRiskBadgeColor = (riskLevel: string) => {\n    switch (riskLevel) {\n      case \"high\":\n        return \"bg-red-600 hover:bg-red-700 text-white shadow-sm\";\n      case \"medium\":\n        return \"bg-amber-500 hover:bg-amber-600 text-white shadow-sm\";\n      case \"low\":\n        return \"bg-yellow-500 hover:bg-yellow-600 text-white shadow-sm\";\n      default:\n        return \"bg-gray-500 hover:bg-gray-600 text-white shadow-sm\";\n    }\n  };\n\n  const getStatusBadgeColor = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return \"bg-blue-600 hover:bg-blue-700 text-white shadow-sm\";\n      case \"approved\":\n        return \"bg-emerald-600 hover:bg-emerald-700 text-white shadow-sm\";\n      case \"rejected\":\n        return \"bg-red-600 hover:bg-red-700 text-white shadow-sm\";\n      case \"sent\":\n        return \"bg-purple-600 hover:bg-purple-700 text-white shadow-sm\";\n      default:\n        return \"bg-gray-500 hover:bg-gray-600 text-white shadow-sm\";\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"en-GB\", {\n      day: \"numeric\",\n      month: \"short\",\n      year: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  const truncateContent = (content: string, maxLength: number = 150) => {\n    if (content.length <= maxLength) return content;\n    return content.substring(0, maxLength) + \"...\";\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 p-6\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n            <div className=\"text-slate-600 text-lg\">\n              Loading churn emails...\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      <div className=\"p-8 space-y-8\">\n        <div className=\"bg-white rounded-2xl shadow-lg border border-slate-200 p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-slate-800 mb-2\">\n                Churn Prevention Emails\n              </h1>\n              <p className=\"text-slate-600 text-lg\">\n                Review and approve AI-generated emails to prevent member churn\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-6\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">\n                  {emails.filter((e) => e.status === \"pending\").length}\n                </div>\n                <div className=\"text-sm text-slate-500\">Pending Approval</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-emerald-600\">\n                  {emails.filter((e) => e.status === \"approved\").length}\n                </div>\n                <div className=\"text-sm text-slate-500\">Approved</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-purple-600\">\n                  {emails.filter((e) => e.status === \"sent\").length}\n                </div>\n                <div className=\"text-sm text-slate-500\">Sent</div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {emails.length === 0 ? (\n          <Card className=\"border border-slate-200/60 shadow-sm hover:shadow-md transition-all duration-300\">\n            <CardContent className=\"flex items-center justify-center h-64\">\n              <div className=\"text-center\">\n                <Mail className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-500\">\n                  No churn prevention emails generated yet\n                </p>\n                <p className=\"text-sm text-gray-400 mt-2\">\n                  Emails are automatically generated when members move between\n                  risk bands\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"space-y-4\">\n            {emails.map((email) => (\n              <Card\n                key={email.id}\n                className=\"hover:shadow-md transition-shadow border border-slate-200/60 shadow-sm hover:shadow-md transition-all duration-300\"\n              >\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-3 mb-2\">\n                        <h3 className=\"font-semibold text-gray-900\">\n                          {email.subject}\n                        </h3>\n                        <Badge\n                          className={`${getRiskBadgeColor(email.riskLevel)} text-white text-xs`}\n                        >\n                          {email.riskLevel.toUpperCase()} RISK\n                        </Badge>\n                        <Badge\n                          className={`${getStatusBadgeColor(email.status)} text-white text-xs`}\n                        >\n                          {email.status.toUpperCase()}\n                        </Badge>\n                      </div>\n\n                      <div className=\"flex items-center space-x-6 text-sm text-gray-600\">\n                        <div className=\"flex items-center space-x-1\">\n                          <User className=\"h-4 w-4\" />\n                          <span>\n                            {email.memberName ||\n                              `${email.memberProfile.firstName} ${email.memberProfile.lastName}`}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center space-x-1\">\n                          <Mail className=\"h-4 w-4\" />\n                          <span>\n                            {email.memberEmail || email.memberProfile.email}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center space-x-1\">\n                          <Calendar className=\"h-4 w-4\" />\n                          <span>{formatDate(email.createdAt)}</span>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center space-x-2\">\n                      {email.status === \"pending\" && (\n                        <>\n                          <Button\n                            size=\"sm\"\n                            onClick={() => handleApprove(email.id)}\n                            className=\"bg-green-600 hover:bg-green-700 text-white\"\n                          >\n                            <CheckCircle className=\"h-4 w-4 mr-1\" />\n                            Approve\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleReject(email.id)}\n                            className=\"border-red-600 text-red-600 hover:bg-red-50\"\n                          >\n                            <XCircle className=\"h-4 w-4 mr-1\" />\n                            Reject\n                          </Button>\n                        </>\n                      )}\n\n                      {email.status === \"approved\" && (\n                        <Button\n                          size=\"sm\"\n                          onClick={() => handleMarkSent(email.id)}\n                          className=\"bg-purple-600 hover:bg-purple-700 text-white\"\n                        >\n                          <Send className=\"h-4 w-4 mr-1\" />\n                          Mark Sent\n                        </Button>\n                      )}\n\n                      {email.status === \"sent\" && (\n                        <div className=\"flex items-center text-green-600 text-sm\">\n                          <CheckCircle className=\"h-4 w-4 mr-1\" />\n                          Sent\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </CardHeader>\n\n                <CardContent className=\"pt-0\">\n                  <div className=\"border-t pt-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm text-gray-700 leading-relaxed\">\n                          {expandedContent === email.id\n                            ? email.content\n                            : truncateContent(email.content)}\n                        </p>\n\n                        {email.content.length > 150 && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={() =>\n                              setExpandedContent(\n                                expandedContent === email.id ? null : email.id,\n                              )\n                            }\n                            className=\"mt-2 p-0 h-auto text-blue-600 hover:text-blue-800\"\n                          >\n                            {expandedContent === email.id ? (\n                              <>\n                                <EyeOff className=\"h-4 w-4 mr-1\" />\n                                Show less\n                              </>\n                            ) : (\n                              <>\n                                <Eye className=\"h-4 w-4 mr-1\" />\n                                Show full email\n                              </>\n                            )}\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"mt-3 pt-3 border-t bg-gray-50 -mx-6 px-6 py-3\">\n                      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-xs text-gray-600\">\n                        <div>\n                          <span className=\"font-medium\">Membership:</span>\n                          <br />\n                          {email.memberMembershipType ||\n                            email.memberProfile.membershipType}\n                        </div>\n                        <div>\n                          <span className=\"font-medium\">Risk Band:</span>\n                          <br />\n                          {email.currentRiskBand}\n                        </div>\n                        <div>\n                          <span className=\"font-medium\">Last Visit:</span>\n                          <br />\n                          {email.memberProfile.lastVisit\n                            ? Math.floor(\n                                (Date.now() -\n                                  new Date(\n                                    email.memberProfile.lastVisit,\n                                  ).getTime()) /\n                                  (1000 * 60 * 60 * 24),\n                              ) + \" days ago\"\n                            : \"Never\"}\n                        </div>\n                        <div>\n                          <span className=\"font-medium\">Loyalty Points:</span>\n                          <br />\n                          {email.memberProfile.loyaltyPoints}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":14578},"client/src/pages/SalesPersona.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Rocket,\n  Users,\n  Activity,\n  Mail,\n  User,\n  Clock,\n  CheckCircle,\n  AlertCircle,\n  Bot,\n  MessageCircle,\n  X,\n} from \"lucide-react\";\n\ninterface Prospect {\n  id: number;\n  name: string;\n  email: string;\n  status: \"New\" | \"Contacted\" | \"Interested\";\n  socialMediaHandle: string;\n  phone?: string;\n  location?: string;\n  leadSource?: string;\n}\n\ninterface SocialPersonas {\n  [handle: string]: {\n    interests: string[];\n  };\n}\n\ninterface ActivityLog {\n  id: number;\n  timestamp: string;\n  message: string;\n  type: \"info\" | \"success\" | \"warning\";\n}\n\ninterface GeneratedEmail {\n  id: number;\n  prospectName: string;\n  subject: string;\n  content: string;\n  timestamp: string;\n}\n\ninterface ChatMessage {\n  role: \"agent\" | \"user\";\n  content: string;\n  buttons?: Array<{ text: string; value: string }>;\n  timestamp: string;\n}\n\nexport function SalesPersona() {\n  const [crmData, setCrmData] = useState<Prospect[]>([]);\n  const [socialPersonas, setSocialPersonas] = useState<SocialPersonas>({});\n  const [activityLog, setActivityLog] = useState<ActivityLog[]>([]);\n  const [generatedEmails, setGeneratedEmails] = useState<GeneratedEmail[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [sendingEmails, setSendingEmails] = useState<Set<number>>(new Set());\n  \n  // Chat state\n  const [showChat, setShowChat] = useState(false);\n  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([]);\n  const [currentStep, setCurrentStep] = useState<string>(\"greeting\");\n  const [newLeads, setNewLeads] = useState<Prospect[]>([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  \n  const { toast } = useToast();\n\n  // Show proactive agent greeting when page loads\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setShowChat(true);\n      const newLeadsCount = crmData.filter(p => p.status === \"New\").length;\n      setChatMessages([{\n        role: \"agent\",\n        content: `Hello! I'm your CRM Agent. I've detected ${newLeadsCount} new enquiries in the system. Would you like me to check the CRM for details?`,\n        buttons: [\n          { text: \"✅ Yes, check CRM\", value: \"approve_check\" },\n          { text: \"❌ Not now\", value: \"reject_check\" }\n        ],\n        timestamp: new Date().toLocaleTimeString()\n      }]);\n    }, 1000);\n\n    return () => clearTimeout(timer);\n  }, [crmData]);\n\n  // Fetch data from JSON files on mount\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [crmResponse, socialsResponse] = await Promise.all([\n          fetch(\"/crm_data.json\"),\n          fetch(\"/social_personas.json\"),\n        ]);\n\n        if (!crmResponse.ok || !socialsResponse.ok) {\n          throw new Error(\"Failed to fetch data files\");\n        }\n\n        const crmData = await crmResponse.json();\n        const socialData = await socialsResponse.json();\n\n        setCrmData(crmData);\n        setSocialPersonas(socialData);\n\n        addToActivityLog(\"System initialized successfully\", \"success\");\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to load CRM data. Please check the data files.\",\n          variant: \"destructive\",\n        });\n        addToActivityLog(\"Failed to initialize system\", \"warning\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // Helper function to add activity log entries\n  const addToActivityLog = (\n    message: string,\n    type: \"info\" | \"success\" | \"warning\" = \"info\",\n  ) => {\n    const newLog: ActivityLog = {\n      id: Date.now(),\n      timestamp: new Date().toLocaleTimeString(),\n      message,\n      type,\n    };\n    setActivityLog((prev) => [newLog, ...prev]);\n  };\n\n  // Handle chat button clicks\n  const handleChatButton = async (value: string) => {\n    const userMessage = chatMessages[chatMessages.length - 1];\n    const selectedButton = userMessage.buttons?.find(btn => btn.value === value);\n    \n    // Add user response\n    setChatMessages(prev => [...prev, {\n      role: \"user\",\n      content: selectedButton?.text || value,\n      timestamp: new Date().toLocaleTimeString()\n    }]);\n\n    let agentResponse: ChatMessage;\n\n    switch (value) {\n      case \"approve_check\":\n        const leads = crmData.filter(prospect => prospect.status === \"New\");\n        setNewLeads(leads);\n        setCurrentStep(\"show_leads\");\n        \n        agentResponse = {\n          role: \"agent\",\n          content: `Perfect! I found ${leads.length} new leads:\\n\\n${leads.map(lead => \n            `• ${lead.name} (${lead.email}) - ${lead.location || 'Unknown location'}`\n          ).join('\\n')}\\n\\nWould you like me to draft personalized outreach emails for these prospects?`,\n          buttons: [\n            { text: \"✅ Draft emails\", value: \"approve_draft\" },\n            { text: \"❌ Skip for now\", value: \"skip_draft\" }\n          ],\n          timestamp: new Date().toLocaleTimeString()\n        };\n        break;\n\n      case \"reject_check\":\n        agentResponse = {\n          role: \"agent\",\n          content: \"No problem! I'll stay on standby. Feel free to ask me anytime if you need help with CRM tasks or lead outreach.\",\n          timestamp: new Date().toLocaleTimeString()\n        };\n        setCurrentStep(\"standby\");\n        break;\n\n      case \"approve_draft\":\n        setIsProcessing(true);\n        agentResponse = {\n          role: \"agent\",\n          content: \"Great! I'm now drafting personalized emails for each lead based on their profile and social media interests. This will take a moment...\",\n          timestamp: new Date().toLocaleTimeString()\n        };\n        \n        // Process leads and generate emails\n        setTimeout(async () => {\n          await processLeadsAndGenerateEmails();\n          setChatMessages(prev => [...prev, {\n            role: \"agent\",\n            content: `I've drafted ${newLeads.length} personalized emails! Please review them in the emails panel. Would you like me to send them out?`,\n            buttons: [\n              { text: \"✅ Send emails\", value: \"approve_send\" },\n              { text: \"📝 Review first\", value: \"review_first\" }\n            ],\n            timestamp: new Date().toLocaleTimeString()\n          }]);\n          setIsProcessing(false);\n        }, 3000);\n        break;\n\n      case \"skip_draft\":\n        agentResponse = {\n          role: \"agent\",\n          content: \"Understood. The leads are available in your CRM panel whenever you're ready to reach out to them.\",\n          timestamp: new Date().toLocaleTimeString()\n        };\n        setCurrentStep(\"standby\");\n        break;\n\n      case \"approve_send\":\n        setIsProcessing(true);\n        agentResponse = {\n          role: \"agent\",\n          content: \"Sending all drafted emails now...\",\n          timestamp: new Date().toLocaleTimeString()\n        };\n        \n        setTimeout(async () => {\n          await sendAllEmails();\n          setChatMessages(prev => [...prev, {\n            role: \"agent\",\n            content: \"All emails have been sent successfully! I've updated the CRM status for each lead. Is there anything else you'd like me to help with?\",\n            timestamp: new Date().toLocaleTimeString()\n          }]);\n          setIsProcessing(false);\n        }, 2000);\n        break;\n\n      case \"review_first\":\n        agentResponse = {\n          role: \"agent\",\n          content: \"Good idea! Please review the emails in the panel on the right. Let me know when you're ready to send them.\",\n          buttons: [\n            { text: \"✅ Send now\", value: \"approve_send\" },\n            { text: \"🔄 Need changes\", value: \"need_changes\" }\n          ],\n          timestamp: new Date().toLocaleTimeString()\n        };\n        break;\n\n      case \"need_changes\":\n        agentResponse = {\n          role: \"agent\",\n          content: \"No problem! You can edit any email using the Edit button, or let me know what changes you'd like and I can regenerate them.\",\n          timestamp: new Date().toLocaleTimeString()\n        };\n        break;\n\n      default:\n        agentResponse = {\n          role: \"agent\",\n          content: \"I'm here to help with CRM management and lead outreach. What would you like me to do?\",\n          timestamp: new Date().toLocaleTimeString()\n        };\n    }\n\n    // Show typing indicator then add agent response after a delay\n    setIsProcessing(true);\n    setTimeout(() => {\n      setChatMessages(prev => [...prev, agentResponse]);\n      setIsProcessing(false);\n    }, 1000);\n  };\n\n  // Process leads and generate emails (same logic as original deployAgent)\n  const processLeadsAndGenerateEmails = async () => {\n    for (const lead of newLeads) {\n      addToActivityLog(`Processing ${lead.name}...`, \"info\");\n\n      const persona = socialPersonas[lead.socialMediaHandle];\n      if (!persona) {\n        addToActivityLog(`No social persona found for ${lead.socialMediaHandle}`, \"warning\");\n        continue;\n      }\n\n      try {\n        const systemInstruction = \"You are an expert sales copywriter for 'Virgin Active', a premium gym operating in London, UK. Your tone is encouraging, knowledgeable, and not pushy. Write a short, personalized outreach email. The goal is to get the prospect to click a virtual tour link and book a free trial session.\";\n        const userPrompt = `Generate an email for a prospect named ${lead.name}. Their social media persona suggests they are interested in: ${persona.interests.join(\", \")}. Make sure to include placeholders like [Virgin Active Virtual Tour Link] and mention the free trial.`;\n\n        const response = await fetch(\"/api/ai/sales-email\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ prompt: userPrompt, systemInstruction })\n        });\n\n        const data = await response.json();\n        const emailContent = data.content || \"Email generated successfully\";\n\n        const newEmail: GeneratedEmail = {\n          id: Date.now() + Math.random(),\n          prospectName: lead.name,\n          subject: `Transform Your Fitness Journey with Virgin Active`,\n          content: emailContent,\n          timestamp: new Date().toLocaleTimeString(),\n        };\n        \n        setGeneratedEmails(prev => [newEmail, ...prev]);\n        addToActivityLog(`✉️ Email generated for ${lead.name}`, \"success\");\n\n        // Update prospect status to 'Contacted'\n        setCrmData(prev =>\n          prev.map(prospect =>\n            prospect.id === lead.id\n              ? { ...prospect, status: \"Contacted\" as const }\n              : prospect\n          )\n        );\n\n      } catch (error) {\n        addToActivityLog(`❌ Failed to process ${lead.name}: ${error}`, \"warning\");\n      }\n\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    }\n  };\n\n  // Send all generated emails\n  const sendAllEmails = async () => {\n    for (const email of generatedEmails) {\n      const prospect = crmData.find(p => p.name === email.prospectName);\n      if (prospect) {\n        try {\n          const response = await fetch(\"/api/send-email\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n              to: prospect.email,\n              subject: email.subject,\n              content: email.content,\n              prospectName: email.prospectName,\n            }),\n          });\n\n          const result = await response.json();\n          if (response.ok && result.success) {\n            addToActivityLog(`✅ Email sent to ${prospect.name}`, \"success\");\n          } else {\n            throw new Error(result.error || \"Failed to send email\");\n          }\n        } catch (error: any) {\n          addToActivityLog(`❌ Failed to send email to ${prospect.name}`, \"warning\");\n        }\n      }\n    }\n  };\n\n  // Helper function to call Gemini API\n  const callGeminiAPI = async (\n    prompt: string,\n    systemInstruction: string,\n  ): Promise<string> => {\n    try {\n      const response = await fetch(\"/api/ai/sales-email\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          prompt,\n          systemInstruction,\n          model: \"gemini-2.5-flash-preview-05-20\",\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.status}`);\n      }\n\n      const data = await response.json();\n      return data.content || \"Email generated successfully\";\n    } catch (error) {\n      console.error(\"Gemini API error:\", error);\n      throw error;\n    }\n  };\n\n  // Send individual email function\n  const sendEmail = async (email: GeneratedEmail) => {\n    const prospect = crmData.find((p) => p.name === email.prospectName);\n    if (!prospect) {\n      toast({\n        title: \"Error\",\n        description: \"Prospect not found\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setSendingEmails((prev) => new Set(prev).add(email.id));\n    addToActivityLog(`📧 Sending email to ${prospect.name}...`, \"info\");\n\n    try {\n      const response = await fetch(\"/api/send-email\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          to: prospect.email,\n          subject: email.subject,\n          content: email.content,\n          prospectName: email.prospectName,\n        }),\n      });\n\n      const result = await response.json();\n\n      if (response.ok && result.success) {\n        addToActivityLog(\n          `✅ Email successfully sent to ${prospect.name}`,\n          \"success\",\n        );\n        toast({\n          title: \"Success\",\n          description: `Email sent to ${prospect.name} successfully!`,\n        });\n      } else {\n        throw new Error(\n          result.error || result.message || \"Failed to send email\",\n        );\n      }\n    } catch (error: any) {\n      console.error(\"Email sending error:\", error);\n      addToActivityLog(\n        `❌ Failed to send email to ${prospect.name}: ${error.message}`,\n        \"warning\",\n      );\n      toast({\n        title: \"Error\",\n        description:\n          error.message ||\n          \"Failed to send email. Please check email service configuration.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setSendingEmails((prev) => {\n        const newSet = new Set(prev);\n        newSet.delete(email.id);\n        return newSet;\n      });\n    }\n  };\n\n  // Get status badge variant\n  const getStatusBadge = (status: Prospect[\"status\"]) => {\n    switch (status) {\n      case \"New\":\n        return (\n          <Badge variant=\"default\" className=\"bg-blue-500 hover:bg-blue-600\">\n            New\n          </Badge>\n        );\n      case \"Contacted\":\n        return (\n          <Badge\n            variant=\"secondary\"\n            className=\"bg-yellow-500 text-white hover:bg-yellow-600\"\n          >\n            Contacted\n          </Badge>\n        );\n      case \"Interested\":\n        return (\n          <Badge variant=\"default\" className=\"bg-green-500 hover:bg-green-600\">\n            Interested\n          </Badge>\n        );\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  // Get activity log icon\n  const getLogIcon = (type: ActivityLog[\"type\"]) => {\n    switch (type) {\n      case \"success\":\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case \"warning\":\n        return <AlertCircle className=\"h-4 w-4 text-yellow-500\" />;\n      default:\n        return <Activity className=\"h-4 w-4 text-blue-500\" />;\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-8 max-w-7xl mx-auto\">\n      {/* Header */}\n      <div className=\"mb-12\">\n        <div className=\"max-w-6xl mx-auto text-center\">\n          <span className=\"inline-block px-4 py-2 bg-primary text-primary-foreground text-sm font-bold uppercase tracking-wider rounded-full mb-4\">\n            Sales Operations\n          </span>\n          <h1 className=\"text-4xl lg:text-6xl font-black tracking-tight text-foreground leading-tight mb-6\">\n            SALES <span className=\"text-primary block\">PERSONA AI</span>\n          </h1>\n          <p className=\"text-xl text-muted-foreground leading-relaxed mb-8 max-w-2xl mx-auto\">\n            AI-powered lead outreach and automated sales email generation\n          </p>\n        </div>\n      </div>\n\n      <div className=\"grid lg:grid-cols-3 gap-6\">\n        {/* Panel 1: CRM Prospects */}\n        <Card className=\"card-readable\">\n          <CardHeader className=\"p-6 bg-gradient-to-r from-primary/5 to-primary/10\">\n            <CardTitle className=\"flex items-center gap-2 text-foreground\">\n              <Users className=\"h-5 w-5 text-primary\" />\n              CRM Prospects\n              <Badge variant=\"outline\" className=\"ml-auto\">\n                {crmData.length} total\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-6 max-h-[600px] overflow-y-auto\">\n            <div className=\"space-y-3\">\n              {crmData.length > 0 ? (\n                crmData.map((prospect) => (\n                  <div\n                    key={prospect.id}\n                    className=\"border border-border rounded-lg p-4 hover:border-primary/30 transition-colors bg-card\"\n                  >\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div className=\"flex items-center gap-2\">\n                        <User className=\"h-4 w-4 text-primary\" />\n                        <span className=\"font-semibold text-foreground\">\n                          {prospect.name}\n                        </span>\n                      </div>\n                      {getStatusBadge(prospect.status)}\n                    </div>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex items-center gap-2 text-muted-foreground\">\n                        <Mail className=\"h-4 w-4\" />\n                        {prospect.email}\n                      </div>\n                      {prospect.phone && (\n                        <div className=\"flex items-center gap-2 text-muted-foreground\">\n                          <span className=\"text-xs\">📞</span>\n                          {prospect.phone}\n                        </div>\n                      )}\n                      {prospect.location && (\n                        <div className=\"flex items-center gap-2 text-muted-foreground\">\n                          <span className=\"text-xs\">📍</span>\n                          {prospect.location}\n                        </div>\n                      )}\n                      <div className=\"flex items-center justify-between pt-2 border-t border-border\">\n                        <span className=\"text-xs text-muted-foreground\">\n                          {prospect.socialMediaHandle}\n                        </span>\n                        {prospect.leadSource && (\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            {prospect.leadSource}\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <p className=\"text-muted-foreground text-center py-8\">\n                  No prospects found\n                </p>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Panel 2: AI Agent Control & Activity */}\n        <Card className=\"card-readable\">\n          <CardHeader className=\"p-6 bg-gradient-to-r from-primary/5 to-primary/10\">\n            <CardTitle className=\"flex items-center gap-2 text-foreground\">\n              <Rocket className=\"h-5 w-5 text-primary\" />\n              AI Agent Activity\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            {/* Agent Activity Log */}\n            <div>\n              <h3 className=\"text-lg font-semibold mb-3 flex items-center gap-2 text-foreground\">\n                <Activity className=\"h-5 w-5 text-primary\" />\n                Activity Log\n              </h3>\n              <Card className=\"border-border\">\n                <CardContent className=\"p-0\">\n                  <ScrollArea className=\"h-[500px] w-full\">\n                    <div className=\"p-4\">\n                      {activityLog.length > 0 ? (\n                        <div className=\"space-y-3\">\n                          {activityLog.map((log) => (\n                            <div\n                              key={log.id}\n                              className=\"flex items-start gap-3 text-sm\"\n                            >\n                              {getLogIcon(log.type)}\n                              <div className=\"flex-1\">\n                                <div className=\"flex items-center gap-2 mb-1\">\n                                  <Clock className=\"h-3 w-3 text-muted-foreground\" />\n                                  <span className=\"text-xs text-muted-foreground\">\n                                    {log.timestamp}\n                                  </span>\n                                </div>\n                                <p className=\"text-foreground\">{log.message}</p>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      ) : (\n                        <p className=\"text-muted-foreground text-center py-8\">\n                          No activity yet. The agent will start processing when you interact with it.\n                        </p>\n                      )}\n                    </div>\n                  </ScrollArea>\n                </CardContent>\n              </Card>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Panel 3: Email Preview */}\n        <Card className=\"card-readable\">\n          <CardHeader className=\"p-6 bg-gradient-to-r from-primary/5 to-primary/10\">\n            <CardTitle className=\"flex items-center gap-2 text-foreground\">\n              <Mail className=\"h-5 w-5 text-primary\" />\n              Generated Emails\n              <Badge variant=\"outline\" className=\"ml-auto\">\n                {generatedEmails.length} emails\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ScrollArea className=\"h-[600px] w-full\">\n              <div className=\"space-y-4\">\n                {generatedEmails.length > 0 ? (\n                  generatedEmails.map((email) => (\n                    <Card\n                      key={email.id}\n                      className=\"border border-slate-100 bg-white\"\n                    >\n                      <CardHeader className=\"pb-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-2\">\n                            <Mail className=\"h-4 w-4 text-green-600\" />\n                            <span className=\"font-semibold text-gray-900\">\n                              {email.prospectName}\n                            </span>\n                          </div>\n                          <span className=\"text-xs text-gray-500\">\n                            {email.timestamp}\n                          </span>\n                        </div>\n                        <p className=\"text-sm font-medium text-gray-800 border-l-4 border-red-600 pl-3\">\n                          {email.subject}\n                        </p>\n                      </CardHeader>\n                      <CardContent className=\"pt-0\">\n                        <div className=\"bg-gray-50 rounded-lg p-4 text-sm text-gray-700 whitespace-pre-wrap\">\n                          {email.content}\n                        </div>\n                        <div className=\"flex gap-2 mt-3\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            className=\"text-xs\"\n                            onClick={() =>\n                              navigator.clipboard.writeText(email.content)\n                            }\n                          >\n                            📋 Copy\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            className=\"text-xs\"\n                          >\n                            ✏️ Edit\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            className=\"text-xs bg-red-600 hover:bg-red-700\"\n                            onClick={() => sendEmail(email)}\n                            disabled={sendingEmails.has(email.id)}\n                          >\n                            {sendingEmails.has(email.id) ? (\n                              <>\n                                <div className=\"animate-spin rounded-full h-3 w-3 border-b-2 border-white mr-1\" />\n                                Sending...\n                              </>\n                            ) : (\n                              <>📧 Send Email</>\n                            )}\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Mail className=\"h-12 w-12 text-gray-300 mx-auto mb-4\" />\n                    <p className=\"text-gray-500\">No emails generated yet</p>\n                    <p className=\"text-sm text-gray-400 mt-2\">\n                      Interact with the CRM Agent to start generating personalized emails\n                    </p>\n                  </div>\n                )}\n              </div>\n            </ScrollArea>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Proactive CRM Agent Chat */}\n      {showChat && (\n        <div className=\"fixed bottom-6 right-6 z-50\">\n          <Card className=\"w-96 shadow-2xl border\">\n            <CardHeader className=\"bg-blue-600 text-white p-4 flex flex-row items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-8 h-8 bg-white/20 rounded-full flex items-center justify-center\">\n                  <Bot className=\"h-4 w-4\" />\n                </div>\n                <div>\n                  <h4 className=\"font-semibold\">CRM Agent</h4>\n                  <p className=\"text-xs text-blue-100\">\n                    {isProcessing ? \"Processing...\" : \"Online now\"}\n                  </p>\n                </div>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setShowChat(false)}\n                className=\"text-white/80 hover:text-white hover:bg-white/20\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </CardHeader>\n\n            <CardContent className=\"p-0\">\n              <ScrollArea className=\"h-80 p-4\">\n                <div className=\"space-y-4\">\n                  {chatMessages.map((message, index) => (\n                    <div\n                      key={index}\n                      className={`flex gap-3 ${\n                        message.role === \"user\" ? \"justify-end\" : \"\"\n                      }`}\n                    >\n                      {message.role === \"agent\" && (\n                        <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0\">\n                          <Bot className=\"h-4 w-4 text-blue-600\" />\n                        </div>\n                      )}\n                      <div\n                        className={`rounded-2xl p-3 max-w-72 ${\n                          message.role === \"user\"\n                            ? \"bg-gray-600 text-white rounded-tr-md\"\n                            : \"bg-gray-100 rounded-tl-md\"\n                        }`}\n                      >\n                        <p className=\"text-sm whitespace-pre-line\">{message.content}</p>\n                        <p className=\"text-xs opacity-70 mt-1\">{message.timestamp}</p>\n                        {message.buttons && (\n                          <div className=\"mt-3 flex flex-wrap gap-2\">\n                            {message.buttons.map((button, btnIndex) => (\n                              <Button\n                                key={btnIndex}\n                                size=\"sm\"\n                                variant=\"outline\"\n                                className=\"text-xs h-8\"\n                                onClick={() => handleChatButton(button.value)}\n                                disabled={isProcessing}\n                              >\n                                {button.text}\n                              </Button>\n                            ))}\n                          </div>\n                        )}\n                      </div>\n                      {message.role === \"user\" && (\n                        <div className=\"w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center flex-shrink-0\">\n                          <User className=\"h-4 w-4 text-gray-600\" />\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                  {isProcessing && (\n                    <div className=\"flex gap-3\">\n                      <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0\">\n                        <Bot className=\"h-4 w-4 text-blue-600\" />\n                      </div>\n                      <div className=\"bg-gray-100 rounded-2xl rounded-tl-md p-3\">\n                        <div className=\"flex space-x-1\">\n                          <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\n                          <div\n                            className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"\n                            style={{ animationDelay: \"0.1s\" }}\n                          ></div>\n                          <div\n                            className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"\n                            style={{ animationDelay: \"0.2s\" }}\n                          ></div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </ScrollArea>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":31180},"server/services/emailService.ts":{"content":"import sgMail from '@sendgrid/mail';\nimport { Resend } from 'resend';\nimport { EmailTrackingService } from './emailTrackingService';\nimport { v4 as uuidv4 } from 'uuid';\n\n// Initialize email services with API keys from environment\nif (process.env.SENDGRID_API_KEY) {\n  sgMail.setApiKey(process.env.SENDGRID_API_KEY);\n}\n\nconst resend = process.env.RESEND_API_KEY ? new Resend(process.env.RESEND_API_KEY) : null;\n\ninterface EmailData {\n  to: string;\n  subject: string;\n  content: string;\n  prospectName: string;\n}\n\ntype EmailProvider = 'sendgrid' | 'resend' | 'test';\n\nexport class EmailService {\n  private static getAvailableProvider(): { provider: EmailProvider; configured: boolean } {\n    console.log('🔧 Email Service Configuration Check:');\n    console.log('  RESEND_API_KEY:', process.env.RESEND_API_KEY ? 'configured ✅' : 'not set ❌');\n    console.log('  SENDGRID_API_KEY:', process.env.SENDGRID_API_KEY ? 'configured ✅' : 'not set ❌');\n    \n    if (process.env.RESEND_API_KEY) {\n      console.log('  Selected provider: Resend');\n      return { provider: 'resend', configured: true };\n    }\n    if (process.env.SENDGRID_API_KEY) {\n      console.log('  Selected provider: SendGrid');\n      return { provider: 'sendgrid', configured: true };\n    }\n    console.log('  Selected provider: Test mode');\n    return { provider: 'test', configured: false };\n  }\n\n  static async sendSalesEmail(emailData: EmailData): Promise<{ success: boolean; messageId?: string; error?: string; trackingId?: string }> {\n    const { provider, configured } = this.getAvailableProvider();\n    \n    try {\n      // Generate unique tracking ID\n      const trackingId = uuidv4();\n      \n      // Create tracking URLs\n      const baseUrl = process.env.REPLIT_DOMAIN ? `https://${process.env.REPLIT_DOMAIN}` : 'http://localhost:5000';\n      const trackingUrl = `${baseUrl}/api/track/${trackingId}`;\n      const virtualTourUrl = `${baseUrl}/api/virtual-tour/${trackingId}`;\n      \n      // Replace placeholders in email content with tracking links\n      const processedContent = emailData.content\n        .replace(/\\[Virgin Active Virtual Tour Link\\]/g, virtualTourUrl)\n        .replace(/\\[PROSPECT_NAME\\]/g, emailData.prospectName)\n        .replace(/\\[UNSUBSCRIBE_LINK\\]/g, 'https://www.virginactive.com/unsubscribe')\n        .replace(/\\[HOME_PAGE_LINK\\]/g, trackingUrl);\n\n      // Add home page link if not already present\n      const enhancedContent = processedContent.includes(trackingUrl) ? processedContent : \n        `${processedContent}\\n\\nExplore Virgin Active: ${trackingUrl}`;\n\n      const result = await (async () => {\n        switch (provider) {\n          case 'resend':\n            return await this.sendWithResend(emailData, enhancedContent);\n          case 'sendgrid':\n            return await this.sendWithSendGrid(emailData, enhancedContent);\n          case 'test':\n          default:\n            return await this.sendTestEmail(emailData, enhancedContent);\n        }\n      })();\n\n      // Log email interaction if sending was successful\n      if (result.success) {\n        await EmailTrackingService.logEmailSent(\n          emailData.to,\n          emailData.prospectName,\n          emailData.subject,\n          trackingId,\n          {\n            provider,\n            messageId: result.messageId,\n            timestamp: new Date().toISOString(),\n          }\n        );\n      }\n\n      return {\n        ...result,\n        trackingId\n      };\n    } catch (error: any) {\n      console.error(`Email service error (${provider}):`, error);\n      \n      return {\n        success: false,\n        error: error.message || 'Failed to send email'\n      };\n    }\n  }\n\n  private static async sendWithResend(emailData: EmailData, processedContent: string): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    if (!resend) {\n      return {\n        success: false,\n        error: 'Resend not configured. Please set RESEND_API_KEY environment variable.'\n      };\n    }\n\n    const { data, error } = await resend.emails.send({\n      from: 'Virgin Active <no-reply@virginactive.com>',\n      to: emailData.to,\n      subject: emailData.subject,\n      text: processedContent,\n      html: this.convertToHtml(processedContent),\n    });\n\n    if (error) {\n      return {\n        success: false,\n        error: error.message || 'Failed to send email via Resend'\n      };\n    }\n\n    return {\n      success: true,\n      messageId: data?.id\n    };\n  }\n\n  private static async sendWithSendGrid(emailData: EmailData, processedContent: string): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    const msg = {\n      to: emailData.to,\n      from: {\n        email: 'no-reply@virginactive.com',\n        name: 'Virgin Active Sales Team'\n      },\n      subject: emailData.subject,\n      text: processedContent,\n      html: this.convertToHtml(processedContent),\n      trackingSettings: {\n        clickTracking: {\n          enable: true,\n          enableText: false\n        },\n        openTracking: {\n          enable: true\n        }\n      }\n    };\n\n    const [response] = await sgMail.send(msg);\n    \n    return {\n      success: true,\n      messageId: response.headers['x-message-id'] as string\n    };\n  }\n\n  private static async sendTestEmail(emailData: EmailData, processedContent: string): Promise<{ success: boolean; messageId?: string; error?: string }> {\n    // Simulate email sending for testing/demo purposes\n    console.log('📧 TEST EMAIL MODE - Email would be sent:');\n    console.log(`To: ${emailData.to}`);\n    console.log(`Subject: ${emailData.subject}`);\n    console.log(`Content: ${processedContent.substring(0, 100)}...`);\n    \n    // Simulate delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    return {\n      success: true,\n      messageId: `test-${Date.now()}`\n    };\n  }\n\n  private static convertToHtml(textContent: string): string {\n    // Convert text email to HTML with Virgin Active branding\n    const lines = textContent.split('\\n');\n    const htmlLines = lines.map(line => {\n      if (line.trim() === '') return '<br>';\n      if (line.startsWith('Subject:')) {\n        return `<h2 style=\"color: #e60012; font-family: Arial, sans-serif;\">${line.replace('Subject:', '').trim()}</h2>`;\n      }\n      return `<p style=\"font-family: Arial, sans-serif; line-height: 1.6; color: #333;\">${line}</p>`;\n    });\n\n    return `\n      <div style=\"max-width: 600px; margin: 0 auto; padding: 20px; font-family: Arial, sans-serif;\">\n        <div style=\"background-color: #e60012; padding: 20px; text-align: center; margin-bottom: 30px;\">\n          <h1 style=\"color: white; margin: 0; font-size: 24px; font-weight: bold;\">VIRGIN ACTIVE</h1>\n        </div>\n        <div style=\"padding: 20px;\">\n          ${htmlLines.join('')}\n        </div>\n        <div style=\"background-color: #f8f9fa; padding: 20px; text-align: center; margin-top: 30px; border-top: 3px solid #e60012;\">\n          <p style=\"margin: 0; color: #666; font-size: 12px;\">\n            © Virgin Active. This email was sent from our Sales Team.<br>\n            <a href=\"https://www.virginactive.com/unsubscribe\" style=\"color: #e60012;\">Unsubscribe</a> | \n            <a href=\"https://www.virginactive.com/privacy\" style=\"color: #e60012;\">Privacy Policy</a>\n          </p>\n        </div>\n      </div>\n    `;\n  }\n\n  static getEmailServiceStatus(): { provider: EmailProvider; configured: boolean; description: string } {\n    const { provider, configured } = this.getAvailableProvider();\n    \n    const descriptions = {\n      'resend': configured ? 'Resend configured ✅' : 'Resend not configured',\n      'sendgrid': configured ? 'SendGrid configured ✅' : 'SendGrid not configured', \n      'test': 'Test mode - emails will be logged but not sent'\n    };\n    \n    return {\n      provider,\n      configured,\n      description: descriptions[provider]\n    };\n  }\n}","size_bytes":7856},"server/services/emailTrackingService.ts":{"content":"import { db } from \"../db\";\nimport { emailInteractions, type EmailInteraction, type InsertEmailInteraction } from \"@shared/schema\";\nimport { eq, desc } from \"drizzle-orm\";\n\nexport class EmailTrackingService {\n  // Create email interaction record\n  static async createEmailInteraction(interaction: InsertEmailInteraction): Promise<EmailInteraction> {\n    const [created] = await db\n      .insert(emailInteractions)\n      .values(interaction)\n      .returning();\n    return created;\n  }\n\n  // Get all interactions for a prospect\n  static async getEmailInteractionsByProspect(email: string): Promise<EmailInteraction[]> {\n    return await db\n      .select()\n      .from(emailInteractions)\n      .where(eq(emailInteractions.prospectEmail, email))\n      .orderBy(desc(emailInteractions.createdAt));\n  }\n\n  // Get interaction by tracking ID\n  static async getEmailInteractionByTrackingId(trackingId: string): Promise<EmailInteraction | undefined> {\n    const [interaction] = await db\n      .select()\n      .from(emailInteractions)\n      .where(eq(emailInteractions.trackingId, trackingId));\n    return interaction;\n  }\n\n  // Update email interaction\n  static async updateEmailInteraction(id: string, updates: Partial<EmailInteraction>): Promise<void> {\n    await db\n      .update(emailInteractions)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(emailInteractions.id, id));\n  }\n\n  // Log when an email is sent\n  static async logEmailSent(\n    prospectEmail: string, \n    prospectName: string, \n    subject: string, \n    trackingId: string,\n    metadata: any = {}\n  ): Promise<EmailInteraction> {\n    return await this.createEmailInteraction({\n      prospectEmail,\n      prospectName,\n      interactionType: 'email_sent',\n      emailSubject: subject,\n      trackingId,\n      metadata,\n    });\n  }\n\n  // Log when a link is clicked\n  static async logLinkClicked(trackingId: string, metadata: any = {}): Promise<void> {\n    const interaction = await this.getEmailInteractionByTrackingId(trackingId);\n    if (interaction) {\n      // Create new interaction for link click\n      await this.createEmailInteraction({\n        prospectEmail: interaction.prospectEmail,\n        prospectName: interaction.prospectName,\n        interactionType: 'link_clicked',\n        emailSubject: interaction.emailSubject,\n        trackingId,\n        metadata: { ...(interaction.metadata as any), ...metadata },\n      });\n    }\n  }\n\n  // Log when virtual tour is viewed\n  static async logTourViewed(trackingId: string, metadata: any = {}): Promise<void> {\n    const interaction = await this.getEmailInteractionByTrackingId(trackingId);\n    if (interaction) {\n      // Create new interaction for tour view\n      await this.createEmailInteraction({\n        prospectEmail: interaction.prospectEmail,\n        prospectName: interaction.prospectName,\n        interactionType: 'tour_viewed',\n        emailSubject: interaction.emailSubject,\n        trackingId,\n        metadata: { ...(interaction.metadata as any), ...metadata },\n      });\n    }\n  }\n\n  // Generate tracking URL for emails\n  static generateTrackingUrl(trackingId: string, baseUrl: string = ''): string {\n    return `${baseUrl}/?track=${trackingId}`;\n  }\n\n  // Get engagement summary for a prospect\n  static async getProspectEngagementSummary(email: string): Promise<{\n    totalInteractions: number;\n    emailsSent: number;\n    linksClicked: number;\n    toursViewed: number;\n    lastInteraction?: Date;\n  }> {\n    const interactions = await this.getEmailInteractionsByProspect(email);\n    \n    const summary = {\n      totalInteractions: interactions.length,\n      emailsSent: interactions.filter(i => i.interactionType === 'email_sent').length,\n      linksClicked: interactions.filter(i => i.interactionType === 'link_clicked').length,\n      toursViewed: interactions.filter(i => i.interactionType === 'tour_viewed').length,\n      lastInteraction: interactions.length > 0 ? interactions[0].createdAt || undefined : undefined,\n    };\n\n    return summary;\n  }\n}","size_bytes":4001},"client/src/pages/VirtualTour.tsx":{"content":"import React, { useState, useEffect } from 'react';\n\ninterface ProspectData {\n  name: string;\n  email: string;\n  location: string;\n  interest: string;\n  fitnessLevel: string;\n  goals?: string;\n  preferredSchedule?: string;\n}\n\ninterface TourMetrics {\n  success: boolean;\n  prospectName: string;\n  prospectEmail: string;\n  trackingId: string;\n}\n\nconst VirtualTour: React.FC = () => {\n  const [prospectData, setProspectData] = useState<ProspectData | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [trackingId, setTrackingId] = useState<string | null>(null);\n\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const trackingParam = params.get('track');\n    \n    if (trackingParam) {\n      setTrackingId(trackingParam);\n      recordTourView(trackingParam);\n    } else {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const recordTourView = async (trackingIdParam: string) => {\n    try {\n      const response = await fetch(`/api/virtual-tour/${trackingIdParam}`);\n      if (response.ok) {\n        const tourMetrics: TourMetrics = await response.json();\n        \n        // Load CRM data to get prospect details\n        const crmResponse = await fetch('/crm_data.json');\n        const crmData = await crmResponse.json();\n        \n        // Find matching prospect by email\n        const prospect = crmData.find((p: any) => \n          p.email === tourMetrics.prospectEmail ||\n          p.name.toLowerCase().includes(tourMetrics.prospectName.toLowerCase())\n        );\n        \n        if (prospect) {\n          setProspectData({\n            name: prospect.name,\n            email: prospect.email,\n            location: prospect.location,\n            interest: prospect.interest,\n            fitnessLevel: prospect.fitnessLevel,\n            goals: prospect.goals,\n            preferredSchedule: prospect.preferredSchedule,\n          });\n        }\n      }\n    } catch (error) {\n      console.error('Failed to record tour view:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const renderPersonalizedContent = () => {\n    if (!prospectData) {\n      return renderDefaultTour();\n    }\n\n    return (\n      <div className=\"bg-white\">\n        {/* Personalized Hero Section */}\n        <div \n          className=\"relative h-96 bg-cover bg-center\"\n          style={{\n            backgroundImage: \"url('https://images.unsplash.com/photo-1534438327276-14e5300c3a48?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80')\",\n          }}\n        >\n          <div className=\"absolute inset-0 bg-black bg-opacity-60\" />\n          <div className=\"relative z-10 flex items-center justify-center h-full\">\n            <div className=\"text-center text-white max-w-4xl mx-auto px-6\">\n              <h1 className=\"text-5xl font-bold mb-4\">\n                Welcome {prospectData.name.split(' ')[0]}!\n              </h1>\n              <p className=\"text-xl mb-6\">\n                Your personalized Virgin Active experience in {prospectData.location}\n              </p>\n              <p className=\"text-lg opacity-90\">\n                Based on your interest in {prospectData.interest.toLowerCase()}, \n                we've created a tour tailored just for you.\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Personalized Facilities Section */}\n        <div className=\"py-16 px-6\">\n          <div className=\"max-w-6xl mx-auto\">\n            <h2 className=\"text-3xl font-bold text-center mb-12 text-gray-900\">\n              Facilities Perfect for Your {prospectData.interest} Goals\n            </h2>\n            \n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {getPersonalizedFacilities(prospectData.interest).map((facility, index) => (\n                <div key={index} className=\"bg-white rounded-lg shadow-lg overflow-hidden\">\n                  <img \n                    src={facility.image} \n                    alt={facility.name}\n                    className=\"w-full h-48 object-cover\"\n                  />\n                  <div className=\"p-6\">\n                    <h3 className=\"text-xl font-bold mb-2 text-gray-900\">{facility.name}</h3>\n                    <p className=\"text-gray-600 mb-4\">{facility.description}</p>\n                    <div className=\"text-red-600 font-medium\">\n                      Perfect for: {facility.suitableFor}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Personalized Classes Section */}\n        <div className=\"bg-gray-50 py-16 px-6\">\n          <div className=\"max-w-6xl mx-auto\">\n            <h2 className=\"text-3xl font-bold text-center mb-12 text-gray-900\">\n              Classes Recommended for {prospectData.fitnessLevel} Level\n            </h2>\n            \n            <div className=\"grid md:grid-cols-2 gap-8\">\n              {getPersonalizedClasses(prospectData.fitnessLevel).map((classItem, index) => (\n                <div key={index} className=\"bg-white rounded-lg shadow-lg p-6\">\n                  <div className=\"flex items-center mb-4\">\n                    <div className=\"w-12 h-12 bg-red-600 rounded-lg flex items-center justify-center text-white font-bold text-xl mr-4\">\n                      {classItem.name[0]}\n                    </div>\n                    <div>\n                      <h3 className=\"text-xl font-bold text-gray-900\">{classItem.name}</h3>\n                      <p className=\"text-red-600 font-medium\">{classItem.level} • {classItem.duration}</p>\n                    </div>\n                  </div>\n                  <p className=\"text-gray-600 mb-4\">{classItem.description}</p>\n                  <div className=\"text-sm text-gray-500\">\n                    Next session: {classItem.nextSession}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Personal CTA Section */}\n        <div className=\"bg-red-600 py-16 px-6\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h2 className=\"text-3xl font-bold text-white mb-6\">\n              Ready to Start Your {prospectData.interest} Journey, {prospectData.name.split(' ')[0]}?\n            </h2>\n            <p className=\"text-xl text-red-100 mb-8\">\n              Join Virgin Active {prospectData.location} and transform your fitness goals into reality.\n            </p>\n            <div className=\"space-y-4 sm:space-y-0 sm:space-x-4 sm:flex sm:justify-center\">\n              <a\n                href=\"tel:020-3837-4721\"\n                className=\"inline-block bg-white text-red-600 px-8 py-3 rounded-lg font-bold text-lg hover:bg-gray-100 transition-colors\"\n              >\n                Call 020 3837 4721\n              </a>\n              <a\n                href=\"mailto:sales@virginactive.co.uk\"\n                className=\"inline-block bg-red-800 text-white px-8 py-3 rounded-lg font-bold text-lg hover:bg-red-900 transition-colors\"\n              >\n                Email Us Today\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderDefaultTour = () => (\n    <div className=\"bg-white\">\n      {/* Default Hero Section */}\n      <div \n        className=\"relative h-96 bg-cover bg-center\"\n        style={{\n          backgroundImage: \"url('https://images.unsplash.com/photo-1534438327276-14e5300c3a48?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80')\",\n        }}\n      >\n        <div className=\"absolute inset-0 bg-black bg-opacity-60\" />\n        <div className=\"relative z-10 flex items-center justify-center h-full\">\n          <div className=\"text-center text-white max-w-4xl mx-auto px-6\">\n            <h1 className=\"text-5xl font-bold mb-4\">\n              Welcome to Virgin Active\n            </h1>\n            <p className=\"text-xl mb-6\">\n              Discover world-class fitness facilities and expert guidance\n            </p>\n            <p className=\"text-lg opacity-90\">\n              Join Britain's leading premium health club\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Default facilities and contact */}\n      <div className=\"py-16 px-6\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h2 className=\"text-3xl font-bold mb-8 text-gray-900\">\n            Experience Virgin Active\n          </h2>\n          <p className=\"text-lg text-gray-600 mb-8\">\n            Visit our state-of-the-art facilities and discover how we can help you achieve your fitness goals.\n          </p>\n          <div className=\"space-y-4 sm:space-y-0 sm:space-x-4 sm:flex sm:justify-center\">\n            <a\n              href=\"tel:020-3837-4721\"\n              className=\"inline-block bg-red-600 text-white px-8 py-3 rounded-lg font-bold text-lg hover:bg-red-700 transition-colors\"\n            >\n              Call 020 3837 4721\n            </a>\n            <a\n              href=\"mailto:sales@virginactive.co.uk\"\n              className=\"inline-block bg-white text-red-600 border-2 border-red-600 px-8 py-3 rounded-lg font-bold text-lg hover:bg-red-50 transition-colors\"\n            >\n              Email Us\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-red-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading your personalized tour...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen\">\n      {renderPersonalizedContent()}\n    </div>\n  );\n};\n\n// Helper functions for personalized content\nconst getPersonalizedFacilities = (interest: string) => {\n  const facilityMap: Record<string, any[]> = {\n    'Weight Training': [\n      {\n        name: 'Free Weights Area',\n        description: 'Complete range of dumbbells, barbells, and plates for serious strength training.',\n        image: 'https://images.unsplash.com/photo-1534438327276-14e5300c3a48?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80',\n        suitableFor: 'Muscle building and strength'\n      },\n      {\n        name: 'Power Lifting Platform',\n        description: 'Dedicated platforms for deadlifts, squats, and Olympic lifts.',\n        image: 'https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80',\n        suitableFor: 'Advanced weight training'\n      },\n      {\n        name: 'Recovery Suite',\n        description: 'Sauna, steam room, and massage services for optimal recovery.',\n        image: 'https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80',\n        suitableFor: 'Post-workout recovery'\n      }\n    ],\n    'Cardio': [\n      {\n        name: 'Cardio Zone',\n        description: 'Latest treadmills, bikes, and ellipticals with entertainment systems.',\n        image: 'https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80',\n        suitableFor: 'Cardiovascular fitness'\n      },\n      {\n        name: 'Indoor Cycling Studio',\n        description: 'High-energy spin classes with immersive sound and lighting.',\n        image: 'https://images.unsplash.com/photo-1534438327276-14e5300c3a48?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80',\n        suitableFor: 'High-intensity cardio'\n      },\n      {\n        name: 'Running Track',\n        description: 'Indoor track for weather-independent running and walking.',\n        image: 'https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80',\n        suitableFor: 'Running enthusiasts'\n      }\n    ],\n    'Swimming': [\n      {\n        name: '25m Swimming Pool',\n        description: 'Competition-standard pool with dedicated lanes for serious swimmers.',\n        image: 'https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80',\n        suitableFor: 'Lap swimming and training'\n      },\n      {\n        name: 'Hydrotherapy Pool',\n        description: 'Warm water pool perfect for aqua aerobics and recovery.',\n        image: 'https://images.unsplash.com/photo-1534438327276-14e5300c3a48?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80',\n        suitableFor: 'Low-impact exercise'\n      },\n      {\n        name: 'Poolside Relaxation',\n        description: 'Comfortable lounging area with refreshments available.',\n        image: 'https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80',\n        suitableFor: 'Post-swim relaxation'\n      }\n    ]\n  };\n\n  return facilityMap[interest] || facilityMap['Weight Training'];\n};\n\nconst getPersonalizedClasses = (fitnessLevel: string) => {\n  const classMap: Record<string, any[]> = {\n    'Beginner': [\n      {\n        name: 'Introduction to Fitness',\n        level: 'Beginner',\n        duration: '45 mins',\n        description: 'Perfect starting point covering basic movements and gym etiquette.',\n        nextSession: 'Tomorrow 10:00'\n      },\n      {\n        name: 'Gentle Yoga',\n        level: 'Beginner',\n        duration: '60 mins', \n        description: 'Relaxing yoga focusing on flexibility and stress relief.',\n        nextSession: 'Today 18:00'\n      }\n    ],\n    'Intermediate': [\n      {\n        name: 'HIIT Training',\n        level: 'Intermediate',\n        duration: '45 mins',\n        description: 'High-intensity interval training for maximum calorie burn.',\n        nextSession: 'Tomorrow 07:00'\n      },\n      {\n        name: 'Strength & Conditioning',\n        level: 'Intermediate',\n        duration: '50 mins',\n        description: 'Build functional strength with compound movements.',\n        nextSession: 'Today 19:00'\n      }\n    ],\n    'Advanced': [\n      {\n        name: 'CrossFit',\n        level: 'Advanced',\n        duration: '60 mins',\n        description: 'Intense functional fitness combining cardio and strength.',\n        nextSession: 'Tomorrow 06:00'\n      },\n      {\n        name: 'Olympic Lifting',\n        level: 'Advanced',\n        duration: '75 mins',\n        description: 'Master the clean & jerk and snatch with expert coaching.',\n        nextSession: 'Today 17:30'\n      }\n    ]\n  };\n\n  return classMap[fitnessLevel] || classMap['Intermediate'];\n};\n\nexport default VirtualTour;","size_bytes":14563},"client/src/pages/Login.tsx":{"content":"\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dumbbell } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuthContext } from \"@/contexts/AuthContext\";\n\nexport function Login() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { login, logout } = useAuthContext();\n\n  // Logout function for convenience\n  const handleLogout = () => {\n    logout();\n    toast({\n      title: \"Logged Out\",\n      description: \"You have been successfully logged out.\",\n    });\n    setLocation(\"/\");\n  };\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    // Dummy credentials\n    const validCredentials = [\n      { email: \"admin@virginactive.com\", password: \"admin123\", role: \"staff\" },\n      { email: \"member@virginactive.com\", password: \"member123\", role: \"member\" },\n      { email: \"demo@virginactive.com\", password: \"demo123\", role: \"member\" }\n    ];\n\n    const user = validCredentials.find(\n      cred => cred.email === email && cred.password === password\n    );\n\n    setTimeout(() => {\n      if (user) {\n        // Use AuthContext login function\n        const userData = {\n          id: Date.now().toString(),\n          email: user.email,\n          role: user.role,\n          firstName: user.email.split(\"@\")[0],\n          lastName: \"User\"\n        };\n        \n        login(userData as any);\n\n        toast({\n          title: \"Login Successful\",\n          description: `Welcome back, ${user.email}!`,\n        });\n\n        // Redirect based on role\n        if (user.role === \"staff\") {\n          setLocation(\"/staff\");\n        } else {\n          setLocation(\"/portal\");\n        }\n      } else {\n        toast({\n          title: \"Login Failed\",\n          description: \"Invalid email or password. Try: admin@virginactive.com / admin123\",\n          variant: \"destructive\",\n        });\n      }\n      setIsLoading(false);\n    }, 1000);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"w-12 h-12 bg-red-600 rounded-lg flex items-center justify-center\">\n              <Dumbbell className=\"text-white h-6 w-6\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-gray-900\">\n            Virgin Active Login\n          </CardTitle>\n          <p className=\"text-gray-600 mt-2\">\n            Sign in to your account\n          </p>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleLogin} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n                className=\"mt-1\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"Enter your password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                className=\"mt-1\"\n              />\n            </div>\n            <Button\n              type=\"submit\"\n              className=\"w-full bg-red-600 hover:bg-red-700\"\n              disabled={isLoading}\n            >\n              {isLoading ? \"Signing in...\" : \"Sign In\"}\n            </Button>\n          </form>\n          \n          <div className=\"mt-6 p-4 bg-gray-100 rounded-lg\">\n            <h4 className=\"font-semibold text-sm text-gray-700 mb-2\">Demo Credentials:</h4>\n            <div className=\"text-xs text-gray-600 space-y-1\">\n              <div><strong>Staff:</strong> admin@virginactive.com / admin123</div>\n              <div><strong>Member:</strong> member@virginactive.com / member123</div>\n              <div><strong>Demo:</strong> demo@virginactive.com / demo123</div>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"w-full mt-3 text-xs\"\n              onClick={handleLogout}\n            >\n              Logout Current Session\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4936},"client/src/pages/CustomerChurnAnalysis.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Users, \n  AlertTriangle, \n  TrendingDown, \n  Phone,\n  Sparkles,\n  FileText,\n  Mail,\n  CheckCircle,\n  XCircle,\n  Send,\n  User,\n  Calendar,\n  Eye,\n  EyeOff,\n  Bot,\n  BarChart3,\n  MessageCircle,\n  ArrowLeft\n} from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useAuthContext } from \"@/contexts/AuthContext\";\nimport type { User as UserType, OutreachAction } from \"@shared/schema\";\n\ninterface ChurnEmail {\n  id: string;\n  memberId: string;\n  subject: string;\n  content: string;\n  riskLevel: string;\n  currentRiskBand: string;\n  previousRiskBand?: string;\n  memberProfile: {\n    firstName: string;\n    lastName: string;\n    email: string;\n    membershipType: string;\n    joinDate: string;\n    lastVisit?: string;\n    loyaltyPoints: number;\n  };\n  status: string;\n  approvedBy?: string;\n  approvedAt?: string;\n  sentAt?: string;\n  createdAt: string;\n  updatedAt: string;\n  memberName?: string;\n  memberEmail?: string;\n  memberMembershipType?: string;\n}\n\ninterface ChatMessage {\n  type: 'bot' | 'user';\n  content: string;\n  timestamp: Date;\n  isTyping?: boolean;\n}\n\nexport function CustomerChurnAnalysis() {\n  // UI State\n  const [showDashboard, setShowDashboard] = useState(false);\n  const [showChat, setShowChat] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n\n  // Churn Prediction State\n  const [selectedMember, setSelectedMember] = useState<UserType | null>(null);\n  const [retentionStrategies, setRetentionStrategies] = useState<string>(\"\");\n  const [actionType, setActionType] = useState(\"call\");\n  const [actionNotes, setActionNotes] = useState(\"\");\n\n  // Email Management State\n  const [emails, setEmails] = useState<ChurnEmail[]>([]);\n  const [emailsLoading, setEmailsLoading] = useState(false);\n  const [selectedEmail, setSelectedEmail] = useState<ChurnEmail | null>(null);\n  const [expandedContent, setExpandedContent] = useState<string | null>(null);\n\n  const { user: currentUser } = useAuthContext();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch metrics and at-risk members\n  const { data: metrics, isLoading: metricsLoading } = useQuery({\n    queryKey: [\"/api/staff/metrics\"],\n    retry: false,\n  });\n\n  const { data: atRiskMembers = [], isLoading: membersLoading } = useQuery({\n    queryKey: [\"/api/staff/at-risk-members\"],\n    retry: false,\n  });\n\n  const { data: outreachHistory = [] } = useQuery({\n    queryKey: [\"/api/staff/member\", selectedMember?.id, \"outreach-history\"],\n    enabled: !!selectedMember?.id,\n    retry: false,\n  });\n\n  // Fetch churn emails\n  const fetchChurnEmails = async () => {\n    setEmailsLoading(true);\n    try {\n      const response = await fetch(\"/api/staff/churn-emails\", {\n        credentials: \"include\",\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setEmails(data);\n      }\n    } catch (error) {\n      console.error(\"Error fetching churn emails:\", error);\n    } finally {\n      setEmailsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchChurnEmails();\n  }, []);\n\n  // AI Agent functionality\n  const addMessage = (type: 'bot' | 'user', content: string) => {\n    setMessages(prev => [...prev, { type, content, timestamp: new Date() }]);\n  };\n\n  const simulateTyping = async (duration = 2000) => {\n    setIsTyping(true);\n    await new Promise(resolve => setTimeout(resolve, duration));\n    setIsTyping(false);\n  };\n\n  const callGeminiAPI = async (prompt: string) => {\n    try {\n      const response = await apiRequest(\"POST\", \"/api/ai/chat\", {\n        message: prompt,\n        context: \"churn_analysis\"\n      });\n      const data = await response.json();\n      return data.response;\n    } catch (error) {\n      console.error(\"Error calling Gemini API:\", error);\n      return \"I'm having trouble accessing the AI service right now. Please try again later.\";\n    }\n  };\n\n  const handleUserMessage = async (message: string) => {\n    addMessage('user', message);\n    await simulateTyping();\n    \n    const response = await callGeminiAPI(`\n      As a Customer Churn Analysis AI assistant, respond to: \"${message}\"\n      \n      Current customer metrics:\n      - Total members: ${(metrics as any)?.totalMembers || 0}\n      - At-risk members: ${(metrics as any)?.atRiskMembers || 0}\n      - Churn rate: ${(metrics as any)?.churnRate || \"0%\"}\n      - Pending emails: ${emails.filter(e => e.status === \"pending\").length}\n      \n      Provide actionable insights and recommendations for customer retention.\n    `);\n    \n    addMessage('bot', response);\n  };\n\n  // Proactive AI messaging\n  useEffect(() => {\n    if (showChat && messages.length === 0) {\n      const timer = setTimeout(async () => {\n        await simulateTyping(1500);\n        addMessage('bot', `👋 Hello! I'm your Customer Churn Analysis AI assistant. I've analyzed your customer database and found:\n\n📊 **Current Status:**\n• ${(metrics as any)?.atRiskMembers || 0} members at risk of churning\n• ${emails.filter(e => e.status === \"pending\").length} pending email approvals\n• ${(metrics as any)?.churnRate || \"0%\"} current churn rate\n\n🎯 **I can help you:**\n• Analyze at-risk customer patterns\n• Generate retention strategies\n• Review churn prevention emails\n• Suggest proactive outreach actions\n\nWhat would you like to focus on first?`);\n      }, 1000);\n\n      return () => clearTimeout(timer);\n    }\n  }, [showChat, messages.length, metrics, emails]);\n\n  // Mutations for churn prediction\n  const generateStrategiesMutation = useMutation({\n    mutationFn: async (memberProfile: any) => {\n      const response = await apiRequest(\"POST\", \"/api/ai/retention-strategies\", {\n        memberProfile,\n      });\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      setRetentionStrategies(data.strategies);\n      toast({\n        title: \"Strategies Generated\",\n        description: \"AI has created personalized retention strategies.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate retention strategies.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logActionMutation = useMutation({\n    mutationFn: async (actionData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/staff/outreach-action\", actionData);\n      return await response.json();\n    },\n    onSuccess: () => {\n      setActionNotes(\"\");\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/staff/member\", selectedMember?.id, \"outreach-history\"] \n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/staff/metrics\"] });\n      toast({\n        title: \"Action Logged\",\n        description: \"Outreach action has been recorded.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to log outreach action.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Email management functions\n  const handleApprove = async (emailId: string) => {\n    try {\n      const response = await fetch(\n        `/api/staff/churn-emails/${emailId}/approve`,\n        {\n          method: \"POST\",\n          credentials: \"include\",\n        },\n      );\n      if (response.ok) {\n        await fetchChurnEmails();\n        await handleUserMessage(`I just approved email ID ${emailId}. Please provide insights on this action.`);\n      }\n    } catch (error) {\n      console.error(\"Error approving email:\", error);\n    }\n  };\n\n  const handleReject = async (emailId: string) => {\n    try {\n      const response = await fetch(\n        `/api/staff/churn-emails/${emailId}/reject`,\n        {\n          method: \"POST\",\n          credentials: \"include\",\n        },\n      );\n      if (response.ok) {\n        await fetchChurnEmails();\n        await handleUserMessage(`I just rejected email ID ${emailId}. What should I consider next?`);\n      }\n    } catch (error) {\n      console.error(\"Error rejecting email:\", error);\n    }\n  };\n\n  const handleMarkSent = async (emailId: string) => {\n    try {\n      const response = await fetch(`/api/staff/churn-emails/${emailId}/send`, {\n        method: \"POST\",\n        credentials: \"include\",\n      });\n      if (response.ok) {\n        await fetchChurnEmails();\n        await handleUserMessage(`I just marked email ID ${emailId} as sent. What's the next step?`);\n      }\n    } catch (error) {\n      console.error(\"Error marking email as sent:\", error);\n    }\n  };\n\n  // Helper functions\n  const handleGenerateStrategies = () => {\n    if (!selectedMember) return;\n\n    const memberProfile = {\n      name: `${selectedMember.firstName} ${selectedMember.lastName}`,\n      membershipType: selectedMember.membershipType,\n      joinDate: selectedMember.joinDate ? new Date(selectedMember.joinDate).toLocaleDateString() : \"Unknown\",\n      lastVisit: selectedMember.lastVisit ? new Date(selectedMember.lastVisit).toLocaleDateString() : \"Never\",\n      avgVisits: Math.floor(Math.random() * 15) + 5,\n      churnRisk: \"89%\",\n      feedback: \"Finds it too crowded\",\n    };\n\n    generateStrategiesMutation.mutate(memberProfile);\n  };\n\n  const handleLogAction = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!selectedMember || !actionNotes.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please select a member and enter action notes.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    logActionMutation.mutate({\n      memberId: selectedMember.id,\n      actionType,\n      notes: actionNotes.trim(),\n    });\n  };\n\n  const getRiskLevel = (member: UserType) => {\n    if (!member.lastVisit) return { level: \"high\", color: \"bg-red-500\", percentage: 95 };\n    \n    const daysSinceLastVisit = Math.floor(\n      (Date.now() - new Date(member.lastVisit).getTime()) / (1000 * 60 * 60 * 24)\n    );\n    \n    if (daysSinceLastVisit > 10) return { level: \"high\", color: \"bg-red-500\", percentage: 89 };\n    if (daysSinceLastVisit > 7) return { level: \"medium\", color: \"bg-orange-500\", percentage: 76 };\n    return { level: \"low\", color: \"bg-yellow-500\", percentage: 65 };\n  };\n\n  const getRiskBadgeColor = (riskLevel: string) => {\n    switch (riskLevel) {\n      case \"high\":\n        return \"bg-red-600 hover:bg-red-700 text-white shadow-sm\";\n      case \"medium\":\n        return \"bg-amber-500 hover:bg-amber-600 text-white shadow-sm\";\n      case \"low\":\n        return \"bg-yellow-500 hover:bg-yellow-600 text-white shadow-sm\";\n      default:\n        return \"bg-gray-500 hover:bg-gray-600 text-white shadow-sm\";\n    }\n  };\n\n  const getStatusBadgeColor = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return \"bg-blue-600 hover:bg-blue-700 text-white shadow-sm\";\n      case \"approved\":\n        return \"bg-emerald-600 hover:bg-emerald-700 text-white shadow-sm\";\n      case \"rejected\":\n        return \"bg-red-600 hover:bg-red-700 text-white shadow-sm\";\n      case \"sent\":\n        return \"bg-purple-600 hover:bg-purple-700 text-white shadow-sm\";\n      default:\n        return \"bg-gray-500 hover:bg-gray-600 text-white shadow-sm\";\n    }\n  };\n\n  const getActionIcon = (actionType: string) => {\n    switch (actionType) {\n      case \"call\": return \"📞\";\n      case \"email\": return \"📧\";\n      case \"in-person\": return \"👥\";\n      case \"offer\": return \"🎁\";\n      default: return \"📝\";\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"en-GB\", {\n      day: \"numeric\",\n      month: \"short\",\n      year: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  const truncateContent = (content: string, maxLength: number = 150) => {\n    if (content.length <= maxLength) return content;\n    return content.substring(0, maxLength) + \"...\";\n  };\n\n  if (metricsLoading || membersLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-white to-purple-50\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <div className=\"text-slate-600 text-lg\">\n            Loading customer analysis...\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Landing Page View\n  if (!showDashboard) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 flex flex-col\">\n        {/* Header */}\n        <div className=\"flex-1 flex flex-col items-center justify-center px-4\">\n          <div className=\"w-full max-w-4xl mx-auto text-center\">\n            {/* Bot Icon */}\n            <div className=\"inline-flex items-center justify-center w-24 h-24 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full mb-8 shadow-lg\">\n              <BarChart3 className=\"h-12 w-12 text-white\" />\n            </div>\n\n            {/* Main Heading */}\n            <h1 className=\"text-4xl md:text-6xl font-bold text-gray-900 mb-6 tracking-tight\">\n              Customer Churn\n              <span className=\"block text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600\">\n                Analysis AI\n              </span>\n            </h1>\n\n            {/* Subtitle */}\n            <p className=\"text-xl md:text-2xl text-gray-600 mb-12 max-w-3xl mx-auto leading-relaxed\">\n              AI-powered customer retention insights and automated churn prevention strategies\n            </p>\n\n            {/* CTA Buttons */}\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-16\">\n              <Button\n                onClick={() => setShowChat(true)}\n                size=\"lg\"\n                className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-semibold px-8 py-4 rounded-full shadow-lg transition-all duration-200\"\n                data-testid=\"button-start-analysis\"\n              >\n                <MessageCircle className=\"mr-2 h-5 w-5\" />\n                Start Analysis Chat\n              </Button>\n              <Button\n                onClick={() => setShowDashboard(true)}\n                variant=\"outline\"\n                size=\"lg\"\n                className=\"border-2 border-blue-600 text-blue-600 hover:bg-blue-50 font-semibold px-8 py-4 rounded-full transition-all duration-200\"\n                data-testid=\"button-view-dashboard\"\n              >\n                <BarChart3 className=\"mr-2 h-5 w-5\" />\n                View Dashboard\n              </Button>\n            </div>\n\n            {/* Feature Cards */}\n            <div className=\"grid md:grid-cols-3 gap-8 max-w-5xl mx-auto\">\n              <div className=\"bg-white rounded-2xl p-6 shadow-lg border border-gray-100\">\n                <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center mb-4 mx-auto\">\n                  <AlertTriangle className=\"h-6 w-6 text-red-600\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Risk Detection</h3>\n                <p className=\"text-gray-600\">\n                  Identify at-risk customers with AI-powered behavioral analysis and predictive modeling\n                </p>\n              </div>\n\n              <div className=\"bg-white rounded-2xl p-6 shadow-lg border border-gray-100\">\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mb-4 mx-auto\">\n                  <Mail className=\"h-6 w-6 text-green-600\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Email Automation</h3>\n                <p className=\"text-gray-600\">\n                  Generate and manage personalized retention emails with AI-driven content optimization\n                </p>\n              </div>\n\n              <div className=\"bg-white rounded-2xl p-6 shadow-lg border border-gray-100\">\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mb-4 mx-auto\">\n                  <Sparkles className=\"h-6 w-6 text-blue-600\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Smart Strategies</h3>\n                <p className=\"text-gray-600\">\n                  Get AI-generated retention strategies tailored to each customer's unique profile and behavior\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Chat Interface */}\n        {showChat && (\n          <div className=\"fixed bottom-4 right-4 w-96 h-96 bg-white rounded-lg shadow-2xl border border-gray-200 flex flex-col z-50\">\n            {/* Chat Header */}\n            <div className=\"flex items-center justify-between p-4 border-b bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-t-lg\">\n              <div className=\"flex items-center space-x-2\">\n                <Bot className=\"h-5 w-5\" />\n                <span className=\"font-semibold\">Churn Analysis AI</span>\n              </div>\n              <Button\n                onClick={() => setShowChat(false)}\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"text-white hover:bg-white/20\"\n                data-testid=\"button-close-chat\"\n              >\n                ×\n              </Button>\n            </div>\n\n            {/* Chat Messages */}\n            <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n              {messages.map((message, index) => (\n                <div\n                  key={index}\n                  className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}\n                >\n                  <div\n                    className={`max-w-[80%] p-3 rounded-lg ${\n                      message.type === 'user'\n                        ? 'bg-blue-600 text-white'\n                        : 'bg-gray-100 text-gray-900'\n                    }`}\n                  >\n                    <p className=\"text-sm whitespace-pre-wrap\">{message.content}</p>\n                  </div>\n                </div>\n              ))}\n              \n              {isTyping && (\n                <div className=\"flex justify-start\">\n                  <div className=\"bg-gray-100 text-gray-900 max-w-[80%] p-3 rounded-lg\">\n                    <div className=\"flex space-x-1\">\n                      <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\n                      <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                      <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Chat Input */}\n            <div className=\"p-4 border-t\">\n              <div className=\"flex space-x-2\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Ask about customer retention...\"\n                  className=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  onKeyPress={(e) => {\n                    if (e.key === 'Enter') {\n                      const target = e.target as HTMLInputElement;\n                      if (target.value.trim()) {\n                        handleUserMessage(target.value.trim());\n                        target.value = '';\n                      }\n                    }\n                  }}\n                  data-testid=\"input-chat-message\"\n                />\n                <Button\n                  onClick={(e) => {\n                    const input = (e.target as HTMLElement).parentElement?.querySelector('input') as HTMLInputElement;\n                    if (input?.value.trim()) {\n                      handleUserMessage(input.value.trim());\n                      input.value = '';\n                    }\n                  }}\n                  size=\"sm\"\n                  className=\"bg-blue-600 hover:bg-blue-700\"\n                  data-testid=\"button-send-message\"\n                >\n                  <Send className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  // Dashboard View\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50\">\n      <div className=\"p-8\">\n        {/* Dashboard Header */}\n        <div className=\"bg-white rounded-2xl shadow-lg border border-slate-200 p-6 mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                onClick={() => setShowDashboard(false)}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"border-gray-300\"\n                data-testid=\"button-back-to-landing\"\n              >\n                <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                Back\n              </Button>\n              <div>\n                <h1 className=\"text-3xl font-bold text-slate-800 mb-2\">\n                  Customer Churn Analysis Dashboard\n                </h1>\n                <p className=\"text-slate-600 text-lg\">\n                  AI-powered insights and retention management\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                onClick={() => setShowChat(true)}\n                className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700\"\n                data-testid=\"button-open-analysis-chat\"\n              >\n                <MessageCircle className=\"mr-2 h-4 w-4\" />\n                Open Analysis Chat\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Key Metrics */}\n        <div className=\"grid md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"border border-slate-200/60 shadow-sm hover:shadow-md transition-all duration-300\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"w-12 h-12 bg-blue-100 rounded-xl flex items-center justify-center\">\n                  <Users className=\"text-blue-600 h-6 w-6\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xs font-semibold uppercase tracking-wider text-slate-500\">Total Members</h3>\n                  <p className=\"text-3xl font-bold text-slate-900\" data-testid=\"text-total-members\">\n                    {(metrics as any)?.totalMembers || 0}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border border-slate-200/60 shadow-sm hover:shadow-md transition-all duration-300\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"w-12 h-12 bg-orange-100 rounded-xl flex items-center justify-center\">\n                  <AlertTriangle className=\"text-orange-600 h-6 w-6\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xs font-semibold uppercase tracking-wider text-slate-500\">At-Risk Members</h3>\n                  <p className=\"text-3xl font-bold text-orange-600\" data-testid=\"text-at-risk-members\">\n                    {(metrics as any)?.atRiskMembers || 0}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border border-slate-200/60 shadow-sm hover:shadow-md transition-all duration-300\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"w-12 h-12 bg-red-100 rounded-xl flex items-center justify-center\">\n                  <TrendingDown className=\"text-red-600 h-6 w-6\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xs font-semibold uppercase tracking-wider text-slate-500\">Churn Rate</h3>\n                  <p className=\"text-3xl font-bold text-red-600\" data-testid=\"text-churn-rate\">\n                    {(metrics as any)?.churnRate || \"0%\"}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border border-slate-200/60 shadow-sm hover:shadow-md transition-all duration-300\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"w-12 h-12 bg-purple-100 rounded-xl flex items-center justify-center\">\n                  <Mail className=\"text-purple-600 h-6 w-6\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xs font-semibold uppercase tracking-wider text-slate-500\">Pending Emails</h3>\n                  <p className=\"text-3xl font-bold text-purple-600\" data-testid=\"text-pending-emails\">\n                    {emails.filter(e => e.status === \"pending\").length}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content Grid */}\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* At-Risk Members List */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"border border-slate-200/60 shadow-sm hover:shadow-md transition-all duration-300\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-lg font-semibold text-slate-900\">High-Risk Members</CardTitle>\n                <p className=\"text-slate-600 text-sm leading-relaxed\">Sorted by churn probability</p>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <div className=\"max-h-96 overflow-y-auto\">\n                  {(atRiskMembers as UserType[]).length === 0 ? (\n                    <div className=\"p-6 text-center text-gray-500\">\n                      <AlertTriangle className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                      <p>No at-risk members found</p>\n                    </div>\n                  ) : (\n                    (atRiskMembers as UserType[]).map((member: UserType, index: number) => {\n                      const risk = getRiskLevel(member);\n                      const isSelected = selectedMember?.id === member.id;\n                      \n                      return (\n                        <div\n                          key={member.id}\n                          onClick={() => setSelectedMember(member)}\n                          className={`p-4 border-b border-gray-100 hover:bg-gray-50 cursor-pointer transition-colors ${\n                            isSelected ? 'bg-blue-50 border-blue-200' : ''\n                          }`}\n                          data-testid={`member-${index}`}\n                        >\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <h3 className=\"font-semibold text-gray-900\">\n                                {member.firstName} {member.lastName}\n                              </h3>\n                              <p className=\"text-sm text-gray-600 capitalize\">\n                                {member.membershipType} Member • {\n                                  member.joinDate \n                                    ? Math.floor((Date.now() - new Date(member.joinDate).getTime()) / (1000 * 60 * 60 * 24 * 30))\n                                    : 0\n                                } months\n                              </p>\n                              <p className=\"text-xs text-orange-600 mt-1\">\n                                Risk: {risk.percentage}% • Last visit: {\n                                  member.lastVisit \n                                    ? Math.floor((Date.now() - new Date(member.lastVisit).getTime()) / (1000 * 60 * 60 * 24)) + \" days ago\"\n                                    : \"Never\"\n                                }\n                              </p>\n                            </div>\n                            <div className={`w-3 h-3 ${risk.color} rounded-full`}></div>\n                          </div>\n                        </div>\n                      );\n                    })\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Member Details & Actions */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Selected Member Profile */}\n            <Card className=\"border border-slate-200/60 shadow-sm hover:shadow-md transition-all duration-300\">\n              {selectedMember ? (\n                <>\n                  <CardHeader className=\"border-b\">\n                    <div className=\"flex items-start gap-6\">\n                      <div className=\"w-16 h-16 bg-gray-300 rounded-full flex items-center justify-center text-gray-600 font-semibold text-xl\">\n                        {selectedMember.firstName?.[0]}{selectedMember.lastName?.[0]}\n                      </div>\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-2xl mb-2\">\n                          {selectedMember.firstName} {selectedMember.lastName}\n                        </CardTitle>\n                        <div className=\"grid md:grid-cols-2 gap-4 text-sm\">\n                          <div>\n                            <p className=\"text-gray-600\">\n                              Membership: <span className=\"font-medium text-gray-900 capitalize\">\n                                {selectedMember.membershipType}\n                              </span>\n                            </p>\n                            <p className=\"text-gray-600\">\n                              Member since: <span className=\"font-medium text-gray-900\">\n                                {selectedMember.joinDate ? new Date(selectedMember.joinDate).toLocaleDateString() : \"Unknown\"}\n                              </span>\n                            </p>\n                          </div>\n                          <div>\n                            <p className=\"text-gray-600\">\n                              Churn risk: <span className=\"font-medium text-red-600\">\n                                {getRiskLevel(selectedMember).percentage}%\n                              </span>\n                            </p>\n                            <p className=\"text-gray-600\">\n                              Loyalty points: <span className=\"font-medium text-gray-900\">\n                                {selectedMember.loyaltyPoints}\n                              </span>\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardHeader>\n\n                  <CardContent className=\"p-6\">\n                    {/* AI Retention Strategies */}\n                    <div className=\"mb-6\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <h3 className=\"text-lg font-semibold text-gray-900\">AI Retention Strategies</h3>\n                        <Button\n                          onClick={handleGenerateStrategies}\n                          disabled={generateStrategiesMutation.isPending}\n                          className=\"flex items-center gap-2\"\n                          data-testid=\"button-generate-strategies\"\n                        >\n                          <Sparkles className=\"h-4 w-4\" />\n                          {generateStrategiesMutation.isPending ? \"Generating...\" : \"Generate Strategies\"}\n                        </Button>\n                      </div>\n\n                      {generateStrategiesMutation.isPending ? (\n                        <div className=\"p-4 bg-gray-50 rounded-lg text-center\">\n                          <div className=\"inline-block animate-spin rounded-full h-6 w-6 border-b-2 border-primary mb-2\"></div>\n                          <p className=\"text-sm text-gray-600\">AI is analyzing member profile and generating strategies...</p>\n                        </div>\n                      ) : retentionStrategies ? (\n                        <div \n                          className=\"bg-gray-50 rounded-lg p-4 prose prose-sm max-w-none\"\n                          dangerouslySetInnerHTML={{ __html: retentionStrategies.replace(/\\n/g, '<br>') }}\n                          data-testid=\"retention-strategies-content\"\n                        />\n                      ) : (\n                        <div className=\"p-4 bg-gray-50 rounded-lg text-center text-gray-500\">\n                          Click \"Generate Strategies\" to get AI-powered retention recommendations\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Staff Action Logging */}\n                    <div className=\"grid md:grid-cols-2 gap-6\">\n                      <div>\n                        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">✍️ Log Staff Outreach</h3>\n                        <form onSubmit={handleLogAction} className=\"space-y-4\">\n                          <div>\n                            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Action Type</label>\n                            <Select value={actionType} onValueChange={setActionType}>\n                              <SelectTrigger data-testid=\"select-action-type\">\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"call\">Phone Call</SelectItem>\n                                <SelectItem value=\"email\">Email</SelectItem>\n                                <SelectItem value=\"in-person\">In-Person Meeting</SelectItem>\n                                <SelectItem value=\"offer\">Special Offer</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          <div>\n                            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Notes</label>\n                            <Textarea\n                              placeholder=\"Describe the action taken and member response...\"\n                              value={actionNotes}\n                              onChange={(e) => setActionNotes(e.target.value)}\n                              className=\"h-24\"\n                              data-testid=\"textarea-action-notes\"\n                            />\n                          </div>\n                          <Button\n                            type=\"submit\"\n                            disabled={logActionMutation.isPending || !actionNotes.trim()}\n                            className=\"w-full bg-green-600 hover:bg-green-700\"\n                            data-testid=\"button-log-action\"\n                          >\n                            {logActionMutation.isPending ? \"Logging...\" : \"Log Action\"}\n                          </Button>\n                        </form>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">📜 Outreach History</h3>\n                        <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n                          {(outreachHistory as OutreachAction[]).length === 0 ? (\n                            <div className=\"text-center text-gray-500 py-4\">\n                              <FileText className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                              <p>No outreach history found</p>\n                            </div>\n                          ) : (\n                            (outreachHistory as (OutreachAction & { staffName?: string })[]).map((action: OutreachAction & { staffName?: string }, index: number) => (\n                              <div key={action.id} className=\"bg-gray-50 p-3 rounded-lg\" data-testid={`outreach-${index}`}>\n                                <div className=\"flex items-center justify-between mb-2\">\n                                  <span className=\"text-sm font-medium text-gray-900\">\n                                    {getActionIcon(action.actionType)} {action.actionType.charAt(0).toUpperCase() + action.actionType.slice(1)}\n                                  </span>\n                                  <span className=\"text-xs text-gray-500\">\n                                    {action.createdAt ? new Date(action.createdAt).toLocaleDateString() : \"Unknown\"}\n                                  </span>\n                                </div>\n                                <p className=\"text-sm text-gray-700\">{action.notes}</p>\n                                <p className=\"text-xs text-gray-500 mt-1\">\n                                  by {action.staffName || currentUser?.firstName + ' ' + currentUser?.lastName || 'Staff'}\n                                </p>\n                              </div>\n                            ))\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </>\n              ) : (\n                <CardContent className=\"p-8 text-center\">\n                  <div className=\"text-gray-500\">\n                    <Users className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                    <h3 className=\"text-lg font-semibold mb-2\">Select a Member</h3>\n                    <p>Choose a member from the at-risk list to view details and manage retention efforts.</p>\n                  </div>\n                </CardContent>\n              )}\n            </Card>\n\n            {/* Churn Email Management */}\n            <Card className=\"border border-slate-200/60 shadow-sm hover:shadow-md transition-all duration-300\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-lg font-semibold text-slate-900\">Churn Prevention Emails</CardTitle>\n                <div className=\"flex items-center space-x-6\">\n                  <div className=\"text-center\">\n                    <div className=\"text-xl font-bold text-blue-600\">\n                      {emails.filter((e) => e.status === \"pending\").length}\n                    </div>\n                    <div className=\"text-xs text-slate-500\">Pending</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-xl font-bold text-emerald-600\">\n                      {emails.filter((e) => e.status === \"approved\").length}\n                    </div>\n                    <div className=\"text-xs text-slate-500\">Approved</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-xl font-bold text-purple-600\">\n                      {emails.filter((e) => e.status === \"sent\").length}\n                    </div>\n                    <div className=\"text-xs text-slate-500\">Sent</div>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <div className=\"max-h-96 overflow-y-auto\">\n                  {emailsLoading ? (\n                    <div className=\"p-6 text-center\">\n                      <div className=\"inline-block animate-spin rounded-full h-6 w-6 border-b-2 border-primary mb-2\"></div>\n                      <p className=\"text-sm text-gray-600\">Loading emails...</p>\n                    </div>\n                  ) : emails.length === 0 ? (\n                    <div className=\"p-6 text-center text-gray-500\">\n                      <Mail className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                      <p>No churn prevention emails generated yet</p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-3 p-4\">\n                      {emails.slice(0, 5).map((email) => (\n                        <div\n                          key={email.id}\n                          className=\"border border-gray-200 rounded-lg p-4 hover:shadow-sm transition-shadow\"\n                        >\n                          <div className=\"flex items-start justify-between mb-3\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center space-x-2 mb-2\">\n                                <h4 className=\"font-medium text-gray-900 text-sm\">\n                                  {email.subject}\n                                </h4>\n                                <Badge\n                                  className={`${getRiskBadgeColor(email.riskLevel)} text-white text-xs`}\n                                >\n                                  {email.riskLevel.toUpperCase()}\n                                </Badge>\n                                <Badge\n                                  className={`${getStatusBadgeColor(email.status)} text-white text-xs`}\n                                >\n                                  {email.status.toUpperCase()}\n                                </Badge>\n                              </div>\n                              <p className=\"text-xs text-gray-600\">\n                                {email.memberName || `${email.memberProfile.firstName} ${email.memberProfile.lastName}`} • {formatDate(email.createdAt)}\n                              </p>\n                            </div>\n                            <div className=\"flex items-center space-x-1\">\n                              {email.status === \"pending\" && (\n                                <>\n                                  <Button\n                                    size=\"sm\"\n                                    onClick={() => handleApprove(email.id)}\n                                    className=\"bg-green-600 hover:bg-green-700 text-white text-xs px-2 py-1\"\n                                    data-testid={`button-approve-${email.id}`}\n                                  >\n                                    <CheckCircle className=\"h-3 w-3\" />\n                                  </Button>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    onClick={() => handleReject(email.id)}\n                                    className=\"border-red-600 text-red-600 hover:bg-red-50 text-xs px-2 py-1\"\n                                    data-testid={`button-reject-${email.id}`}\n                                  >\n                                    <XCircle className=\"h-3 w-3\" />\n                                  </Button>\n                                </>\n                              )}\n                              {email.status === \"approved\" && (\n                                <Button\n                                  size=\"sm\"\n                                  onClick={() => handleMarkSent(email.id)}\n                                  className=\"bg-purple-600 hover:bg-purple-700 text-white text-xs px-2 py-1\"\n                                  data-testid={`button-send-${email.id}`}\n                                >\n                                  <Send className=\"h-3 w-3\" />\n                                </Button>\n                              )}\n                            </div>\n                          </div>\n                          <p className=\"text-xs text-gray-700 leading-relaxed\">\n                            {truncateContent(email.content, 100)}\n                          </p>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Chat Interface for Dashboard View */}\n        {showChat && (\n          <div className=\"fixed bottom-4 right-4 w-96 h-96 bg-white rounded-lg shadow-2xl border border-gray-200 flex flex-col z-50\">\n            {/* Chat Header */}\n            <div className=\"flex items-center justify-between p-4 border-b bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-t-lg\">\n              <div className=\"flex items-center space-x-2\">\n                <Bot className=\"h-5 w-5\" />\n                <span className=\"font-semibold\">Churn Analysis AI</span>\n              </div>\n              <Button\n                onClick={() => setShowChat(false)}\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"text-white hover:bg-white/20\"\n                data-testid=\"button-close-chat-dashboard\"\n              >\n                ×\n              </Button>\n            </div>\n\n            {/* Chat Messages */}\n            <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n              {messages.map((message, index) => (\n                <div\n                  key={index}\n                  className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}\n                >\n                  <div\n                    className={`max-w-[80%] p-3 rounded-lg ${\n                      message.type === 'user'\n                        ? 'bg-blue-600 text-white'\n                        : 'bg-gray-100 text-gray-900'\n                    }`}\n                  >\n                    <p className=\"text-sm whitespace-pre-wrap\">{message.content}</p>\n                  </div>\n                </div>\n              ))}\n              \n              {isTyping && (\n                <div className=\"flex justify-start\">\n                  <div className=\"bg-gray-100 text-gray-900 max-w-[80%] p-3 rounded-lg\">\n                    <div className=\"flex space-x-1\">\n                      <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\n                      <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                      <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Chat Input */}\n            <div className=\"p-4 border-t\">\n              <div className=\"flex space-x-2\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Ask about customer retention...\"\n                  className=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  onKeyPress={(e) => {\n                    if (e.key === 'Enter') {\n                      const target = e.target as HTMLInputElement;\n                      if (target.value.trim()) {\n                        handleUserMessage(target.value.trim());\n                        target.value = '';\n                      }\n                    }\n                  }}\n                  data-testid=\"input-chat-message-dashboard\"\n                />\n                <Button\n                  onClick={(e) => {\n                    const input = (e.target as HTMLElement).parentElement?.querySelector('input') as HTMLInputElement;\n                    if (input?.value.trim()) {\n                      handleUserMessage(input.value.trim());\n                      input.value = '';\n                    }\n                  }}\n                  size=\"sm\"\n                  className=\"bg-blue-600 hover:bg-blue-700\"\n                  data-testid=\"button-send-message-dashboard\"\n                >\n                  <Send className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":48875},"test-email.js":{"content":"// Test email sending functionality\nimport { EmailService } from './server/services/emailService';\n\nasync function testEmailSending() {\n  console.log('🧪 Testing Email Service...\\n');\n  \n  // Check email service status\n  const status = EmailService.getEmailServiceStatus();\n  console.log('📧 Email Service Status:', status);\n  console.log();\n  \n  // Test email data\n  const testEmailData = {\n    to: 'sdp01298@gmail.com',\n    subject: 'Test Email from Member Buddy Platform 🧪',\n    content: `Hello!\n\nThis is a test email from the Member Buddy platform to verify that email sending functionality is working correctly.\n\n**Test Details:**\n- Sent at: ${new Date().toISOString()}\n- Provider: ${status.provider}\n- Status: ${status.configured ? 'Configured ✅' : 'Test mode'}\n\nIf you receive this email, the email functionality is working properly!\n\nBest regards,\nMember Buddy Platform Team`,\n    prospectName: 'Test User'\n  };\n  \n  console.log('📤 Sending test email to:', testEmailData.to);\n  console.log('📋 Subject:', testEmailData.subject);\n  console.log();\n  \n  try {\n    const result = await EmailService.sendSalesEmail(testEmailData);\n    \n    if (result.success) {\n      console.log('✅ Email sent successfully!');\n      console.log('📧 Message ID:', result.messageId);\n      console.log('🔗 Tracking ID:', result.trackingId);\n    } else {\n      console.log('❌ Email sending failed:');\n      console.log('Error:', result.error);\n    }\n    \n    return result;\n  } catch (error) {\n    console.error('💥 Exception during email sending:', error);\n    return { success: false, error: error.message };\n  }\n}\n\n// Run the test\ntestEmailSending()\n  .then(result => {\n    console.log('\\n🏁 Test completed:', result.success ? 'SUCCESS' : 'FAILED');\n    process.exit(result.success ? 0 : 1);\n  })\n  .catch(error => {\n    console.error('💥 Test script error:', error);\n    process.exit(1);\n  });","size_bytes":1909}},"version":1}